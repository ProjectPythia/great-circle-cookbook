{"version":2,"kind":"Notebook","sha256":"bb886dbe02b52d963f02a7cd92c7dba882c19010d49b38afc44282194d33b38a","slug":"notebooks.tutorials.path-intersection","location":"/notebooks/tutorials/4_path_intersection.ipynb","dependencies":[],"frontmatter":{"title":"Intersections of Great Circles","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/4_path_intersection.ipynb","thumbnail":"/great-circle-cookbook/build/c86b1d97aff4a156dff93480f26508a4.gif","exports":[{"format":"ipynb","filename":"4_path_intersection.ipynb","url":"/great-circle-cookbook/build/4_path_intersection-2a9b63fe59492b9fdfb7f0dab973df6f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/c86b1d97aff4a156dff93480f26508a4.gif","alt":"Air traffic gif","key":"yGUSvsmCdX","urlSource":"https://i.pinimg.com/originals/3a/40/f9/3a40f906233af4665ddce02948013da5.gif"}],"key":"nmkJxgZ6ZF"}],"key":"Ut49Ih8grC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Intersections of Great Circles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"udt288YMhY"}],"identifier":"intersections-of-great-circles","label":"Intersections of Great Circles","html_id":"intersections-of-great-circles","implicit":true,"key":"zhv2qWOoId"}],"key":"jM7FNvGtWV"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h8aLsfglsI"}],"key":"tMjcUtqaAV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LEdKvDzlWJ"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"ttxjQxvkqV"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A great circle path crosses the entire planet and any two valid great circle paths will always intersect.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tH9MgoA4S5"}],"key":"COXDbBMEbN"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle paths (always exists)","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RE9gpFRTxM"}],"key":"VgnsXCKm9t"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle arcs (if it exists) (TODO)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uR1pepfZff"}],"key":"AxoLYQ2tRD"}],"key":"XnWbvQz3IU"}],"key":"eIziR0ZGiF"}],"key":"rieCzt5Dy2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aSK0O9fyAQ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"IbHR4XJEXe"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xmukvEfZNy"}],"key":"VXWNR2ao1V"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zoIzHfBgN5"}],"key":"rKIq3Z5NdN"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B0PS8WVbYj"}],"key":"zWUCTCY0bY"}],"key":"BwfmvOLXHu"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"EOh0lSTM5k"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"tvgapF9Sds"}],"key":"L33AzPm7KQ"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mWdk8Rd3LT"}],"key":"elBI7DVlel"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tn5njvM3aG"}],"key":"EOMYsWZh2E"}],"key":"FnvwuWyJnv"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"bJuNaYDSEb"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"RcbEkNwmS2"}],"key":"QXlyAnTnO8"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"PwQkqu5Knh"}],"key":"CtSI2kY64J"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"wAPfH57J2z"}],"key":"Wh1ncL0JR7"}],"key":"GzKXxBfHUq"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"F2afSSiv1T"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"xUMk3DD57z"}],"key":"dFHnG4TXYm"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aYz3EOK2as"}],"key":"Knlw3uJNmT"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"b0jPhBab5s"}],"key":"VbfERbch8L"}],"key":"XuEX8i3JZs"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"TMlh3YVury"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"NjxYf0LysL"}],"key":"Y4rMcvhLtk"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"T5qeX6eBVm"}],"key":"ZZHzek6pCF"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"v8rGwkLQZ1"}],"key":"dp0IIzuq49"}],"key":"QVQ1pTRrVs"}],"key":"JJFpCucy7m"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"pzvySZgAXS"}],"key":"llpURfCQLr"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tpu3K88IZI"}],"key":"VuSpNrb4Se"}],"key":"NCrRzKucDc"}],"key":"GT8kmQlb9O"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tIMCmBhtQh"}],"key":"Bvh8lHIYSr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PUee67iRuM"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"KEf2wMd1BY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Va3GFIOCOu"}],"key":"jygc5zVnHn"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"qJ2UdD7qeQ"}],"key":"Qq9uBhvoT7"}],"key":"I2jNaVby1c"}],"key":"AvesE5pbF6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"e0qwWqbRx2"},{"type":"output","id":"h1RkpkR9IKeRSzPrEiSBc","data":[],"key":"zrgf65Qvno"}],"key":"NVSSFTE7oY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"LBT2Uvqqha"},{"type":"output","id":"-DZ4pZcKk0Z2jlNB-AqMl","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"ksdJysQ40Z"}],"key":"OmTaJ42TLp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"wn9884LF5j"},{"type":"output","id":"jFjrJ-cw2RrzameKM9kHM","data":[],"key":"tGCQQ6Sojj"}],"key":"fw9lc7jLZX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tyfF9jJdeI"}],"identifier":"find-the-intersection-of-two-great-circle-paths","label":"Find the intersection of two great circle paths","html_id":"find-the-intersection-of-two-great-circle-paths","implicit":true,"key":"S4WjmRuoqH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The intersection of two great circle paths always exists at two positions on the globe if both paths are valid great circle paths (not meridians).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"G5PdAWsgBT"}],"key":"cZ02YqZE0y"}],"key":"BSwcpoSBjW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Math of intersection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tmVfW5jJ9D"}],"identifier":"math-of-intersection","label":"Math of intersection","html_id":"math-of-intersection","implicit":true,"key":"H9yrTntvPM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IyabTSthd1"}],"key":"K0cchfFKNs"}],"key":"o6w7WwFTmU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon","key":"PI6XwSEtpl"},{"type":"output","id":"4IJY8r_Z1a77IxPDycUCM","data":[],"key":"K5S6nFhS1y"}],"key":"WYbKmMIki0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon_pts = generate_latitude_along_gc(\"boulder\", \"boston\", 360)","key":"rBXlZvdJs8"},{"type":"output","id":"5yOqAtBF2xOdjDtX9aQo2","data":[],"key":"s97tUZqusb"}],"key":"RcToZRDynE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def intersection_of_gc(start_gc1=None, end_gc1=None,\n                      start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n\n    # cross product of vectors\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1, \"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2, \"cart_z\"]])\n    # intersection of planes, normal to the poles of each plane\n    line_of_intersection = np.cross(normal_one, normal_two)\n    # intersection points (one on each side of the earth)\n    x1 = line_of_intersection /  np.sqrt(line_of_intersection[0]**2 + line_of_intersection[1]**2 + line_of_intersection[2]**2) \n    x2 = -x1\n    lat1 = np.rad2deg(np.arctan2(x1[2], np.sqrt(pow(x1[0],2)+pow(x1[1],2))))\n    lon1 = np.rad2deg(np.arctan2(x1[1], x1[0]))\n    lat2 = np.rad2deg(np.arctan2(x2[2], np.sqrt(pow(x2[0],2)+pow(x2[1],2))))\n    lon2 = np.rad2deg(np.arctan2(x2[1], x2[0]))\n    return [(lat1, lon1), (lat2, lon2)]","key":"aVS0bgUceY"},{"type":"output","id":"G8Q11SBNVe5VCGizamJ2y","data":[],"key":"Ft7FIZBK18"}],"key":"wAFbHRdOgl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"intersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"greenwich\", \"cairo\")\nintersect_pts","key":"gxllU2435T"},{"type":"output","id":"khGcBh4zcuEfqVYyDp-f_","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(42.13833707967324), np.float64(-92.3589541022366)),\n (np.float64(-42.13833707967324), np.float64(87.6410458977634))]","content_type":"text/plain"}}}],"key":"ZREQLaPpuQ"}],"key":"jTbEMUzpvI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Intersections with Great Circle Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZyYJulcgZ7"}],"identifier":"plot-intersections-with-great-circle-paths","label":"Plot Intersections with Great Circle Paths","html_id":"plot-intersections-with-great-circle-paths","implicit":true,"key":"G3Jwyx31v6"}],"key":"DlZ57ks0Dm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def interpolate_points_along_gc(start_point=None, end_point=None,\n                                distance_between_points_meter=0): \n    geodesic = Geod(ellps=\"WGS84\")\n    \n    lat_start = location_df.loc[start_point, \"latitude\"]\n    lon_start = location_df.loc[start_point, \"longitude\"]\n    lat_end = location_df.loc[end_point, \"latitude\"]\n    lon_end = location_df.loc[end_point, \"longitude\"]\n\n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points\n\ndef arc_points(start_point=None, end_point=None,\n               n_total_points=10):\n    start_lat = location_df.loc[start_point, \"latitude\"]\n    start_lon = location_df.loc[start_point, \"longitude\"]\n    end_lat = location_df.loc[end_point, \"latitude\"]\n    end_lon = location_df.loc[end_point, \"longitude\"]\n\n    geodesic = Geod(ellps=\"WGS84\")\n\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_point, end_point,\n                                              distance_between_points_meter)\n    return points_along_arc\n\ndef plot_gc_with_intersection(start_gc1=None, end_gc1=None,\n                             start_gc2=None, end_gc2=None,\n                             lon_west=-180, lon_east=180,\n                             lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # Plot Great Circle Path\n    gc_one_lat_pts = generate_latitude_along_gc(start_gc1, end_gc1)\n    longitudes = [x[1] for x in gc_one_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_one_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n    gc_two_lat_pts = generate_latitude_along_gc(start_gc2, end_gc2)\n    longitudes = [x[1] for x in gc_two_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_two_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Plot intersection point\n    intersection_point = intersection_of_gc(start_gc1, end_gc1,\n                                            start_gc2, end_gc2)\n    longitudes = [x[1] for x in intersection_point] # longitude\n    latitudes = [x[0] for x in intersection_point] # latitude\n    plt.scatter(longitudes, latitudes, s=200, c=\"purple\", label=\"intersection\")\n\n    # Plot Great Circle Arc\n    gc_one_arc_pts = arc_points(start_gc1, end_gc1)\n    longitudes = [x[1] for x in gc_one_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_one_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"pink\", label=\"GC 1\")\n    plt.scatter(longitudes[0], latitudes[0], s=100, c=\"green\", label=\"Arc Start\")\n    plt.scatter(longitudes[-1], latitudes[-1],s=100, c=\"red\", label=\"Arc End\")\n\n    gc_two_arc_pts = arc_points(start_gc2, end_gc2)\n    longitudes = [x[1] for x in gc_two_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_two_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"cyan\", label=\"GC 2\")\n    plt.scatter(longitudes[0], latitudes[0],s=100, c=\"green\")\n    plt.scatter(longitudes[-1], latitudes[-1],s=100, c=\"red\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Intersection Point = {intersection_point}\")\n    plt.show()","key":"aUF7I6NIDe"},{"type":"output","id":"oiu7a6donAHtELYwu2Wlt","data":[],"key":"DYxoCNcpKW"}],"key":"nNFKVGdWMR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_gc_with_intersection(\"boulder\", \"boston\", \"greenwich\", \"cairo\")","key":"hO4N2ZPQod"},{"type":"output","id":"UsoFh56INd9Ut9YN1Qv-f","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1604fb7ec2f0133e513d0f84e9976013","path":"/great-circle-cookbook/build/1604fb7ec2f0133e513d0f84e9976013.png"}}}],"key":"cej35tVfPf"}],"key":"v7E8fDDwjb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_gc_with_intersection(\"arecibo\", \"zambezi\", \"johannesburg\", \"reykjavík\")","key":"WTfKWMH9iv"},{"type":"output","id":"4PdBkYJZmMLk9ZbZd-lfp","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"375510f06f8eea03e0078610374d268c","path":"/great-circle-cookbook/build/375510f06f8eea03e0078610374d268c.png"}}}],"key":"DZTqA6mzDM"}],"key":"s7dvGCMJGf"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle arcs (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EnUPjDLWkN"}],"identifier":"find-the-intersection-of-two-great-circle-arcs-todo","label":"Find the intersection of two great circle arcs (TODO)","html_id":"find-the-intersection-of-two-great-circle-arcs-todo","implicit":true,"key":"vIPu9HhLO2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The intersection of two great circle paths always exists at two positions on the globem but intersections do not always exists along the great circle arcs.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kcZB8K841V"}],"key":"p4f6XiVWmz"}],"key":"DtL0ZqwcMp"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bCAKahdWAV"}],"key":"u1mhcUXXD9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jroMAh4oUg"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"bDcPkBaaYU"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MFiBOXY8A5"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"By7qT9roxp"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Angles and Great Circles","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"FugTcipNxZ"}],"key":"NMGvzxB3bn"}],"key":"qtrp0Dh4XG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VcB8GM2y2m"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"ge2o5Rnga1"}],"key":"w1NTNBPUTM"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jybXp9GZ7x"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"IuI6be5Tnx"}],"key":"ZvLN8rzUJi"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"WlF8Ky6El9"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"ncIRAIG5K6"}],"key":"XvlUJxWXg1"}],"key":"utjzQk9tjl"}],"key":"CwU0oZdRsd"}],"key":"dyqLXCr7YF"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Great Circles and Parallels","url":"/notebooks/tutorials/parallels-max-min","group":"Tutorials"},"next":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}