{"version":2,"kind":"Notebook","sha256":"5f8299a02355c19c85ea8ec4219dffe130372c70fdda0529fe883694f1084141","slug":"notebooks.tutorials.path-intersection","location":"/notebooks/tutorials/4_path_intersection.ipynb","dependencies":[],"frontmatter":{"title":"Intersections of Great Circles","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Cora Schneck","given":"Cora","family":"Schneck"},"name":"Cora Schneck","orcid":"0009-0009-1415-5170","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-1"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2025","affiliations":[{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/4_path_intersection.ipynb","thumbnail":"/great-circle-cookbook/build/c86b1d97aff4a156dff93480f26508a4.gif","exports":[{"format":"ipynb","filename":"4_path_intersection.ipynb","url":"/great-circle-cookbook/build/4_path_intersection-0d9bcb7ac985a5cc4580a4b4662d2823.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/c86b1d97aff4a156dff93480f26508a4.gif","alt":"Air traffic gif","key":"vIcC1bFNlh","urlSource":"https://i.pinimg.com/originals/3a/40/f9/3a40f906233af4665ddce02948013da5.gif"}],"key":"U5stnWPDeI"}],"key":"yZY6JyoXL1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Intersections of Great Circles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"U2pqWO2PDn"}],"identifier":"intersections-of-great-circles","label":"Intersections of Great Circles","html_id":"intersections-of-great-circles","implicit":true,"key":"YaVU2oH6q1"}],"key":"OFrhvPZvnO"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KMcdoatKPX"}],"key":"Um7jDmg4j8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jDHwTuGBYh"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"BdATnec9w5"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A great circle path crosses the entire planet and as a result, any two (valid) great circle paths will always intersect at exactly two points around the globe.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"aNHSingh9M"}],"key":"t7NafTx7NN"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"In this notebook, we will:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"gtzqQ1z5Iv"}],"key":"iX5cje3LwI"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle paths","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KGpI60zd1m"}],"key":"EnhdfZKGqZ"}],"key":"WiXRvtI8Pp"}],"key":"ucbFnaMKiS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rEoe87BPKx"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"vU6sKb9Oeb"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"w4RjljA9wg"}],"key":"PdL6osGG16"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RgjrYcqydm"}],"key":"bRanKaQROK"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LsFnFF8U1P"}],"key":"ERKqnBhyeS"}],"key":"OgqLUzUX2E"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mr0o2I8N4k"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"Sdbirum1CG"}],"key":"ijfojKmRIn"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lGiCoAoTJO"}],"key":"ogfzssRqXw"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tqXc3Q1Ilw"}],"key":"FjigSylTMK"}],"key":"ZDR80ZKUAf"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VC8s7eJrtK"}],"urlSource":"https://foundations.projectpythia.org/core/pandas","key":"gUiIiuw1y7"}],"key":"OzfUYUU5hJ"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"xFyUMXFTPu"}],"key":"Co32Pr8vxO"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"eFg9Zmlar6"}],"key":"unl0fsVIbY"}],"key":"Jvcb8XIklr"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nQETxplQxQ"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"BBTUdGr970"}],"key":"kIsczqZ9Tu"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"J7cnpLmaT1"}],"key":"npM0LEJDqA"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"sKTo5rE5MC"}],"key":"VKDAch3yFQ"}],"key":"ZKX0NdB7qA"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"xrRkUYyUUO"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/","key":"oItPb5Fzf2"}],"key":"NVpOlJOXBg"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"aqG9lPpYNc"}],"key":"T7BTxLCemv"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"LROapPlRiH"}],"key":"nzfSGbp3rL"}],"key":"lJAkBXumwN"}],"key":"DinERrN9kz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"IVHbv3KYzQ"}],"key":"HEPldShJBa"},{"type":"text","value":": 30 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LxDGaIJS9q"}],"key":"Ce4Rx1fwU8"}],"key":"ruB3TaU3iE"}],"key":"BrIQLHPl7s"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Smmbd247RV"}],"key":"HT5Xg4iKhz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XTj1UiqENf"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"YF0o3WVN3O"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UGChUxdbVF"}],"key":"aYPKk2a6oB"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"JeilllL3lI"}],"key":"xifdqDrg1f"}],"key":"lGmxTVXhUz"}],"key":"EiEyUlBHjb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"f5CsbPaLE9"},{"type":"output","id":"sBewwicZQjbFu7YnHQYvd","data":[],"key":"HD1WHxsFLd"}],"key":"sxcvHjNeh5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"Zm6m85SHyT"},{"type":"output","id":"5epYp6RyHj-yLD6Fyi2Cp","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude    cart_x    cart_y    cart_z  rho     theta  \\\n0   arecibo   18.3441   -66.7527  0.374643 -0.872119  0.314723  1.0 -1.165054   \n1   boulder   40.0150  -105.2705 -0.201714 -0.738835  0.642988  1.0  1.304276   \n2    boston   42.3601   -71.0589  0.239852 -0.698914  0.673788  1.0 -1.240212   \n3  redwoods   41.4017  -124.0417 -0.419898 -0.621549  0.661334  1.0  0.976657   \n4   houston   29.5518   -95.0982 -0.077303 -0.866469  0.493210  1.0  1.481816   \n\n        phi       polar_x       polar_y       polar_z  \n0  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>0.374643</td>\n      <td>-0.872119</td>\n      <td>0.314723</td>\n      <td>1.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-0.201714</td>\n      <td>-0.738835</td>\n      <td>0.642988</td>\n      <td>1.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>0.239852</td>\n      <td>-0.698914</td>\n      <td>0.673788</td>\n      <td>1.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-0.419898</td>\n      <td>-0.621549</td>\n      <td>0.661334</td>\n      <td>1.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-0.077303</td>\n      <td>-0.866469</td>\n      <td>0.493210</td>\n      <td>1.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"bpv3vg8r9V"}],"key":"xVIdBOLDbI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"Gt5aMBTvKk"},{"type":"output","id":"fFtofCCsDa4AYviurBp7R","data":[],"key":"yP89Ob3Qgt"}],"key":"ifzP3ERaaM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Find the intersection of two great circle paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DwnwpOGWCH"}],"identifier":"find-the-intersection-of-two-great-circle-paths","label":"Find the intersection of two great circle paths","html_id":"find-the-intersection-of-two-great-circle-paths","implicit":true,"key":"ZGEAkmkXwW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The intersection of two great circle paths always exists at two positions on the globe.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W6TddBTNdC"}],"key":"xC9G7NMFpB"}],"key":"MX0NvHKygh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Math of intersection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Gm0pfJMsGS"}],"identifier":"math-of-intersection","label":"Math of intersection","html_id":"math-of-intersection","implicit":true,"key":"X91ixPReXy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can determine the intersections of two great circle paths as a the normal of two planes containing the great circles. Where the two planes intersect will represent the intersections on the surface of the globe.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mHvaAY9TZH"}],"key":"iNIvwt9VAN"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"First, we find the cross product of the vectors for the position’s cartesian coordinates. Then, we find the cross product of the two normal planes. This will result in two intersection points, one for each side of the planet.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"j8oshem2W9"}],"key":"Xnzv9mDDuE"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"edwilliams.org/avform147.htm#Intersection","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"See more: Intersecting Radials","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VwoIxKygob"}],"urlSource":"edwilliams.org/avform147.htm#Intersection","key":"nslpIOxUMb"}],"key":"XnIjMr8UUg"}],"key":"RLwYnuSLxW"}],"key":"h0bufQBeiM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def intersection_of_gc(start_gc1=None, end_gc1=None,\n                      start_gc2=None, end_gc2=None):\n    # determine the normal of planes containing great circles\n\n    # cross product of vectors\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1, \"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2, \"cart_z\"]])\n\n    # intersection of planes, normal to the poles of each plane\n    line_of_intersection = np.cross(normal_one, normal_two)\n\n    # intersection points (one on each side of the earth)\n    x1 = line_of_intersection /  np.sqrt(line_of_intersection[0]**2 + line_of_intersection[1]**2 + line_of_intersection[2]**2) \n    x2 = -x1\n    lat1 = np.rad2deg(np.arctan2(x1[2], np.sqrt(pow(x1[0],2)+pow(x1[1],2))))\n    lon1 = np.rad2deg(np.arctan2(x1[1], x1[0]))\n    lat2 = np.rad2deg(np.arctan2(x2[2], np.sqrt(pow(x2[0],2)+pow(x2[1],2))))\n    lon2 = np.rad2deg(np.arctan2(x2[1], x2[0]))\n    return [(float(lat1), float(lon1)), (float(lat2), float(lon2))]","key":"hYBtWOClmk"},{"type":"output","id":"p12ozhbVp8QeiCTWleJeV","data":[],"key":"UNuAkRgxHA"}],"key":"n01uwUiqvh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"intersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"greenwich\", \"cairo\")\nprint(f\"Intersection points for Great Circle Arc A (Boulder to Boston) an B (Greenwich to Cairo) = {intersect_pts}\")","key":"gWxCmrW45I"},{"type":"output","id":"wQB7Ii2nJI-4iQGWAbZXh","data":[{"output_type":"stream","name":"stdout","text":"Intersection points for Great Circle Arc A (Boulder to Boston) an B (Greenwich to Cairo) = [(42.138337079673235, -92.35895410223662), (-42.138337079673235, 87.64104589776339)]\n"}],"key":"ryeOr1JVJy"}],"key":"GU06d5njNp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Intersections with Great Circle Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ew8IA5GZ1Z"}],"identifier":"plot-intersections-with-great-circle-paths","label":"Plot Intersections with Great Circle Paths","html_id":"plot-intersections-with-great-circle-paths","implicit":true,"key":"g7dAVqTKUX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The intersection points will be easier to understand when plotted on a map, so let’s plot the two great circle paths and highlight where they intersect.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z6ZQirlfyw"}],"key":"QVpcpsceoi"}],"key":"limObOAhqU"},{"type":"block","kind":"notebook-code","data":{"jupyter":{"source_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"# See Previous Notebooks to see how we generated a list of points to represent the great circle path\n\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon\n\ndef interpolate_points_along_gc(start_point=None, end_point=None,\n                                distance_between_points_meter=0): \n    geodesic = Geod(ellps=\"WGS84\")\n    \n    lat_start = location_df.loc[start_point, \"latitude\"]\n    lon_start = location_df.loc[start_point, \"longitude\"]\n    lat_end = location_df.loc[end_point, \"latitude\"]\n    lon_end = location_df.loc[end_point, \"longitude\"]\n\n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points\n\ndef arc_points(start_point=None, end_point=None,\n               n_total_points=10):\n    start_lat = location_df.loc[start_point, \"latitude\"]\n    start_lon = location_df.loc[start_point, \"longitude\"]\n    end_lat = location_df.loc[end_point, \"latitude\"]\n    end_lon = location_df.loc[end_point, \"longitude\"]\n\n    geodesic = Geod(ellps=\"WGS84\")\n\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_point, end_point,\n                                              distance_between_points_meter)\n    return points_along_arc","key":"IYnLCMm0NZ"},{"type":"output","id":"RYJasf1cj4kbYNCUdBSqu","data":[],"key":"DlTlmPZmHv"}],"key":"Fkj9M2X6PS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_gc_with_intersection(start_gc1=None, end_gc1=None,\n                             start_gc2=None, end_gc2=None,\n                             lon_west=-180, lon_east=180,\n                             lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # Plot Great Circle Path for Path A and B\n    gc_one_lat_pts = generate_latitude_along_gc(start_gc1, end_gc1)\n    longitudes = [x[1] for x in gc_one_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_one_lat_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"cornflowerblue\", label=\"GC Path A\")\n    gc_two_lat_pts = generate_latitude_along_gc(start_gc2, end_gc2)\n    longitudes = [x[1] for x in gc_two_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_two_lat_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"orange\", label=\"GC Path B\")\n\n    # Plot intersection points between two paths in purple\n    intersection_point = intersection_of_gc(start_gc1, end_gc1,\n                                            start_gc2, end_gc2)\n    longitudes = [x[1] for x in intersection_point] # longitude\n    latitudes = [x[0] for x in intersection_point] # latitude\n    plt.scatter(longitudes, latitudes, s=200, c=\"purple\", label=\"intersection\")\n\n    # Plot Great Circle Arc 1 in red\n    gc_one_arc_pts = arc_points(start_gc1, end_gc1)\n    longitudes = [x[1] for x in gc_one_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_one_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"red\", label=\"GC Arc A\")\n\n    # Plot Great Circle Arc 2 in light blue-green (cyan)\n    gc_two_arc_pts = arc_points(start_gc2, end_gc2)\n    longitudes = [x[1] for x in gc_two_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_two_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"cyan\", label=\"GC Arc B\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Intersection Point = {intersection_point}\")\n    plt.show()","key":"p4DzcxHjZx"},{"type":"output","id":"Zgwys_oKV6eBviyTd5zbK","data":[],"key":"zYI8AFRwUO"}],"key":"mypsZPmK2I"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_gc_with_intersection(\"boulder\", \"boston\", \"greenwich\", \"cairo\")","key":"VhboXlnotG"},{"type":"output","id":"aT8XSRYU8CGsMzFh3BMCq","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"0350ba147cebfbe1f0f31e26fb49cc7a","path":"/great-circle-cookbook/build/0350ba147cebfbe1f0f31e26fb49cc7a.png"}}}],"key":"ixocDrgdMj"}],"key":"AuDouKlBCw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_gc_with_intersection(\"arecibo\", \"zambezi\", \"johannesburg\", \"reykjavík\")","key":"zjylCGPoSe"},{"type":"output","id":"0zbhjSLekDt3N09AARA0a","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"85a7f058574cc4267f676b7ab36f77c6","path":"/great-circle-cookbook/build/85a7f058574cc4267f676b7ab36f77c6.png"}}}],"key":"Xz8rhapgn3"}],"key":"jyU178F1j6"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xrZY8U6usD"}],"key":"cYQEcHHgeI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NukyXtpgcr"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"qePfkwmZj0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this notebook, we determined the position where two great circle paths interact on the globe.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g14XeXiEOg"}],"key":"vVXYJF2uLA"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"oZFa8jntvl"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"TRtogyDvT4"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Next, we will calculate the internal angles associated with multiple great circles.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"hnuW4pKA2y"}],"key":"sia8TveObT"}],"key":"TyAqSO3UyS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RxETQVqRmP"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"g2xluKYPMW"}],"key":"zS5foIy7p6"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"emFRnlfAU2"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"UXnK4C6ZJF"}],"key":"QDIaiPU2cX"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Bd5rBqRDJ1"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"vCpqeHFjXy"}],"key":"UraWIqTrLa"}],"key":"vYXbBrk203"}],"key":"QLkw7byU9I"}],"key":"pN0RM6FF38"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Great Circles and Parallels","url":"/notebooks/tutorials/parallels-max-min","group":"Tutorials"},"next":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}