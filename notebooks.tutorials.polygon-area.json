{"version":2,"kind":"Notebook","sha256":"71daefa3989dbf1571f3f8c9f963c7329dd3a69727c0609fe6a1c4ba1a684611","slug":"notebooks.tutorials.polygon-area","location":"/notebooks/tutorials/6_polygon_area.ipynb","dependencies":[],"frontmatter":{"title":"Spherical Polygons and Areas","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"University at Albany (State University of New York)","name":"University at Albany (State University of New York)"},{"id":"UCAR/NCAR","name":"UCAR/NCAR"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/6_polygon_area.ipynb","thumbnail":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","exports":[{"format":"ipynb","filename":"6_polygon_area.ipynb","url":"/great-circle-cookbook/build/6_polygon_area-b7cc0ef4ec1c6be1b837f2c7b9b168f0.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","alt":"Tiling of the sphere by spherical triangles","key":"hrMgsARMzM","urlSource":"https://upload.wikimedia.org/wikipedia/commons/f/f2/Sphere5tesselation.gif"}],"key":"hc3MI2Xcbx"}],"key":"yAut875kAd"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uVRXa8F1zx"}],"identifier":"spherical-polygons-and-areas","label":"Spherical Polygons and Areas","html_id":"spherical-polygons-and-areas","implicit":true,"key":"DiwyudtId7"}],"key":"T6DnmVdalF"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y7AnucaCri"}],"key":"LVNPlcpY8T"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cxtSGHgMH8"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"W873BtL5MX"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the calculations of a spherical polygons based on a unit sphere.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"f2oQ4lsNVd"}],"key":"PryoDCd89P"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"cCuMvDC2F7"}],"key":"s6wCBYjf30"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Area and Permieter of quadrilateral patch on a unit sphere","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ARaUxQl011"}],"key":"NIdvhuUgck"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"E93yyraMt2"}],"key":"Zp1oRQKeO6"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gMBTWwXW4a"}],"key":"fyNuRRV335"}],"key":"bERmDjkGxC"}],"key":"Y7rBRiUUFH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YjKwvJ40XQ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"j1Jj2JDEux"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Y05etcu0rM"}],"key":"dd3BlLVmGZ"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"D4X8jS0KqR"}],"key":"rqW9VySTZl"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xwYrEiAffP"}],"key":"refXPhqvW2"}],"key":"TQPREyclHZ"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RVsy7j5tjh"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"VFknBdRpeI"}],"key":"zXEX0fiYCj"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BlY38jsaFm"}],"key":"kQAzopfJQx"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"PnAoHcBTR2"}],"key":"Tju4QOK9i0"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VDzmYjI65C"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"aeZ1KSqAry"}],"key":"PksLKlgOqj"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"bcE1hP5xzA"}],"key":"rqenptv1wS"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"iHkFVTiQod"}],"key":"WszTIXyRjj"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QlC2hd0n1b"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"Bo4pMRV7B2"}],"key":"icpeqBLKOD"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"F5P7MYOzwD"}],"key":"h5euzZbCPG"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NeTP6xQzMT"}],"key":"LJgFBg77Ta"}],"key":"mzQUTA3hMZ"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CuaK2D4dgA"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"LvIsT0UEZw"}],"key":"AHtB8Nhs7X"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CSAiyMc6HB"}],"key":"kkSf5agk5k"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jh61jSqPqP"}],"key":"UaZ0ZUP9pe"}],"key":"seU0KeSy0A"}],"key":"bnioCwmINa"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"WJrCyEz1kz"}],"key":"znfXcL2Wds"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"HZ7cCb3rMj"}],"key":"sqbhXs0bpR"}],"key":"Jn1C3d9NQc"}],"key":"CzE235QdcQ"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wYTrkJ8Vbl"}],"key":"cJODff0jrp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZEdZleHfKH"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"V5K46goLZC"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EAWD9CXSrT"}],"key":"a4i22gBoeQ"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yYz81JIIwH"}],"key":"GHcDHDfkui"}],"key":"feCRhNVF6l"}],"key":"vIt1WDwx6K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"nOQ0ogwus7"},{"type":"output","id":"Ws0naFQu1-b4Pl9BPGmAT","data":[],"key":"QcjNC8qB7n"}],"key":"Tx87d1b1AY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"gY5ykam82G"},{"type":"output","id":"kelnduiJYz78jEbikjzKA","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"sdBceYED3c"}],"key":"zunlD3qMT4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"qWJR1aT0ry"},{"type":"output","id":"FB3i5KOjfHF5zPz3_e5Zn","data":[],"key":"b0wdUTwxRG"}],"key":"W4UwUOYLjs"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dfTSLMlMRG"}],"identifier":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","label":"Determine clockwise/counterclockwise ordering of points on spherical polygon","html_id":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","implicit":true,"key":"VTEDjSryEm"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"True: when input points are in a clockwise order","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hhatGCZHYJ"}],"key":"X1x23AUd7Q"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"False: when input points are in a counterclockwise (or co-linear) order","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"lTEAK1P18w"}],"key":"haA1KG9SUL"}],"key":"enGsSBLVPT"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Shoelace Formula for Signed Polygon Area","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"sh9KKwPp1d"}],"identifier":"shoelace-formula-for-signed-polygon-area","label":"Shoelace Formula for Signed Polygon Area","html_id":"shoelace-formula-for-signed-polygon-area","implicit":true,"key":"KlahKkp7S4"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"To6itzj6W8"}],"key":"JUjrnaNkbx"}],"key":"R597mdT8wW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def is_clockwise(pt_lst=None):\n    # signed polygon area -> shoelace formula\n    # positive = counterclockwise, negative = clockwise\n    area = 0\n    for i in range(0, len(pt_lst)):\n        if i+1 < len(pt_lst):\n            area += location_df.loc[pt_lst[i], \"latitude\"] * location_df.loc[pt_lst[i+1], \"longitude\"]\n            area -= location_df.loc[pt_lst[i+1], \"latitude\"]  * location_df.loc[pt_lst[i], \"longitude\"]\n        #area /= 2 # determine full sign area, unneeded when just working with signs\n    if area < 0: \n        print(\"clockwise -> negative\")\n        return True\n    if area > 0:\n        print(\"counterclockwise -> positive\")\n        return False\n    if area == 0:\n        print(\"non-collinear -> zero\") #https://en.wikipedia.org/wiki/Curve_orientation\n        return False","key":"QnUWRTbyiR"},{"type":"output","id":"RZ3pdfL2Y7QmnPGlM_b3n","data":[],"key":"xok0uAmYu4"}],"key":"WdhjyzlxG8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"is_clockwise([\"boulder\", \"boston\", \"houston\"])","key":"QrpIsNpXLw"},{"type":"output","id":"MsSUTrDaLss0lUlNhEdds","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"True","content_type":"text/plain"}}}],"key":"jl6RjVRd7S"}],"key":"i3NdIbZRmi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_clockwise(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot arrow between points in order\n    for i, pt in enumerate(pt_lst):\n        if i+1 < len(pt_lst):\n            ax.quiver(location_df.loc[pt_lst[i], \"longitude\"],\n                      location_df.loc[pt_lst[i], \"latitude\"], \n                      (location_df.loc[pt_lst[i+1], \"longitude\"]-location_df.loc[pt_lst[i], \"longitude\"]), \n                      (location_df.loc[pt_lst[i+1], \"latitude\"]-location_df.loc[pt_lst[i], \"latitude\"]), \n                      angles='xy', scale_units='xy', scale=1)   \n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    if is_clockwise(pt_lst):\n        clockwise = \"Clockwise\"\n    else:\n        clockwise = \"Counterclockwise\"\n    plt.title(clockwise)\n    plt.show()","key":"Envl3duQKc"},{"type":"output","id":"bgv4uWze953uri8XTLZTq","data":[],"key":"u2lzsqzmrR"}],"key":"ijT08adcZA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"icEJ1E2Fuo"},{"type":"output","id":"KJo2SEWd1aVveXuwucq9V","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3a3277a54067ba4f990ca98a2b89cf49","path":"/great-circle-cookbook/build/3a3277a54067ba4f990ca98a2b89cf49.png"}}}],"key":"Z4tfN3TqNn"}],"key":"SJsWIvnbKm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"houston\", \"boston\", \"boulder\"], -130, -60, 20, 60)","key":"f6ymPjxd3C"},{"type":"output","id":"CX3AETt27mrkGZgjF10b1","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3b3c3eb4fec3f497323026d54511e043","path":"/great-circle-cookbook/build/3b3c3eb4fec3f497323026d54511e043.png"}}}],"key":"j2iTJxkhLr"}],"key":"NQBfc2QgDL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"timbuktu\"])","key":"VyOt7CaKQI"},{"type":"output","id":"zBaMBXqRLPmosfF6RAdeC","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e6e877250339ac152739eb9bc7120af2","path":"/great-circle-cookbook/build/e6e877250339ac152739eb9bc7120af2.png"}}}],"key":"Pm64ScHHL2"}],"key":"YopdICxGUp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area and Perimeter of quadrilateral patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eDprtkuKMf"}],"identifier":"area-and-perimeter-of-quadrilateral-patch","label":"Area and Perimeter of quadrilateral patch","html_id":"area-and-perimeter-of-quadrilateral-patch","implicit":true,"key":"BT5VXvdJwT"}],"key":"P5lLGFtMXz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def area_of_polygon_ellps(poly_pts=None):\n    geod = Geod(ellps=\"WGS84\")\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km\n\ndef area_of_polygon_unit_sphere(poly_pts=None):\n    geod = Geod(ellps=\"sphere\") # 'sphere': {'a': 6370997.0, 'b': 6370997.0, 'description': 'Normal Sphere (r=6370997)'\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km","key":"IHeLAChhk3"},{"type":"output","id":"GYvOKmwEOhB-O-CaYfs1z","data":[],"key":"w5cccn2pSf"}],"key":"gdsLS15CfZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_area(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    area_ellps, perimeter_ellps = area_of_polygon_ellps(pt_lst)\n    area_us, perimeter_us = area_of_polygon_unit_sphere(pt_lst)\n    print(f\"Ellipsoid Area   = {area_ellps} km^2\")\n    print(f\"Unit Sphere Area = {area_us} km^2\")\n    plt.title(f\"Roughly {(area_ellps/509600000)*100:.2f}% ({(area_us/509600000)*100:.2f}%) of the Earth's Surface\")\n    plt.show()","key":"iVJhbPXZtE"},{"type":"output","id":"-v61CDmy2_uZR20_mYKK7","data":[],"key":"LIpXoyRmFR"}],"key":"TEkQH5nV02"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"area_ellps, perimeter_ellps = area_of_polygon_ellps([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\narea_us, perimeter_us = area_of_polygon_unit_sphere([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\nprint(f\"Area Ellipsoid   = {area_ellps} km^2\")\nprint(f\"Area Unit Sphere = {area_us} km^2\")\nprint(f\"Perimeter Ellipsoid = {perimeter_ellps} km\")\nprint(f\"Perimeter Unit SPhere = {perimeter_us} km\")\nprint(f\"Roughly {(area_ellps/509600000)*100:.2f}% of the Earth's Surface\")\nprint(f\"Roughly {(area_us/509600000)*100:.2f}% of the Earth's Surface\")","key":"RednmHwcMF"},{"type":"output","id":"srWpauLnfEM7UezE2vldr","data":[{"output_type":"stream","name":"stdout","text":"Area Ellipsoid   = 5342585.6476998255 km^2\nArea Unit Sphere = 5344606.94796931 km^2\nPerimeter Ellipsoid = 10171.738963248145 km\nPerimeter Unit SPhere = 10170.504728302833 km\nRoughly 1.05% of the Earth's Surface\nRoughly 1.05% of the Earth's Surface\n"}],"key":"yvREDFCujI"}],"key":"nON1PatN5z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"arecibo\", \"houston\"])","key":"CxUBNW0xTk"},{"type":"output","id":"k5jubqUekGX_Krwz_tPYn","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 21872449.378265787 km^2\nUnit Sphere Area = 21896220.663299154 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b27f7b34a6788f6d0c5eff2e1a7f1adf","path":"/great-circle-cookbook/build/b27f7b34a6788f6d0c5eff2e1a7f1adf.png"}}}],"key":"MC7s61bHpB"}],"key":"gmc4Mox2bd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"rockford\", \"boston\", \"houston\",], -130, -60, 20, 60)","key":"iqKGJVqU1z"},{"type":"output","id":"JwnsJWJjRYYHyeT0YhW_5","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3150946.426714995 km^2\nUnit Sphere Area = 3149017.3086414044 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2d87c6261113fd722ea79d808db15027","path":"/great-circle-cookbook/build/2d87c6261113fd722ea79d808db15027.png"}}}],"key":"zWXl1efo0P"}],"key":"BhSBPvTLxB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"exIU3GOjo9"},{"type":"output","id":"OmABrJdUlnQiqxtxv7nqi","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3788155.432965353 km^2\nUnit Sphere Area = 3782548.632737316 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"69981614f709d867c24b9bfffea17c45","path":"/great-circle-cookbook/build/69981614f709d867c24b9bfffea17c45.png"}}}],"key":"x8DFWw9XTM"}],"key":"pn6WGG3FMM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zuH1XGvUnO"}],"identifier":"todo","label":"TODO","html_id":"todo","implicit":true,"key":"ZnJd0OeUvu"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Fix invalid overlapping polygon by re-ordering points into a clockwise order.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Klacc4bK0f"}],"key":"XmMob5Z7lR"}],"key":"glgkRKhiqG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"houston\", \"boston\", \"cairo\", \"arecibo\", \"greenwich\"])","key":"kw1l66z9BB"},{"type":"output","id":"UZP4OxaVaomIuCV_3nx3K","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 914381.1786067598 km^2\nUnit Sphere Area = 954445.989927043 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fb91c643311804e466fb7c3acabd0fe6","path":"/great-circle-cookbook/build/fb91c643311804e466fb7c3acabd0fe6.png"}}}],"key":"HW18qKSLIH"}],"key":"qkPW5DTRhe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UOBPboZdmb"}],"identifier":"determine-if-a-given-point-is-within-a-spherical-polygon","label":"Determine if a given point is within a spherical polygon","html_id":"determine-if-a-given-point-is-within-a-spherical-polygon","implicit":true,"key":"kB5pEPxgcs"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Single or list of points","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ih1zeKU8PJ"}],"key":"OGsMIfvfF9"}],"key":"B90sFyCV5m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_contains_points(pt_lst=None, polygon_pts=None, tolerance_m=1):\n    # tolerance in meters\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in polygon_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    contains = np.vectorize(lambda pt: polygon.contains(Point((location_df.loc[pt, \"longitude\"],\n                                                               location_df.loc[pt, \"latitude\"]))))\n    contained_by_polygon = contains(np.array(pt_lst))\n    return contained_by_polygon","key":"BVDXM9D9w5"},{"type":"output","id":"lMh9MJ4QlYTgJuZ77e2Ov","data":[],"key":"vQSbaVk4cs"}],"key":"fFTTBpkeuk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_polygon_pts(pt_lst=None, polygon_pts=None, tolerance_m=1,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check points\n    pt_lst = np.array(pt_lst)\n    contains_pts = polygon_contains_points(pt_lst, polygon_pts, tolerance_m)\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"green\", label=\"Within Polygon\")\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[~contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[~contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\", label=\"Not within Polygon\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Points contained within polygon (tolerance {tolerance_m} m) = {pt_lst[contains_pts]}, not contained = {pt_lst[~contains_pts]}\")\n    plt.show()","key":"PBEzxxyyuA"},{"type":"output","id":"Sg07oOz1eMZBhKeKICmP5","data":[],"key":"mYb9KK8vcr"}],"key":"cmJrekxR1v"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"frkVUmyz3t"},{"type":"output","id":"Ctz8tTXy6iUil6I9oMtFh","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"gpsen2V5Af"}],"key":"jbID6E5GfU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"aTABJrryIx"},{"type":"output","id":"CJcPpCgPOP_ktNnsd2KQc","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fea981bd6a9c5006dfe39f6e76a48992","path":"/great-circle-cookbook/build/fea981bd6a9c5006dfe39f6e76a48992.png"}}}],"key":"vAJwcvTN08"}],"key":"X8l2jvR1vQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"kvrHPQlqrH"},{"type":"output","id":"jfVvslWA_0UES_LtduvTV","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"array([False])","content_type":"text/plain"}}}],"key":"RmLVeNSkkS"}],"key":"p6dntxwn5O"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"yqEO8tiGPx"},{"type":"output","id":"Uj3Qp5OJep2h8eUK90uqy","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"99f3e158c7475e8a314a4e13e88e44a4","path":"/great-circle-cookbook/build/99f3e158c7475e8a314a4e13e88e44a4.png"}}}],"key":"IIIszCkEKb"}],"key":"hMHW0DIgPS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"otg3hCyRZ3"},{"type":"output","id":"yZW1mObmumoCt5DZ5zFYl","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"12e581f0e3d53f7043458035c3bbd6fa","path":"/great-circle-cookbook/build/12e581f0e3d53f7043458035c3bbd6fa.png"}}}],"key":"XhnL1jCwVK"}],"key":"GJUD8KkodZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"redwoods\"], [\"rockford\", \"boston\", \"cape canaveral\"], 1,\n               -130, -60, 20, 60)","key":"Dz6eSPyCc8"},{"type":"output","id":"n_ajBchGRbd0IU8kp61qA","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"bd6217175d933d33f4bf4fcb4707346a","path":"/great-circle-cookbook/build/bd6217175d933d33f4bf4fcb4707346a.png"}}}],"key":"JCrq5VCQhE"}],"key":"tpPHLDAj6T"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"irBFQiR2sx"}],"identifier":"mean-center-of-spherical-polygon","label":"Mean center of spherical polygon","html_id":"mean-center-of-spherical-polygon","implicit":true,"key":"jqS9yrFQDZ"}],"key":"DKjHmQ7934"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_centroid(polygon_pts=None):\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts]\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    return (polygon.centroid.y, polygon.centroid.x)","key":"BasPu9cWlq"},{"type":"output","id":"GZ4aIrq7AMNIF9Xhq_lGY","data":[],"key":"DW65tUgGy1"}],"key":"O3rtIK5YNb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_centroid([\"boulder\", \"boston\", \"houston\"])","key":"ImYm9L5sfB"},{"type":"output","id":"Caec_5Nhxhsj3zvHZuGDN","data":[{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/plain":{"content":"(37.30896666666666, -90.47586666666665)","content_type":"text/plain"}}}],"key":"Q62XpTqTFl"}],"key":"koJqbeLmij"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_centroid(polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check point\n    centeroid = polygon_centroid(polygon_pts)\n    plt.scatter(centeroid[1], centeroid[0], s=100, c=\"red\")\n    plt.title(f\"Centroid = {centeroid}\")\n    plt.show()","key":"wjNqT5d8ai"},{"type":"output","id":"aoomezNuToM1yY4F0pnLB","data":[],"key":"Bwr0ipmVmQ"}],"key":"pK4Zaocezh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"boulder\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"TUiZf8iBUn"},{"type":"output","id":"_hMarTqfYEwItUyAf-2Pk","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1ef9eef25d5063e9f9a010b5a4c85230","path":"/great-circle-cookbook/build/1ef9eef25d5063e9f9a010b5a4c85230.png"}}}],"key":"DIJ14Qri33"}],"key":"jdsnfK3R8X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"redwoods\", \"boulder\", \"cape canaveral\", \"houston\"],\n               -130, -60, 20, 60)","key":"ANePwOZoLk"},{"type":"output","id":"et2XzmvJa86nxOlGLBjFa","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"8b9d5c305e54e00e434ba3945db4c2c7","path":"/great-circle-cookbook/build/8b9d5c305e54e00e434ba3945db4c2c7.png"}}}],"key":"RZ9oC1mM6n"}],"key":"zcItpm1Z2A"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jmbe5dyXZb"}],"key":"rWkeUMZ8YS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T79mhyiDTf"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"WkhFB8UsMl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook covers working with spherical polygons to determine the ordering of coordinates, center of polygons, and whether or not a point lies within a spherical polygon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"e8B1HcTiWW"}],"key":"QKUoIPqoXc"}],"key":"YIxkl9iLfW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SgrR2kdDvr"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"Irja84fx8n"}],"key":"sdoV5yq5gg"}],"key":"pMlI6S92tw"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}