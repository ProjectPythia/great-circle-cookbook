{"version":2,"kind":"Notebook","sha256":"71daefa3989dbf1571f3f8c9f963c7329dd3a69727c0609fe6a1c4ba1a684611","slug":"notebooks.tutorials.polygon-area","location":"/notebooks/tutorials/6_polygon_area.ipynb","dependencies":[],"frontmatter":{"title":"Spherical Polygons and Areas","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/6_polygon_area.ipynb","thumbnail":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","exports":[{"format":"ipynb","filename":"6_polygon_area.ipynb","url":"/great-circle-cookbook/build/6_polygon_area-2072ee905162311bd1c24fe23ee98c61.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","alt":"Tiling of the sphere by spherical triangles","key":"lmlFukzYWG","urlSource":"https://upload.wikimedia.org/wikipedia/commons/f/f2/Sphere5tesselation.gif"}],"key":"gfHVeuV9HW"}],"key":"Np1KbejJyN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QKSosyUT94"}],"identifier":"spherical-polygons-and-areas","label":"Spherical Polygons and Areas","html_id":"spherical-polygons-and-areas","implicit":true,"key":"RB6NGqWK3i"}],"key":"ZE6D8ORvwN"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XWz4RLuSf8"}],"key":"jIMRaqlmfS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LIDkgbW4yB"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"tXF5lB5eVT"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the calculations of a spherical polygons based on a unit sphere.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"f7Q3JAJhFq"}],"key":"Yid4D9sFcJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sKe5XlHcYl"}],"key":"RKNdT2pyMg"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Area and Permieter of quadrilateral patch on a unit sphere","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xTqOdZTdGM"}],"key":"Zgy8I24fin"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"a3k9vteA6k"}],"key":"injN1GtfDf"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dSA85Qf0ue"}],"key":"zSLP7RkhMX"}],"key":"PC5PNoo51B"}],"key":"li1fSlENbZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GjzQN714XP"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"gwNtB9fdeG"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xHZxU5JXXQ"}],"key":"cpI5YBGutb"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZlLPz19cdl"}],"key":"n8RFJ9CEj9"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ptLFdgKCbA"}],"key":"C0mm4klzW2"}],"key":"dykT7aIcdQ"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TGmAy5jjEs"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"fPHeNkBSWJ"}],"key":"D1V26Lq6FY"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NQviTzTfuN"}],"key":"oeqG5Sfasv"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"MY77c09rN8"}],"key":"bH6o7JuQqi"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"vMx6P6Geyd"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"aLeoYLpM2g"}],"key":"L5wLNcsoUP"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"cayW6XcJDL"}],"key":"WPyhPcyk5m"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"SnBhvP3D5r"}],"key":"sUYOPRBYOv"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"EwCUfc7N2l"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"k0cC4u4RUD"}],"key":"myOWehAx5Z"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"N1YU8ZgayR"}],"key":"mSsmu4BLOL"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fQ4GDEVloX"}],"key":"CIlX3YbO0v"}],"key":"vlLlwib9SQ"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Fa7PwCFmQG"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"KdkFgB2wii"}],"key":"a9nLClXE5r"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IQ5GC5T5Tv"}],"key":"CwOl3Q338O"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vAMgxZIqOD"}],"key":"QdZRdnSPdl"}],"key":"gXNDtbfgvR"}],"key":"aZiegdY1Wu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"bgAm39wiN5"}],"key":"Qwyq5oO6lw"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"QQYHFhsGOe"}],"key":"h1WsHYyycm"}],"key":"unMRiT5zmu"}],"key":"odZ7NHSYQM"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wy0eRQ7eF8"}],"key":"AgsHg3KRtM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dlBXlIQv6f"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"vBoXEwtIuj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pJqx8JbgiU"}],"key":"fvsl14pHS4"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"cHiWCo5mJa"}],"key":"HmokHsf3is"}],"key":"f3uDZzLkVe"}],"key":"FKsTZgxzkD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"gT0zQzxLRj"},{"type":"output","id":"k_tzoNmj3xQcokkp3VD9S","data":[],"key":"FoEpswvmJM"}],"key":"XBnHjsStwj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"NtLPqodmSL"},{"type":"output","id":"ryleJ6dfSqJJv2ilj4K5V","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"RaS0jpNJWF"}],"key":"z5z1YomXLZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"qwgKIN3yUw"},{"type":"output","id":"viq_MTSiTIWKkHY1BXxIP","data":[],"key":"RZGe9yhPlI"}],"key":"vvgPJYUh1f"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ycQopWIJfP"}],"identifier":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","label":"Determine clockwise/counterclockwise ordering of points on spherical polygon","html_id":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","implicit":true,"key":"f4OnR4g3A7"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"True: when input points are in a clockwise order","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ThajgIMEQ0"}],"key":"yuRaCeECbO"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"False: when input points are in a counterclockwise (or co-linear) order","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nRc3zek5yV"}],"key":"RuRKIN0Bph"}],"key":"ycwtrGwF4E"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Shoelace Formula for Signed Polygon Area","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"psAIs2AKry"}],"identifier":"shoelace-formula-for-signed-polygon-area","label":"Shoelace Formula for Signed Polygon Area","html_id":"shoelace-formula-for-signed-polygon-area","implicit":true,"key":"SUT6IVM57S"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"n5enW1vWbz"}],"key":"TTMVEl1je3"}],"key":"yyhJojZ60q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def is_clockwise(pt_lst=None):\n    # signed polygon area -> shoelace formula\n    # positive = counterclockwise, negative = clockwise\n    area = 0\n    for i in range(0, len(pt_lst)):\n        if i+1 < len(pt_lst):\n            area += location_df.loc[pt_lst[i], \"latitude\"] * location_df.loc[pt_lst[i+1], \"longitude\"]\n            area -= location_df.loc[pt_lst[i+1], \"latitude\"]  * location_df.loc[pt_lst[i], \"longitude\"]\n        #area /= 2 # determine full sign area, unneeded when just working with signs\n    if area < 0: \n        print(\"clockwise -> negative\")\n        return True\n    if area > 0:\n        print(\"counterclockwise -> positive\")\n        return False\n    if area == 0:\n        print(\"non-collinear -> zero\") #https://en.wikipedia.org/wiki/Curve_orientation\n        return False","key":"lRENQe0HJc"},{"type":"output","id":"hkMwGRJ6QAo0IP6xpD7YZ","data":[],"key":"uYgnOTb5XY"}],"key":"szNwnfc8qC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"is_clockwise([\"boulder\", \"boston\", \"houston\"])","key":"Mj6PBlW7Bk"},{"type":"output","id":"7hIgOGUgdQFsYQQdbd_SX","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"True","content_type":"text/plain"}}}],"key":"gAjKncbsha"}],"key":"z58W0up6Ke"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_clockwise(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot arrow between points in order\n    for i, pt in enumerate(pt_lst):\n        if i+1 < len(pt_lst):\n            ax.quiver(location_df.loc[pt_lst[i], \"longitude\"],\n                      location_df.loc[pt_lst[i], \"latitude\"], \n                      (location_df.loc[pt_lst[i+1], \"longitude\"]-location_df.loc[pt_lst[i], \"longitude\"]), \n                      (location_df.loc[pt_lst[i+1], \"latitude\"]-location_df.loc[pt_lst[i], \"latitude\"]), \n                      angles='xy', scale_units='xy', scale=1)   \n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    if is_clockwise(pt_lst):\n        clockwise = \"Clockwise\"\n    else:\n        clockwise = \"Counterclockwise\"\n    plt.title(clockwise)\n    plt.show()","key":"ExdGfXJ1IT"},{"type":"output","id":"mt9qRQnkeVQQ1788ocJrw","data":[],"key":"kb389x3MWL"}],"key":"M07bzkw7Kf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"KhR9yX8XNm"},{"type":"output","id":"WGGQbAb7WvwwrjtpjjRa3","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31merror\u001b[39m                                     Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/formatters.py:402\u001b[39m, in \u001b[36mBaseFormatter.__call__\u001b[39m\u001b[34m(self, obj)\u001b[39m\n\u001b[32m    400\u001b[39m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[32m    401\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m402\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mprinter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    403\u001b[39m \u001b[38;5;66;03m# Finally look for special method names\u001b[39;00m\n\u001b[32m    404\u001b[39m method = get_real_method(obj, \u001b[38;5;28mself\u001b[39m.print_method)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/pylabtools.py:170\u001b[39m, in \u001b[36mprint_figure\u001b[39m\u001b[34m(fig, fmt, bbox_inches, base64, **kwargs)\u001b[39m\n\u001b[32m    167\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mbackend_bases\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m FigureCanvasBase\n\u001b[32m    168\u001b[39m     FigureCanvasBase(fig)\n\u001b[32m--> \u001b[39m\u001b[32m170\u001b[39m \u001b[43mfig\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcanvas\u001b[49m\u001b[43m.\u001b[49m\u001b[43mprint_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbytes_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    171\u001b[39m data = bytes_io.getvalue()\n\u001b[32m    172\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m fmt == \u001b[33m'\u001b[39m\u001b[33msvg\u001b[39m\u001b[33m'\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/backend_bases.py:2157\u001b[39m, in \u001b[36mFigureCanvasBase.print_figure\u001b[39m\u001b[34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[39m\n\u001b[32m   2154\u001b[39m     \u001b[38;5;66;03m# we do this instead of `self.figure.draw_without_rendering`\u001b[39;00m\n\u001b[32m   2155\u001b[39m     \u001b[38;5;66;03m# so that we can inject the orientation\u001b[39;00m\n\u001b[32m   2156\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(renderer, \u001b[33m\"\u001b[39m\u001b[33m_draw_disabled\u001b[39m\u001b[33m\"\u001b[39m, nullcontext)():\n\u001b[32m-> \u001b[39m\u001b[32m2157\u001b[39m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfigure\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2158\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m bbox_inches:\n\u001b[32m   2159\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches == \u001b[33m\"\u001b[39m\u001b[33mtight\u001b[39m\u001b[33m\"\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:94\u001b[39m, in \u001b[36m_finalize_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer, *args, **kwargs)\u001b[39m\n\u001b[32m     92\u001b[39m \u001b[38;5;129m@wraps\u001b[39m(draw)\n\u001b[32m     93\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdraw_wrapper\u001b[39m(artist, renderer, *args, **kwargs):\n\u001b[32m---> \u001b[39m\u001b[32m94\u001b[39m     result = \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     95\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m renderer._rasterizing:\n\u001b[32m     96\u001b[39m         renderer.stop_rasterizing()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/figure.py:3257\u001b[39m, in \u001b[36mFigure.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3254\u001b[39m             \u001b[38;5;66;03m# ValueError can occur when resizing a window.\u001b[39;00m\n\u001b[32m   3256\u001b[39m     \u001b[38;5;28mself\u001b[39m.patch.draw(renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3257\u001b[39m     \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3258\u001b[39m \u001b[43m        \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3260\u001b[39m     renderer.close_group(\u001b[33m'\u001b[39m\u001b[33mfigure\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3261\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/geoaxes.py:509\u001b[39m, in \u001b[36mGeoAxes.draw\u001b[39m\u001b[34m(self, renderer, **kwargs)\u001b[39m\n\u001b[32m    504\u001b[39m         \u001b[38;5;28mself\u001b[39m.imshow(img, extent=extent, origin=origin,\n\u001b[32m    505\u001b[39m                     transform=factory.crs, *factory_args[\u001b[32m1\u001b[39m:],\n\u001b[32m    506\u001b[39m                     **factory_kwargs)\n\u001b[32m    507\u001b[39m \u001b[38;5;28mself\u001b[39m._done_img_factory = \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m509\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/axes/_base.py:3226\u001b[39m, in \u001b[36m_AxesBase.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3223\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m artists_rasterized:\n\u001b[32m   3224\u001b[39m     _draw_rasterized(\u001b[38;5;28mself\u001b[39m.get_figure(root=\u001b[38;5;28;01mTrue\u001b[39;00m), artists_rasterized, renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3226\u001b[39m \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3227\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mroot\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3229\u001b[39m renderer.close_group(\u001b[33m'\u001b[39m\u001b[33maxes\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3230\u001b[39m \u001b[38;5;28mself\u001b[39m.stale = \u001b[38;5;28;01mFalse\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/feature_artist.py:184\u001b[39m, in \u001b[36mFeatureArtist.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m    179\u001b[39m     geoms = \u001b[38;5;28mself\u001b[39m._feature.geometries()\n\u001b[32m    180\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    181\u001b[39m     \u001b[38;5;66;03m# For efficiency on local maps with high resolution features (e.g\u001b[39;00m\n\u001b[32m    182\u001b[39m     \u001b[38;5;66;03m# from Natural Earth), only create paths for geometries that are\u001b[39;00m\n\u001b[32m    183\u001b[39m     \u001b[38;5;66;03m# in view.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m184\u001b[39m     geoms = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_feature\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    186\u001b[39m stylised_paths = {}\n\u001b[32m    187\u001b[39m \u001b[38;5;66;03m# Make an empty placeholder style dictionary for when styler is not\u001b[39;00m\n\u001b[32m    188\u001b[39m \u001b[38;5;66;03m# used.  Freeze it so that we can use it as a dict key.  We will need\u001b[39;00m\n\u001b[32m    189\u001b[39m \u001b[38;5;66;03m# to unfreeze all style dicts with dict(frozen) before passing to mpl.\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:312\u001b[39m, in \u001b[36mNaturalEarthFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    305\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    306\u001b[39m \u001b[33;03mReturns an iterator of shapely geometries that intersect with\u001b[39;00m\n\u001b[32m    307\u001b[39m \u001b[33;03mthe given extent.\u001b[39;00m\n\u001b[32m    308\u001b[39m \u001b[33;03mThe extent is assumed to be in the CRS of the feature.\u001b[39;00m\n\u001b[32m    309\u001b[39m \u001b[33;03mIf extent is None, the method returns all geometries for this dataset.\u001b[39;00m\n\u001b[32m    310\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    311\u001b[39m \u001b[38;5;28mself\u001b[39m.scaler.scale_from_extent(extent)\n\u001b[32m--> \u001b[39m\u001b[32m312\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:112\u001b[39m, in \u001b[36mFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    109\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m extent \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np.isnan(extent[\u001b[32m0\u001b[39m]):\n\u001b[32m    110\u001b[39m     extent_geom = sgeom.box(extent[\u001b[32m0\u001b[39m], extent[\u001b[32m2\u001b[39m],\n\u001b[32m    111\u001b[39m                             extent[\u001b[32m1\u001b[39m], extent[\u001b[32m3\u001b[39m])\n\u001b[32m--> \u001b[39m\u001b[32m112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m (geom \u001b[38;5;28;01mfor\u001b[39;00m geom \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m\n\u001b[32m    113\u001b[39m             geom \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m extent_geom.intersects(geom))\n\u001b[32m    114\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    115\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m.geometries()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:297\u001b[39m, in \u001b[36mNaturalEarthFeature.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    295\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m reader.crs \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    296\u001b[39m         \u001b[38;5;28mself\u001b[39m._crs = reader.crs\n\u001b[32m--> \u001b[39m\u001b[32m297\u001b[39m     geometries = \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mreader\u001b[49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    298\u001b[39m     _NATURAL_EARTH_GEOM_CACHE[key] = geometries\n\u001b[32m    299\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/shapereader.py:173\u001b[39m, in \u001b[36mBasicReader.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    161\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mgeometries\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m    162\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    163\u001b[39m \u001b[33;03m    Return an iterator of shapely geometries from the shapefile.\u001b[39;00m\n\u001b[32m    164\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m    171\u001b[39m \n\u001b[32m    172\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m173\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_reader\u001b[49m\u001b[43m.\u001b[49m\u001b[43miterShapes\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_bbox\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    174\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Skip the shape that can not be represented as geometry.\u001b[39;49;00m\n\u001b[32m    175\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshapeType\u001b[49m\u001b[43m \u001b[49m\u001b[43m!=\u001b[49m\u001b[43m \u001b[49m\u001b[43mshapefile\u001b[49m\u001b[43m.\u001b[49m\u001b[43mNULL\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    176\u001b[39m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01myield\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43msgeom\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:2845\u001b[39m, in \u001b[36mReader.iterShapes\u001b[39m\u001b[34m(self, bbox)\u001b[39m\n\u001b[32m   2841\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.numShapes:\n\u001b[32m   2842\u001b[39m     \u001b[38;5;66;03m# Iterate exactly the number of shapes from shx header\u001b[39;00m\n\u001b[32m   2843\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mself\u001b[39m.numShapes):\n\u001b[32m   2844\u001b[39m         \u001b[38;5;66;03m# MAYBE: check if more left of file or exit early?\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m2845\u001b[39m         shape = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m__shape\u001b[49m\u001b[43m(\u001b[49m\u001b[43moid\u001b[49m\u001b[43m=\u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2846\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m shape:\n\u001b[32m   2847\u001b[39m             \u001b[38;5;28;01myield\u001b[39;00m shape\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:2723\u001b[39m, in \u001b[36mReader.__shape\u001b[39m\u001b[34m(self, oid, bbox)\u001b[39m\n\u001b[32m   2720\u001b[39m shapeType = unpack(\u001b[33m\"\u001b[39m\u001b[33m<i\u001b[39m\u001b[33m\"\u001b[39m, b_io.read(\u001b[32m4\u001b[39m))[\u001b[32m0\u001b[39m]\n\u001b[32m   2722\u001b[39m ShapeClass = SHAPE_CLASS_FROM_SHAPETYPE[shapeType]\n\u001b[32m-> \u001b[39m\u001b[32m2723\u001b[39m shape = \u001b[43mShapeClass\u001b[49m\u001b[43m.\u001b[49m\u001b[43mfrom_byte_stream\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   2724\u001b[39m \u001b[43m    \u001b[49m\u001b[43mshapeType\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrecLength_bytes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moid\u001b[49m\u001b[43m=\u001b[49m\u001b[43moid\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbbox\u001b[49m\n\u001b[32m   2725\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2727\u001b[39m \u001b[38;5;66;03m# Seek to the end of this record as defined by the record header because\u001b[39;00m\n\u001b[32m   2728\u001b[39m \u001b[38;5;66;03m# the shapefile spec doesn't require the actual content to meet the header\u001b[39;00m\n\u001b[32m   2729\u001b[39m \u001b[38;5;66;03m# definition.  Probably allowed for lazy feature deletion.\u001b[39;00m\n\u001b[32m   2730\u001b[39m \u001b[38;5;66;03m# f.seek(next_shape)\u001b[39;00m\n\u001b[32m   2732\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m shape\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1214\u001b[39m, in \u001b[36m_CanHaveBBox.from_byte_stream\u001b[39m\u001b[34m(cls, shapeType, b_io, next_shape, oid, bbox)\u001b[39m\n\u001b[32m   1208\u001b[39m         kwargs[\u001b[33m\"\u001b[39m\u001b[33mpartTypes\u001b[39m\u001b[33m\"\u001b[39m] = MultiPatch._read_part_types_from_byte_stream(\n\u001b[32m   1209\u001b[39m             b_io, nParts\n\u001b[32m   1210\u001b[39m         )\n\u001b[32m   1212\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m nPoints:\n\u001b[32m   1213\u001b[39m     kwargs[\u001b[33m\"\u001b[39m\u001b[33mpoints\u001b[39m\u001b[33m\"\u001b[39m] = cast(\n\u001b[32m-> \u001b[39m\u001b[32m1214\u001b[39m         PointsT, \u001b[38;5;28;43mcls\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_read_points_from_byte_stream\u001b[49m\u001b[43m(\u001b[49m\u001b[43mb_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1215\u001b[39m     )\n\u001b[32m   1217\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m shapeType \u001b[38;5;129;01min\u001b[39;00m _HasZ_shapeTypes:\n\u001b[32m   1218\u001b[39m         kwargs[\u001b[33m\"\u001b[39m\u001b[33mzbox\u001b[39m\u001b[33m\"\u001b[39m], kwargs[\u001b[33m\"\u001b[39m\u001b[33mz\u001b[39m\u001b[33m\"\u001b[39m] = _HasZ._read_zs_from_byte_stream(\n\u001b[32m   1219\u001b[39m             b_io, nPoints\n\u001b[32m   1220\u001b[39m         )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1160\u001b[39m, in \u001b[36m_CanHaveBBox._read_points_from_byte_stream\u001b[39m\u001b[34m(b_io, nPoints)\u001b[39m\n\u001b[32m   1156\u001b[39m \u001b[38;5;129m@staticmethod\u001b[39m\n\u001b[32m   1157\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_read_points_from_byte_stream\u001b[39m(\n\u001b[32m   1158\u001b[39m     b_io: ReadableBinStream, nPoints: \u001b[38;5;28mint\u001b[39m\n\u001b[32m   1159\u001b[39m ) -> \u001b[38;5;28mlist\u001b[39m[Point2D]:\n\u001b[32m-> \u001b[39m\u001b[32m1160\u001b[39m     flat = \u001b[43munpack\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43mf\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m<\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[32;43m2\u001b[39;49m\u001b[38;5;250;43m \u001b[39;49m\u001b[43m*\u001b[49m\u001b[38;5;250;43m \u001b[39;49m\u001b[43mnPoints\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43md\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mb_io\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m16\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m \u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1161\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mzip\u001b[39m(*(\u001b[38;5;28miter\u001b[39m(flat),) * \u001b[32m2\u001b[39m))\n\n\u001b[31merror\u001b[39m: unpack requires a buffer of 112208 bytes","ename":"error","evalue":"unpack requires a buffer of 112208 bytes"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"}}}],"key":"RuzpLc16sW"}],"key":"V1UnqMZXtn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"houston\", \"boston\", \"boulder\"], -130, -60, 20, 60)","key":"mxJLhACwAV"},{"type":"output","id":"m46ie_Xci5u-JmJjmBswQ","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c3e20270b8d135013ca100ef9f63a43a","path":"/great-circle-cookbook/build/c3e20270b8d135013ca100ef9f63a43a.png"}}}],"key":"pmGHA1fqxE"}],"key":"y6uZo8oSaI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"timbuktu\"])","key":"BiM8oyt5hh"},{"type":"output","id":"iqp3Mzoq6uMZfNjL4p95a","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"91c58dfb085df6d85162d0ccd2628656","path":"/great-circle-cookbook/build/91c58dfb085df6d85162d0ccd2628656.png"}}}],"key":"Za1zqTN6w7"}],"key":"NBqKRTDK2a"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area and Perimeter of quadrilateral patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k2u6hKFpKw"}],"identifier":"area-and-perimeter-of-quadrilateral-patch","label":"Area and Perimeter of quadrilateral patch","html_id":"area-and-perimeter-of-quadrilateral-patch","implicit":true,"key":"TGqNwVfmYI"}],"key":"YpJ7f62A94"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def area_of_polygon_ellps(poly_pts=None):\n    geod = Geod(ellps=\"WGS84\")\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km\n\ndef area_of_polygon_unit_sphere(poly_pts=None):\n    geod = Geod(ellps=\"sphere\") # 'sphere': {'a': 6370997.0, 'b': 6370997.0, 'description': 'Normal Sphere (r=6370997)'\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km","key":"A9DmyaPzWI"},{"type":"output","id":"eMPdGf5SOKLHLSzEuu0J3","data":[],"key":"FByndOKirC"}],"key":"azUs9EEnTF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_area(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    area_ellps, perimeter_ellps = area_of_polygon_ellps(pt_lst)\n    area_us, perimeter_us = area_of_polygon_unit_sphere(pt_lst)\n    print(f\"Ellipsoid Area   = {area_ellps} km^2\")\n    print(f\"Unit Sphere Area = {area_us} km^2\")\n    plt.title(f\"Roughly {(area_ellps/509600000)*100:.2f}% ({(area_us/509600000)*100:.2f}%) of the Earth's Surface\")\n    plt.show()","key":"uUndd7kM4B"},{"type":"output","id":"JuM59P2Mskz61vA299EZ6","data":[],"key":"RhFbOG4brC"}],"key":"On8jf2EpUY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"area_ellps, perimeter_ellps = area_of_polygon_ellps([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\narea_us, perimeter_us = area_of_polygon_unit_sphere([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\nprint(f\"Area Ellipsoid   = {area_ellps} km^2\")\nprint(f\"Area Unit Sphere = {area_us} km^2\")\nprint(f\"Perimeter Ellipsoid = {perimeter_ellps} km\")\nprint(f\"Perimeter Unit SPhere = {perimeter_us} km\")\nprint(f\"Roughly {(area_ellps/509600000)*100:.2f}% of the Earth's Surface\")\nprint(f\"Roughly {(area_us/509600000)*100:.2f}% of the Earth's Surface\")","key":"EpDQYjqnzW"},{"type":"output","id":"3zuVe8r3e7fa-NeSzOptb","data":[{"output_type":"stream","name":"stdout","text":"Area Ellipsoid   = 5342585.6476998255 km^2\nArea Unit Sphere = 5344606.94796931 km^2\nPerimeter Ellipsoid = 10171.738963248145 km\nPerimeter Unit SPhere = 10170.504728302833 km\nRoughly 1.05% of the Earth's Surface\nRoughly 1.05% of the Earth's Surface\n"}],"key":"L8rgWUwR3L"}],"key":"cs9QfDwMdw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"arecibo\", \"houston\"])","key":"q4SRaZ43da"},{"type":"output","id":"fR0ph--eRgvfDDKqwCQLS","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 21872449.378265787 km^2\nUnit Sphere Area = 21896220.663299154 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3b07122fab9e623fd972b8c076915003","path":"/great-circle-cookbook/build/3b07122fab9e623fd972b8c076915003.png"}}}],"key":"rhsdGMvZZh"}],"key":"GNPm0zmwxj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"rockford\", \"boston\", \"houston\",], -130, -60, 20, 60)","key":"chyRUBKMTc"},{"type":"output","id":"2gaH36tm-8XJHzb95Ahsq","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3150946.426714995 km^2\nUnit Sphere Area = 3149017.3086414044 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2210978e367d95945cb6baeca9c4c761","path":"/great-circle-cookbook/build/2210978e367d95945cb6baeca9c4c761.png"}}}],"key":"b9irJyv8V3"}],"key":"gV1jOsLehD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"UKbbheXLYb"},{"type":"output","id":"r82Zle3NQgV2BsL3Yphpc","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3788155.432965353 km^2\nUnit Sphere Area = 3782548.632737316 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"43b62416925a37ec4abce176e5e07eed","path":"/great-circle-cookbook/build/43b62416925a37ec4abce176e5e07eed.png"}}}],"key":"bfJLjcRRHv"}],"key":"SM1CtyxXzr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kRMWzm3Fzo"}],"identifier":"todo","label":"TODO","html_id":"todo","implicit":true,"key":"yNuhvnSAEF"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Fix invalid overlapping polygon by re-ordering points into a clockwise order.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tDhe2835DK"}],"key":"XJv9Jg5Rma"}],"key":"drCRMKV0kb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"houston\", \"boston\", \"cairo\", \"arecibo\", \"greenwich\"])","key":"lOmCm3pJuo"},{"type":"output","id":"qaDNSUvDhc-kTzNEguM5m","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 914381.1786067598 km^2\nUnit Sphere Area = 954445.989927043 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7a224d014b8a414de1d2e2662123c2b6","path":"/great-circle-cookbook/build/7a224d014b8a414de1d2e2662123c2b6.png"}}}],"key":"A88HoAWg3N"}],"key":"bmOUSi5U01"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"smIeMwc3BZ"}],"identifier":"determine-if-a-given-point-is-within-a-spherical-polygon","label":"Determine if a given point is within a spherical polygon","html_id":"determine-if-a-given-point-is-within-a-spherical-polygon","implicit":true,"key":"W5DSP6nHGm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Single or list of points","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gpQFr9Ar1b"}],"key":"mhnEqCMMY4"}],"key":"V5YBLahKnF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_contains_points(pt_lst=None, polygon_pts=None, tolerance_m=1):\n    # tolerance in meters\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in polygon_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    contains = np.vectorize(lambda pt: polygon.contains(Point((location_df.loc[pt, \"longitude\"],\n                                                               location_df.loc[pt, \"latitude\"]))))\n    contained_by_polygon = contains(np.array(pt_lst))\n    return contained_by_polygon","key":"uqgWsuRiXk"},{"type":"output","id":"fI3PuS1QTL8zSMUsCu2Cc","data":[],"key":"JTDQ1stE63"}],"key":"V97TobKmXE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_polygon_pts(pt_lst=None, polygon_pts=None, tolerance_m=1,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check points\n    pt_lst = np.array(pt_lst)\n    contains_pts = polygon_contains_points(pt_lst, polygon_pts, tolerance_m)\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"green\", label=\"Within Polygon\")\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[~contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[~contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\", label=\"Not within Polygon\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Points contained within polygon (tolerance {tolerance_m} m) = {pt_lst[contains_pts]}, not contained = {pt_lst[~contains_pts]}\")\n    plt.show()","key":"hdp55luxvb"},{"type":"output","id":"BbgIZKabu4ON1nhwDVbBx","data":[],"key":"LiSEzWFG5e"}],"key":"ufgMQ1LVRo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"I8RhwLpnb3"},{"type":"output","id":"9NDAPphiQ3yiaU7PxJ7_0","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"N1EwFgQlrU"}],"key":"T6IxTTkvxe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"e93B46xLqv"},{"type":"output","id":"yXUeZsFDkNu9dqfhRIJpI","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fc606f88dd6da4812d1dd72054935ed9","path":"/great-circle-cookbook/build/fc606f88dd6da4812d1dd72054935ed9.png"}}}],"key":"lvdvdEmeNE"}],"key":"iKXIZglnmF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"on9VBxh6Gf"},{"type":"output","id":"RqKNppETe8ubPRiFdtf1i","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"array([False])","content_type":"text/plain"}}}],"key":"XhV6n0ljGq"}],"key":"A6PSzZfpZQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"UtfNSHpE53"},{"type":"output","id":"BJ9Q-OZOeiQU-Jd352wxd","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"45d87db5fee83938d2729bd6c237785e","path":"/great-circle-cookbook/build/45d87db5fee83938d2729bd6c237785e.png"}}}],"key":"F5c8i97TYV"}],"key":"mFF30kmGhH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"o4TaoOkEe6"},{"type":"output","id":"CGGflV-EbJxeP8-UPN1gW","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f52127abdba3d7e3a5a1077aac845199","path":"/great-circle-cookbook/build/f52127abdba3d7e3a5a1077aac845199.png"}}}],"key":"KFsdLwMXm8"}],"key":"mv05O51ia8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"redwoods\"], [\"rockford\", \"boston\", \"cape canaveral\"], 1,\n               -130, -60, 20, 60)","key":"p8RpY49CcP"},{"type":"output","id":"Yw5xXOpIGVYxJ3yJX6S_P","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7aedd74eed8f87ec3a14d8309f5d66f0","path":"/great-circle-cookbook/build/7aedd74eed8f87ec3a14d8309f5d66f0.png"}}}],"key":"reFbEanm70"}],"key":"kae1tjnMqe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q3K9bKCeXj"}],"identifier":"mean-center-of-spherical-polygon","label":"Mean center of spherical polygon","html_id":"mean-center-of-spherical-polygon","implicit":true,"key":"TSoLFOhHrJ"}],"key":"RrIrvwlwJx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_centroid(polygon_pts=None):\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts]\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    return (polygon.centroid.y, polygon.centroid.x)","key":"mpzSWPuogz"},{"type":"output","id":"h0utLvLB90D8JV0Cxh8ks","data":[],"key":"QyVr8CMatv"}],"key":"FBChjhtLYM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_centroid([\"boulder\", \"boston\", \"houston\"])","key":"K5L9WnmaGS"},{"type":"output","id":"c7muM0XO3DyYpqY5PQwKe","data":[{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/plain":{"content":"(37.30896666666666, -90.47586666666665)","content_type":"text/plain"}}}],"key":"cAjDBgfn5n"}],"key":"FFsN6XWin0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_centroid(polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check point\n    centeroid = polygon_centroid(polygon_pts)\n    plt.scatter(centeroid[1], centeroid[0], s=100, c=\"red\")\n    plt.title(f\"Centroid = {centeroid}\")\n    plt.show()","key":"MeuMFpHWDr"},{"type":"output","id":"7CtKfS4uFamtK9c9AoJTI","data":[],"key":"NcUa4EKjbX"}],"key":"Y3uV6rcPcI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"boulder\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"vA4gxQT4KQ"},{"type":"output","id":"Ps_X9mMIOEr_IcWxZpNrk","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"a9816185a2d44193a5cdae7c2d9b4c44","path":"/great-circle-cookbook/build/a9816185a2d44193a5cdae7c2d9b4c44.png"}}}],"key":"WCRqN9E0iE"}],"key":"me5DVVU84f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"redwoods\", \"boulder\", \"cape canaveral\", \"houston\"],\n               -130, -60, 20, 60)","key":"WixpeSLu1Q"},{"type":"output","id":"NAV2xg6LAzQzwjzSrIDSO","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"5977e9d7a07e9ce09f3941af9552703c","path":"/great-circle-cookbook/build/5977e9d7a07e9ce09f3941af9552703c.png"}}}],"key":"hKWT1rcDbX"}],"key":"KCunnaotzI"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bJkZeeoe6T"}],"key":"rJDI2HnqUa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"McRyZTfGK3"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"EfQwHmDhAy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook covers working with spherical polygons to determine the ordering of coordinates, center of polygons, and whether or not a point lies within a spherical polygon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hgs7Pl0FOT"}],"key":"r44Em0KYsT"}],"key":"hGsbiAkiy1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HlkcXAPmp3"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"Aw4uGyRK76"}],"key":"MMT3gDxfwB"}],"key":"Twourzkr4T"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}