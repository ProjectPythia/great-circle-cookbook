{"version":2,"kind":"Notebook","sha256":"71daefa3989dbf1571f3f8c9f963c7329dd3a69727c0609fe6a1c4ba1a684611","slug":"notebooks.tutorials.polygon-area","location":"/notebooks/tutorials/6_polygon_area.ipynb","dependencies":[],"frontmatter":{"title":"Spherical Polygons and Areas","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/6_polygon_area.ipynb","thumbnail":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","exports":[{"format":"ipynb","filename":"6_polygon_area.ipynb","url":"/great-circle-cookbook/build/6_polygon_area-b9927cd4f44a18825ede1641ffc9fe0a.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/701107a0e2ee97885d350edb1770afee.gif","alt":"Tiling of the sphere by spherical triangles","key":"DMdP9SP0Dp","urlSource":"https://upload.wikimedia.org/wikipedia/commons/f/f2/Sphere5tesselation.gif"}],"key":"I1bTGyHUju"}],"key":"pdEaSG4ieJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vbh1Qz9Zpa"}],"identifier":"spherical-polygons-and-areas","label":"Spherical Polygons and Areas","html_id":"spherical-polygons-and-areas","implicit":true,"key":"fSZNbcgK82"}],"key":"G5n88A4NKf"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eajPXN8vnf"}],"key":"Me70BAXh2a"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DfB3qfJUO7"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"nt2EY3JIht"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the calculations of a spherical polygons based on a unit sphere.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Tub8DO38QN"}],"key":"jLIXyeAcK7"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"tQ25NrL2km"}],"key":"Fx7QDMxygz"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Area and Permieter of quadrilateral patch on a unit sphere","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VygsQYEIcX"}],"key":"A2PLj7z5WR"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iGrks8orlX"}],"key":"QWtukvtigT"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NgXIROmoH8"}],"key":"kfaxXhZhlo"}],"key":"WTaZp1V3vA"}],"key":"yzAGxyaP8b"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dtwXu0wUSh"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"u1dEXI8APT"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DwepLsjYx2"}],"key":"kx7nKHNBer"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qYjFEl9Ggj"}],"key":"HuUxMefmWV"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YlnZL678OD"}],"key":"gEVkKwutyX"}],"key":"D2INqViefb"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xwXeQGMgYp"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"pdJSTLJXnL"}],"key":"UXePRvBGAV"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"enEBpiuyDE"}],"key":"gxnisK9ssG"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"gNOyvOqvSy"}],"key":"oQ4dL7KIan"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"mbHtkdu4on"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"a7CyXlZAsr"}],"key":"kxKAAQzzBl"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"myWepZgYMe"}],"key":"SUdaSMdqbf"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"mEOlrQANck"}],"key":"vtIrrKvYBR"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rYxZGQ5Id6"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"quZndsvQfV"}],"key":"nmtq82YCDc"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"hsdpQwslyT"}],"key":"FuNeISzEfN"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"DKYaQJPwra"}],"key":"keyhFr2ymZ"}],"key":"VP2lhE1EL5"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"KHVHQdFiJV"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"xlEl3e0tJG"}],"key":"rWreWsJ2DM"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"tE5CMoqUUi"}],"key":"bAPiQeaL4F"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Fw6t2wD7ku"}],"key":"GMygvKRtow"}],"key":"Hj2cLfvfig"}],"key":"U7QzcmVFSk"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"BMiAari6VJ"}],"key":"P8CralTKxI"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SYeumZQdvZ"}],"key":"EdKlP92PnQ"}],"key":"vO6Qvo4Lwl"}],"key":"xgfWun0mhX"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lotbBp3Cvd"}],"key":"rEdPdRAoTU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HbHybRWJ4J"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"rE7g88JUM3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bLLKWrW2qY"}],"key":"jRhXqn6Ik1"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TynuMRdhEB"}],"key":"zeQGSIwZUm"}],"key":"uuMvh5oohL"}],"key":"cq7gzjT78z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"QmrU8tO5Kz"},{"type":"output","id":"2e9fSiBL0k0aK6Nk_mYbJ","data":[],"key":"p7x3PRtBAu"}],"key":"UiiJtwjTL4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"iXwTI8dkRP"},{"type":"output","id":"Ee7UoxGssfYfZ2PlOICGl","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"hH1VNnfvFE"}],"key":"SxhkjfI9B5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"X6HfWfZobk"},{"type":"output","id":"dTXy3tpFN7IO8BspEt7qD","data":[],"key":"ZecHReXBJ9"}],"key":"dJ3UcpyMkJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine clockwise/counterclockwise ordering of points on spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eEGh6Pzbp0"}],"identifier":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","label":"Determine clockwise/counterclockwise ordering of points on spherical polygon","html_id":"determine-clockwise-counterclockwise-ordering-of-points-on-spherical-polygon","implicit":true,"key":"fBkpKnGbBj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"True: when input points are in a clockwise order","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XZO1T5kDzn"}],"key":"GEQqqMkhqw"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"False: when input points are in a counterclockwise (or co-linear) order","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"CArM3hw3hY"}],"key":"yyYqXs8Cif"}],"key":"yg4R0I4ZFc"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Shoelace Formula for Signed Polygon Area","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"h8byTYYtAY"}],"identifier":"shoelace-formula-for-signed-polygon-area","label":"Shoelace Formula for Signed Polygon Area","html_id":"shoelace-formula-for-signed-polygon-area","implicit":true,"key":"Iw6YEaHPID"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"KF5MyK1TSn"}],"key":"hf08rTkWzG"}],"key":"eMUcXxEORW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def is_clockwise(pt_lst=None):\n    # signed polygon area -> shoelace formula\n    # positive = counterclockwise, negative = clockwise\n    area = 0\n    for i in range(0, len(pt_lst)):\n        if i+1 < len(pt_lst):\n            area += location_df.loc[pt_lst[i], \"latitude\"] * location_df.loc[pt_lst[i+1], \"longitude\"]\n            area -= location_df.loc[pt_lst[i+1], \"latitude\"]  * location_df.loc[pt_lst[i], \"longitude\"]\n        #area /= 2 # determine full sign area, unneeded when just working with signs\n    if area < 0: \n        print(\"clockwise -> negative\")\n        return True\n    if area > 0:\n        print(\"counterclockwise -> positive\")\n        return False\n    if area == 0:\n        print(\"non-collinear -> zero\") #https://en.wikipedia.org/wiki/Curve_orientation\n        return False","key":"OIhqocMc0u"},{"type":"output","id":"zX3FNtYo26eY_k1cwlaqO","data":[],"key":"yOJqfyuekV"}],"key":"K3sm16uEMd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"is_clockwise([\"boulder\", \"boston\", \"houston\"])","key":"HjRZt0AtCm"},{"type":"output","id":"Jf_y8QsrSr4FJ2HU0Mm4C","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"True","content_type":"text/plain"}}}],"key":"QPhV0s7p8I"}],"key":"lszcPZkY2i"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_clockwise(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot arrow between points in order\n    for i, pt in enumerate(pt_lst):\n        if i+1 < len(pt_lst):\n            ax.quiver(location_df.loc[pt_lst[i], \"longitude\"],\n                      location_df.loc[pt_lst[i], \"latitude\"], \n                      (location_df.loc[pt_lst[i+1], \"longitude\"]-location_df.loc[pt_lst[i], \"longitude\"]), \n                      (location_df.loc[pt_lst[i+1], \"latitude\"]-location_df.loc[pt_lst[i], \"latitude\"]), \n                      angles='xy', scale_units='xy', scale=1)   \n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    if is_clockwise(pt_lst):\n        clockwise = \"Clockwise\"\n    else:\n        clockwise = \"Counterclockwise\"\n    plt.title(clockwise)\n    plt.show()","key":"jnze89BnN7"},{"type":"output","id":"4vJBbIychm_jFv5I8qHKm","data":[],"key":"La0JWoaYL9"}],"key":"yRDrrq6gA1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"rsmwkV5cgi"},{"type":"output","id":"5woEs8UJTPtsVGERQDAWj","data":[{"output_type":"stream","name":"stdout","text":"clockwise -> negative\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3a3277a54067ba4f990ca98a2b89cf49","path":"/great-circle-cookbook/build/3a3277a54067ba4f990ca98a2b89cf49.png"}}}],"key":"BaXtcLjXUt"}],"key":"zNAhrUCS3Z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"houston\", \"boston\", \"boulder\"], -130, -60, 20, 60)","key":"G3I8tzPudf"},{"type":"output","id":"_dHBTFztpeDREuipnG0q6","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3b3c3eb4fec3f497323026d54511e043","path":"/great-circle-cookbook/build/3b3c3eb4fec3f497323026d54511e043.png"}}}],"key":"DKluilL9cc"}],"key":"v1yMG24ToB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_clockwise([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"timbuktu\"])","key":"qW8qgdzzch"},{"type":"output","id":"I_q2br7RIlJrIyMRoO66O","data":[{"output_type":"stream","name":"stdout","text":"counterclockwise -> positive\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e6e877250339ac152739eb9bc7120af2","path":"/great-circle-cookbook/build/e6e877250339ac152739eb9bc7120af2.png"}}}],"key":"e6ga9aJKtd"}],"key":"hVowqkKkxF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area and Perimeter of quadrilateral patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iroscR0Mr7"}],"identifier":"area-and-perimeter-of-quadrilateral-patch","label":"Area and Perimeter of quadrilateral patch","html_id":"area-and-perimeter-of-quadrilateral-patch","implicit":true,"key":"AdyEZDe6PH"}],"key":"QcN68aGvUW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def area_of_polygon_ellps(poly_pts=None):\n    geod = Geod(ellps=\"WGS84\")\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km\n\ndef area_of_polygon_unit_sphere(poly_pts=None):\n    geod = Geod(ellps=\"sphere\") # 'sphere': {'a': 6370997.0, 'b': 6370997.0, 'description': 'Normal Sphere (r=6370997)'\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km","key":"r98vmMQLBV"},{"type":"output","id":"_igZ9Nk4_BhEen4CDqEnW","data":[],"key":"rU5M96e2cY"}],"key":"smkGDmQg3B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_area(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    area_ellps, perimeter_ellps = area_of_polygon_ellps(pt_lst)\n    area_us, perimeter_us = area_of_polygon_unit_sphere(pt_lst)\n    print(f\"Ellipsoid Area   = {area_ellps} km^2\")\n    print(f\"Unit Sphere Area = {area_us} km^2\")\n    plt.title(f\"Roughly {(area_ellps/509600000)*100:.2f}% ({(area_us/509600000)*100:.2f}%) of the Earth's Surface\")\n    plt.show()","key":"nJrLqlruVp"},{"type":"output","id":"SJCAb5dXQoHBjC2CQ-n49","data":[],"key":"zye8mhsLoJ"}],"key":"Kv2pRw7oxA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"area_ellps, perimeter_ellps = area_of_polygon_ellps([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\narea_us, perimeter_us = area_of_polygon_unit_sphere([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\nprint(f\"Area Ellipsoid   = {area_ellps} km^2\")\nprint(f\"Area Unit Sphere = {area_us} km^2\")\nprint(f\"Perimeter Ellipsoid = {perimeter_ellps} km\")\nprint(f\"Perimeter Unit SPhere = {perimeter_us} km\")\nprint(f\"Roughly {(area_ellps/509600000)*100:.2f}% of the Earth's Surface\")\nprint(f\"Roughly {(area_us/509600000)*100:.2f}% of the Earth's Surface\")","key":"vxGU0ggl1D"},{"type":"output","id":"cwqIG-P0I0fAnP7yfKTWM","data":[{"output_type":"stream","name":"stdout","text":"Area Ellipsoid   = 5342585.6476998255 km^2\nArea Unit Sphere = 5344606.94796931 km^2\nPerimeter Ellipsoid = 10171.738963248145 km\nPerimeter Unit SPhere = 10170.504728302833 km\nRoughly 1.05% of the Earth's Surface\nRoughly 1.05% of the Earth's Surface\n"}],"key":"Jr6vj3N7Os"}],"key":"CpK4aR1CpT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"arecibo\", \"houston\"])","key":"x6FP7WR534"},{"type":"output","id":"1IpaHlk370xZUh-9U7el6","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 21872449.378265787 km^2\nUnit Sphere Area = 21896220.663299154 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b27f7b34a6788f6d0c5eff2e1a7f1adf","path":"/great-circle-cookbook/build/b27f7b34a6788f6d0c5eff2e1a7f1adf.png"}}}],"key":"Fuiyz64Mmn"}],"key":"lqmEZv7b5s"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"rockford\", \"boston\", \"houston\",], -130, -60, 20, 60)","key":"zxSKi8oag3"},{"type":"output","id":"UxxbSLg4F4Ja4ieksjKse","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3150946.426714995 km^2\nUnit Sphere Area = 3149017.3086414044 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2d87c6261113fd722ea79d808db15027","path":"/great-circle-cookbook/build/2d87c6261113fd722ea79d808db15027.png"}}}],"key":"jkmvfAslg7"}],"key":"FkFze10olC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"LzOlVfvAvQ"},{"type":"output","id":"B-STfZwC5exQw9CpBLuWS","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3788155.432965353 km^2\nUnit Sphere Area = 3782548.632737316 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"69981614f709d867c24b9bfffea17c45","path":"/great-circle-cookbook/build/69981614f709d867c24b9bfffea17c45.png"}}}],"key":"ny3q3H4qo1"}],"key":"XFKk9q49on"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iApUZDMVcr"}],"identifier":"todo","label":"TODO","html_id":"todo","implicit":true,"key":"wDxkjBnse9"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Fix invalid overlapping polygon by re-ordering points into a clockwise order.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"pYg0ex0hoi"}],"key":"YkfbbaDZSK"}],"key":"rMpxSqnca5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"houston\", \"boston\", \"cairo\", \"arecibo\", \"greenwich\"])","key":"xBVYMGGQoy"},{"type":"output","id":"eKqDdWgr4CmHBePEEKhr9","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 914381.1786067598 km^2\nUnit Sphere Area = 954445.989927043 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fb91c643311804e466fb7c3acabd0fe6","path":"/great-circle-cookbook/build/fb91c643311804e466fb7c3acabd0fe6.png"}}}],"key":"N0q3RMoQx9"}],"key":"DXgdWRwINe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wFb6AcronK"}],"identifier":"determine-if-a-given-point-is-within-a-spherical-polygon","label":"Determine if a given point is within a spherical polygon","html_id":"determine-if-a-given-point-is-within-a-spherical-polygon","implicit":true,"key":"wgGBAY0Vyr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Single or list of points","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lg4jmGqa6k"}],"key":"KUKrWNcwJP"}],"key":"Rrc7FRcESN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_contains_points(pt_lst=None, polygon_pts=None, tolerance_m=1):\n    # tolerance in meters\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in polygon_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    contains = np.vectorize(lambda pt: polygon.contains(Point((location_df.loc[pt, \"longitude\"],\n                                                               location_df.loc[pt, \"latitude\"]))))\n    contained_by_polygon = contains(np.array(pt_lst))\n    return contained_by_polygon","key":"pvwIMTJ9vN"},{"type":"output","id":"fGTWsyKm4khc9ollMccCK","data":[],"key":"Z22v5AJyDw"}],"key":"IRZI6wpF9j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_polygon_pts(pt_lst=None, polygon_pts=None, tolerance_m=1,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check points\n    pt_lst = np.array(pt_lst)\n    contains_pts = polygon_contains_points(pt_lst, polygon_pts, tolerance_m)\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"green\", label=\"Within Polygon\")\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[~contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[~contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\", label=\"Not within Polygon\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Points contained within polygon (tolerance {tolerance_m} m) = {pt_lst[contains_pts]}, not contained = {pt_lst[~contains_pts]}\")\n    plt.show()","key":"hL7wxRH1dH"},{"type":"output","id":"9dJsdVh3OTRi46D8bDGNy","data":[],"key":"KkVyMV7Pt8"}],"key":"SgT2OnnmeF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"GlQma9kknN"},{"type":"output","id":"pboBmxKNAcYwugnuzAg_y","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"J9QsIUvUDp"}],"key":"vxqHJSGpIu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"t6gwLy2PQQ"},{"type":"output","id":"g9pCo0ku2rh6u1ruvUZ_z","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fea981bd6a9c5006dfe39f6e76a48992","path":"/great-circle-cookbook/build/fea981bd6a9c5006dfe39f6e76a48992.png"}}}],"key":"gmYZlWOoDS"}],"key":"OmjLdiAjCY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1)","key":"paY3YU9KoP"},{"type":"output","id":"SAFqwuFwZHSKrX--KVZ1o","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"array([False])","content_type":"text/plain"}}}],"key":"KWduw47NWO"}],"key":"CIkV2VoIGz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"VIi7CcqNDD"},{"type":"output","id":"3_YuAaF4lTYD4iEdc8eHf","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"99f3e158c7475e8a314a4e13e88e44a4","path":"/great-circle-cookbook/build/99f3e158c7475e8a314a4e13e88e44a4.png"}}}],"key":"mOBFdi0ZgX"}],"key":"Es1iW4rjjm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"], 1,\n               -130, -60, 20, 60)","key":"QSIoYO4nlw"},{"type":"output","id":"ibpPAHuYOrNXGB5rqUapR","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"12e581f0e3d53f7043458035c3bbd6fa","path":"/great-circle-cookbook/build/12e581f0e3d53f7043458035c3bbd6fa.png"}}}],"key":"eoavK7ck5R"}],"key":"uwtPTaumKL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"redwoods\"], [\"rockford\", \"boston\", \"cape canaveral\"], 1,\n               -130, -60, 20, 60)","key":"rUeQvvhJFY"},{"type":"output","id":"6V1PaDrgULysyTMWhMB3h","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"bd6217175d933d33f4bf4fcb4707346a","path":"/great-circle-cookbook/build/bd6217175d933d33f4bf4fcb4707346a.png"}}}],"key":"VBZb8V7RJ8"}],"key":"Yz8mkjg5tK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DAxmQkZUf4"}],"identifier":"mean-center-of-spherical-polygon","label":"Mean center of spherical polygon","html_id":"mean-center-of-spherical-polygon","implicit":true,"key":"SKoAaOsuN4"}],"key":"YP8XEpXBap"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_centroid(polygon_pts=None):\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts]\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    return (polygon.centroid.y, polygon.centroid.x)","key":"Wg11BnYwXT"},{"type":"output","id":"sXPs6dqvUyDsZiV4jMaiZ","data":[],"key":"L03rSVyjLq"}],"key":"jVsbWzJCA1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_centroid([\"boulder\", \"boston\", \"houston\"])","key":"BQxIHwqgl3"},{"type":"output","id":"-2HpVSIY-v4F7zg6maPY7","data":[{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/plain":{"content":"(37.30896666666666, -90.47586666666665)","content_type":"text/plain"}}}],"key":"s71W2ANnL0"}],"key":"ICRabW7OFM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_centroid(polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check point\n    centeroid = polygon_centroid(polygon_pts)\n    plt.scatter(centeroid[1], centeroid[0], s=100, c=\"red\")\n    plt.title(f\"Centroid = {centeroid}\")\n    plt.show()","key":"JuTNN1uB4D"},{"type":"output","id":"xyKM2BAIfommAp6yBKy0A","data":[],"key":"vPc3X8p84R"}],"key":"er7pEsLp99"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"boulder\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"U8UWi9eKoi"},{"type":"output","id":"hccYo42hxRj2rdr4_2LVt","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1ef9eef25d5063e9f9a010b5a4c85230","path":"/great-circle-cookbook/build/1ef9eef25d5063e9f9a010b5a4c85230.png"}}}],"key":"ab1qdjwZkf"}],"key":"oRLcgYmO9Y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"redwoods\", \"boulder\", \"cape canaveral\", \"houston\"],\n               -130, -60, 20, 60)","key":"SexblZ4ylO"},{"type":"output","id":"urKb3axHIQ3HsxwFKWZ77","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"8b9d5c305e54e00e434ba3945db4c2c7","path":"/great-circle-cookbook/build/8b9d5c305e54e00e434ba3945db4c2c7.png"}}}],"key":"LWp3uhjwdz"}],"key":"q4wZz7yXjx"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BnO1ibGuww"}],"key":"uSLp9hv3Ws"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RN2JCYW9Mt"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"UlnLOVerM7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook covers working with spherical polygons to determine the ordering of coordinates, center of polygons, and whether or not a point lies within a spherical polygon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RhRt4GgHL1"}],"key":"fOHNiAXzAX"}],"key":"AJlpsAK3bt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"o5VdRpzSdP"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"GPdAdxzrT9"}],"key":"PFni98Leb8"}],"key":"JpBL2EYoTR"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}