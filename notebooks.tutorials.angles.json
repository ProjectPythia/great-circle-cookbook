{"version":2,"kind":"Notebook","sha256":"1289b9e23291ff2acae2d06e9bae180b380cb3a36d7c7482ebb7a36769e444d6","slug":"notebooks.tutorials.angles","location":"/notebooks/tutorials/5_angles.ipynb","dependencies":[],"frontmatter":{"title":"Angles and Great Circles","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"University at Albany (State University of New York)","name":"University at Albany (State University of New York)"},{"id":"UCAR/NCAR","name":"UCAR/NCAR"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/5_angles.ipynb","thumbnail":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","exports":[{"format":"ipynb","filename":"5_angles.ipynb","url":"/great-circle-cookbook/build/5_angles-b53b9115cea022a907f2a031f41f5f21.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","alt":"Illustrating the spherical triangles forming the pentagramma mirificum on Wikipedia","key":"Udey12O8Dr","urlSource":"https://upload.wikimedia.org/wikipedia/commons/4/4e/Pentagramma-mirificum.gif"}],"key":"pvjHOXcZFL"}],"key":"anT009lO7T"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Angles and Great Circles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RuPa15CVp9"}],"identifier":"angles-and-great-circles","label":"Angles and Great Circles","html_id":"angles-and-great-circles","implicit":true,"key":"M16HZ0rLOj"}],"key":"nIJLrCDXLW"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ecbJDPQLBH"}],"key":"AA1hM9VxOt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wxnEk2tlD0"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"DaQEwp01LD"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Angles are formed by the intersection of great circle paths.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gqyiaFvaFM"}],"key":"EKsyH5IMs4"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Calculate the acute and obtuse angle of two Great Circle paths","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"xH0NUMxnx8"}],"key":"DOxv0HfcVw"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hqoXufW0Xj"}],"key":"J0ZvuzXyzR"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Working with Spherical Triangles formed by great circle arcs (TODO)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"IOtyLzL5fv"}],"key":"DbKgd0lpxs"}],"key":"OLyzlQ9F7X"}],"key":"n0LWPvYG07"}],"key":"r9ljyC465b"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CSR2sPHDkn"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"uw21BJzewY"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UxQiJptcn7"}],"key":"xgc4jsz7wY"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SaluP6s4r4"}],"key":"xmMAs7bHjl"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZEp4ucTcoj"}],"key":"YgoGQHK9Qs"}],"key":"FVS2a33AMi"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kvRwNqWeFt"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"mt4xbFzcjS"}],"key":"md7tfTXlEm"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"qqodrmMpny"}],"key":"q1RbMqBOTr"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ijraHKWxzW"}],"key":"eQmpMQ3Lj7"}],"key":"AiiKoB2yAg"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"bHGYs0c2zG"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"auNA6mehHI"}],"key":"Y7VRWK2V7P"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ir5Cz9m7Ad"}],"key":"gjUuBeIOh2"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Gk6HgzpJrI"}],"key":"EEMVzCTdaa"}],"key":"eAyJvcUMBl"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"hDplYRDKqm"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"f0acyWvlLr"}],"key":"ZKcDw3UG9m"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Cm6N8O3dDc"}],"key":"oq66pmN3k2"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"sKQmfOURt3"}],"key":"PptjTbNFCU"}],"key":"MYqHXw38wg"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"oQkZKWM5Uk"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"hBnKgmmo9Q"}],"key":"KRmx71heAY"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"yQRIUWDQuB"}],"key":"ID3uUF53Bk"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ggnPtWVXc4"}],"key":"nJ8FxITHHD"}],"key":"YgDK8biAAO"}],"key":"eemKtZ5fXu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"JuBt3MGFRD"}],"key":"hODOPZxW4o"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"XPnpFhArF8"}],"key":"m6WdmijVbj"}],"key":"MlsCMCuvKu"}],"key":"bhoHRDwkiB"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rn7ByUEzrZ"}],"key":"wUFXMrBNG3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YhIUl1QX94"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"pJL1Ht8Qgc"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OJaNz0uJAg"}],"key":"EMzuop7INK"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yGBIH5owNZ"}],"key":"qqS4kxQiPA"}],"key":"TjChDsCeF5"}],"key":"Gv3qAPsWKj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"VKRBtVGR0T"},{"type":"output","id":"vH89fX6LihtCO9cP0w2Zf","data":[],"key":"idMQXwPO6x"}],"key":"jlOgF4mRMw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"Q8W5DuByOl"},{"type":"output","id":"jHqL9rvmSnlMmFKwo6Xiz","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"tcG8mDhdMH"}],"key":"zI1Cpi4RLw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"VbV3wJhiXb"},{"type":"output","id":"GXroUNQj6HMGrOPB-mgBl","data":[],"key":"MvCTd1Dx9G"}],"key":"iTnqwmUn1o"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.loc[\"boulder\", \"latitude\"]","key":"RfEQZS4lMG"},{"type":"output","id":"XIU5sZWoj4IkQLKH5TZsT","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"np.float64(40.015)","content_type":"text/plain"}}}],"key":"Ac7cMqP8wh"}],"key":"XndIVhmxci"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate the acute and obtuse angle of two great circle paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n3EGbmAyej"}],"identifier":"calculate-the-acute-and-obtuse-angle-of-two-great-circle-paths","label":"Calculate the acute and obtuse angle of two great circle paths","html_id":"calculate-the-acute-and-obtuse-angle-of-two-great-circle-paths","implicit":true,"key":"ROWV4QTEpy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The acute and obtuse angle formed by two great circle paths and an intersection point.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c75S6jomsp"}],"key":"cqOsfGrsOd"}],"key":"AkXv2nMF4B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def angle_between_arcs(start_gc1=None, end_gc1=None,\n                       start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1,\"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2,\"cart_z\"]])\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    obtuse_acute_angle = (np.rad2deg(angle), ((360-(2*np.rad2deg(angle)))/2))\n    obtuse_angle = np.max(obtuse_acute_angle)\n    print(f\"Acute Angle  = {np.min(obtuse_acute_angle)} degrees\")\n    print(f\"Obtuse Angle = {np.max(obtuse_acute_angle)} degrees\")\n    return obtuse_acute_angle","key":"FwFQP4GrJ3"},{"type":"output","id":"KbOdYSFtKrv_7bm1HvBSJ","data":[],"key":"FpoHnFZx7W"}],"key":"mMLdmcHYxG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"angle_between_arcs(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")","key":"k2fesMHV4B"},{"type":"output","id":"39nIUAqOAhFC1w6B7DENt","data":[{"output_type":"stream","name":"stdout","text":"Acute Angle  = 30.646334650419135 degrees\nObtuse Angle = 149.35366534958087 degrees\n"},{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"(np.float64(149.35366534958087), np.float64(30.646334650419135))","content_type":"text/plain"}}}],"key":"WebUmpURzj"}],"key":"Pdhwk30n6J"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b9ZHlIAYWG"}],"identifier":"calculate-the-directed-angle-of-two-great-circle-paths-based-on-an-intersection-point","label":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","html_id":"calculate-the-directed-angle-of-two-great-circle-paths-based-on-an-intersection-point","implicit":true,"key":"vOwpEivGMh"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Calculate the directed angle of two great circle paths based on an intersection point.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mIcJPdY0NF"}],"key":"x7ICpc1Y9V"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Overview of Directed Angles","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uEzDZD0miI"}],"identifier":"overview-of-directed-angles","label":"Overview of Directed Angles","html_id":"overview-of-directed-angles","implicit":true,"key":"XFCUp1588C"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Hf8HSap535"}],"key":"kgRxrsNStu"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"inlineCode","value":"Finds the directed angle between two great circles defined by three points: A, B, C where A->B and A->C are arcs on the great circle (where A is where the arcs intersect","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"M0lCUGFpoJ"}],"key":"v2Koqo6q4f"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"inlineCode","value":"Returned angle is positive if C is to the left of the great circles A->B","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"k7tmEUDKsI"}],"key":"LK2CTHtOtW"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"inlineCode","value":"Returned angle is negative if C is to the right of the great circles A->B","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"gCKYe395XX"}],"key":"hEu739ffmq"},{"type":"blockquote","position":{"start":{"line":15,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Directed angle is in the standard position if it satistfies two conditions:","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"wjbxLNOw6r"}],"key":"CYnlc08XZg"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Its vertex is the origin of rectangular coordinates system\nIts initial side lies on the positive direction of the x-axis","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"kIqVD1ElYB"}],"key":"xHXanHR2gC"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"The directed angle resulting from an anticlockwise rotation has a positive measure","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"tBG2fLY8Fb"}],"key":"B1PueANGiR"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"The directed angle resulting from a clockwise rotation has a negative measure","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"okbRH2MMt8"}],"key":"elW8hj3Obm"}],"key":"xe1VPHFzWN"}],"key":"E9sDGq6txB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def directed_angle(b_coords=None, c_coords=None, a_coords=None):\n    # determine cartesian_coordinates from intersect points\n    earth_radius = 6378137  # meters\n    latitude = np.deg2rad(a_coords[0])\n    longitude = np.deg2rad(a_coords[1])\n    cart_x = earth_radius * np.cos(latitude) * np.cos(longitude)\n    cart_y = earth_radius * np.cos(latitude) * np.sin(longitude)\n    cart_z = earth_radius * np.sin(latitude)\n\n    # get normal of planes containing great circles\n    normal_one = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[b_coords, \"cart_x\"],\n                           location_df.loc[b_coords, \"cart_y\"],\n                           location_df.loc[b_coords, \"cart_z\"]])\n    normal_two = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[c_coords, \"cart_x\"],\n                           location_df.loc[c_coords, \"cart_y\"],\n                           location_df.loc[c_coords, \"cart_z\"]])\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    angle = np.rad2deg(angle)\n\n    # take the cross product of two vectors A->B and A->C\n    v_ab = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[b_coords, \"cart_x\"],\n                     location_df.loc[b_coords, \"cart_y\"],\n                     location_df.loc[b_coords, \"cart_z\"]]])\n    v_ac = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[c_coords, \"cart_x\"],\n                     location_df.loc[c_coords, \"cart_y\"],\n                     location_df.loc[c_coords, \"cart_z\"]]])\n\n    cross_prod = np.cross(v_ab, v_ac)\n    # inverse of the sign of the cross product\n    sign_angle = -1*np.sign(cross_prod[1][-1]) * angle\n    return sign_angle","key":"aGetyxOA9N"},{"type":"output","id":"0CHNt4R0Bg57nYJOpFvgp","data":[],"key":"RA7GqAXc1H"}],"key":"qITMYSEKDl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate Intersection Point Between Two Great Circle Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UhGZYmmYix"}],"identifier":"calculate-intersection-point-between-two-great-circle-paths","label":"Calculate Intersection Point Between Two Great Circle Paths","html_id":"calculate-intersection-point-between-two-great-circle-paths","implicit":true,"key":"bK7WR4iuXT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"See previous section for more details","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uO3qE7fGkD"}],"key":"ZCkxejK8sg"}],"key":"LcqMN37lkn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def intersection_of_gc(start_gc1=None, end_gc1=None,\n                      start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n\n    # cross product of vectors\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1, \"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2, \"cart_z\"]])\n    # intersection of planes, normal to the poles of each plane\n    line_of_intersection = np.cross(normal_one, normal_two)\n    # intersection points (one on each side of the earth)\n    x1 = line_of_intersection /  np.sqrt(line_of_intersection[0]**2 + line_of_intersection[1]**2 + line_of_intersection[2]**2) \n    x2 = -x1\n    lat1 = np.rad2deg(np.arctan2(x1[2], np.sqrt(pow(x1[0],2)+pow(x1[1],2))))\n    lon1 = np.rad2deg(np.arctan2(x1[1], x1[0]))\n    lat2 = np.rad2deg(np.arctan2(x2[2], np.sqrt(pow(x2[0],2)+pow(x2[1],2))))\n    lon2 = np.rad2deg(np.arctan2(x2[1], x2[0]))\n    return [(lat1, lon1), (lat2, lon2)]","key":"v8cQUyNXha"},{"type":"output","id":"j3uScd-2wPt3HMeW_dhA6","data":[],"key":"sypm3wNKkw"}],"key":"bOSzM8ZpTV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"intersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")\nintersect_pts","key":"vQdBmkdbx9"},{"type":"output","id":"LGAU95tEswdGsqDQ-Fu5C","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(-12.168951714418203), np.float64(22.96514530459759)),\n (np.float64(12.168951714418203), np.float64(-157.0348546954024))]","content_type":"text/plain"}}}],"key":"O960TrWnzj"}],"key":"LGWd1qFNfM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[0],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"f1OCXUvTT0"},{"type":"output","id":"PL7rBBgu_AT0qokSpU7_3","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"np.float64(-30.646334650419192)","content_type":"text/plain"}}}],"key":"Vazvc1CeZz"}],"key":"Mj1Sibq6eu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[-1],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"aJAXY0sB1u"},{"type":"output","id":"7wdai2b35Ko_SgjYOoyn8","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"np.float64(-30.646334650419192)","content_type":"text/plain"}}}],"key":"SQOqUqDV60"}],"key":"AOeyQR9VM3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Directed Angle","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EkJ8DwZ4zI"}],"identifier":"plot-directed-angle","label":"Plot Directed Angle","html_id":"plot-directed-angle","implicit":true,"key":"IjBeowmteJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Clockwise and Counterclockwise","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"S023Was6AY"}],"key":"n6803teEoC"}],"key":"C2FYFSayIG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# See previous section for more information\n\n# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_lat=None, start_lon=None,\n                               end_lat=None, end_lon=None,\n                               number_of_lon_pts=360):\n    lon1 = np.deg2rad(start_lon)\n    lat1 = np.deg2rad(start_lat)\n    lon2 = np.deg2rad(end_lon)\n    lat2 = np.deg2rad(end_lat)\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon\n\ndef interpolate_points_along_gc(lat_start=None, lon_start=None,\n                                lat_end=None, lon_end=None,\n                                distance_between_points_meter=0): \n    geodesic = Geod(ellps=\"WGS84\")\n    \n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points\n\ndef arc_points(start_lat=None, start_lon=None,\n               end_lat=None, end_lon=None,\n               n_total_points=10):\n\n    geodesic = Geod(ellps=\"WGS84\")\n\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_lat, start_lon,\n                                                   end_lat, end_lon,\n                                                    distance_between_points_meter)\n    return points_along_arc","key":"sH3dpIklsY"},{"type":"output","id":"MbGl_3lA_S3ARuaMtpcxC","data":[],"key":"zzX3P9FATW"}],"key":"hee5doDBHr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_gc_directed_angle(a_coords=None, b_coords=None,c_coords=None,\n                           angle=None,\n                           lon_west=-180, lon_east=180,\n                           lat_south=-90, lat_north=90):\n    # A = intersect point\n    # A->B and A->C where C is the angle to determine sign\n\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # Plot Great Circle Path\n    gc_one_lat_pts = generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[b_coords, \"latitude\"],\n                                                end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_one_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n    gc_two_lat_pts =  generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[c_coords, \"latitude\"],\n                                                end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_two_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Plot Great Circle Arc\n    gc_one_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[b_coords, \"latitude\"],\n                               end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_one_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"pink\")\n    gc_two_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[c_coords, \"latitude\"],\n                               end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_two_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"green\")\n\n    # plot A, B, C points in different colors\n    fz = 30\n    offset = 3\n    plt.scatter(a_coords[1], a_coords[0], s=100, c=\"red\", label=\"A\")\n    ax.annotate(\"A\", (a_coords[1]+offset, a_coords[0]+offset), fontsize=fz)\n    plt.scatter(location_df.loc[b_coords, \"longitude\"],\n               location_df.loc[b_coords, \"latitude\"],\n                s=100, c=\"blue\", label=\"B\")\n    ax.annotate(\"B\", (location_df.loc[b_coords, \"longitude\"]-(4*offset),\n                      location_df.loc[b_coords, \"latitude\"]-offset),\n                        fontsize=fz)\n    plt.scatter(location_df.loc[c_coords, \"longitude\"],\n                location_df.loc[c_coords, \"latitude\"], \n                s=100, c=\"cyan\", label=\"C\")\n    ax.annotate(\"C\", (location_df.loc[c_coords, \"longitude\"]+offset,\n                      location_df.loc[c_coords, \"latitude\"]+offset),\n                        fontsize=fz)\n    ax.quiver(location_df.loc[b_coords, \"longitude\"],\n              location_df.loc[b_coords, \"latitude\"], \n              (location_df.loc[c_coords, \"longitude\"]-location_df.loc[b_coords, \"longitude\"]), \n              (location_df.loc[c_coords, \"latitude\"]-location_df.loc[b_coords, \"latitude\"]), \n              angles='xy', scale_units='xy', scale=1)    \n    \n    if angle > 0: \n        sign = \"Counterclockwise\"\n    if angle < 0: \n        sign = \"Clockwise\"\n    if angle == 0:\n        sign = \"Colinear\"\n    plt.title(f\"Direction = {sign}, {angle}\")\n    plt.legend()\n    plt.show()","key":"AmWgCVXVdg"},{"type":"output","id":"MeAzriaTo5UazTAei1oaL","data":[],"key":"mrBAURxQlD"}],"key":"kKn3cpeK0K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"uPeenAs7k0"},{"type":"output","id":"dz4ebBDYq1sXAKJNz07gp","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"05bc8de788f08e31b5449014a3bcaa8a","path":"/great-circle-cookbook/build/05bc8de788f08e31b5449014a3bcaa8a.png"}}}],"key":"RdtM5h2Drp"}],"key":"V4CnPNIR7P"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"Iiin8wxF2H"},{"type":"output","id":"N6K398ZBuJ48-m0-NHZtC","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1f0eb73e984001b2538fe65237c04100","path":"/great-circle-cookbook/build/1f0eb73e984001b2538fe65237c04100.png"}}}],"key":"pNJ6NVGr5D"}],"key":"eiZnosMaoi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"uZjEAtNorp"},{"type":"output","id":"s17_o3YwIsKcHfM-HivdY","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"8e8cd569f2757ed0a980444a68c14787","path":"/great-circle-cookbook/build/8e8cd569f2757ed0a980444a68c14787.png"}}}],"key":"ZqjMGK5CRV"}],"key":"Vb8cgn7MJc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"eD5PYZLSQQ"},{"type":"output","id":"5OTKDl_-lvwQrJTrcuDKu","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"22aa5053dcd7cc8198de497f5f09e698","path":"/great-circle-cookbook/build/22aa5053dcd7cc8198de497f5f09e698.png"}}}],"key":"xlw9AqjGon"}],"key":"Q3YpOqzqQz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Working with Spherical Triangles formed by great circle arcs (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HytVxeQVom"}],"identifier":"working-with-spherical-triangles-formed-by-great-circle-arcs-todo","label":"Working with Spherical Triangles formed by great circle arcs (TODO)","html_id":"working-with-spherical-triangles-formed-by-great-circle-arcs-todo","implicit":true,"key":"BSVhDt0uYJ"}],"key":"Jtw5UiqqAK"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dxbOcu52ic"}],"key":"XxGAPwuEb2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PiPv4OfPU7"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"sbhW1STorY"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cwJWsCSQ16"}],"key":"mZzKEhMBJO"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"woa8rpr08Y"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"KMVKbYvpjq"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ayS6mYdeuv"}],"key":"V3KCwTAgQa"}],"key":"WEQk9FVcXp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WNArqwTcq6"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"MGRtaI7Ose"}],"key":"OgV2PIRfzo"}],"key":"TATgniOSaf"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"},"next":{"title":"Spherical Polygons and Areas","url":"/notebooks/tutorials/polygon-area","group":"Tutorials"}}},"domain":"http://localhost:3000"}