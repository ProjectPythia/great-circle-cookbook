{"version":2,"kind":"Notebook","sha256":"1289b9e23291ff2acae2d06e9bae180b380cb3a36d7c7482ebb7a36769e444d6","slug":"notebooks.tutorials.angles","location":"/notebooks/tutorials/5_angles.ipynb","dependencies":[],"frontmatter":{"title":"Angles and Great Circles","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/5_angles.ipynb","thumbnail":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","exports":[{"format":"ipynb","filename":"5_angles.ipynb","url":"/great-circle-cookbook/build/5_angles-76bf07f023f46aaac4601623e0ed4e66.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","alt":"Illustrating the spherical triangles forming the pentagramma mirificum on Wikipedia","key":"tdlt1VQnij","urlSource":"https://upload.wikimedia.org/wikipedia/commons/4/4e/Pentagramma-mirificum.gif"}],"key":"Dx8eRJeND7"}],"key":"q9Fqm0MaCj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Angles and Great Circles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nPYx5beunP"}],"identifier":"angles-and-great-circles","label":"Angles and Great Circles","html_id":"angles-and-great-circles","implicit":true,"key":"QZSScdPgKs"}],"key":"z2dKN4OXrb"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kNCPkZ4v2b"}],"key":"WDT2yui6nb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I2DkcOBKnt"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"Uj9tsCWgq6"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Angles are formed by the intersection of great circle paths.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KSdg4o9x4k"}],"key":"JM2CHNmyi6"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Calculate the acute and obtuse angle of two Great Circle paths","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"A94CkrlPIP"}],"key":"OH4htJ1NLw"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jhka9D3L9h"}],"key":"wzKNFoTVIh"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Working with Spherical Triangles formed by great circle arcs (TODO)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"b6ROI9D4gK"}],"key":"kYi4DrYQJZ"}],"key":"OARPGWY3GF"}],"key":"hvG3gCFOtR"}],"key":"WgfXm0sUy8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I96s1zMCWN"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"wKmHaP8lAM"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZL2LL60X9s"}],"key":"tkOIAZze7w"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"O1ooi7pXJM"}],"key":"VcnoKt6XBS"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zTEQaFYwPM"}],"key":"oiE31UhbkV"}],"key":"OA6bDwzluT"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TyhIHB19um"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"VcC2X0Dw2w"}],"key":"vmUa8E5dNU"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zfF7iRFYWh"}],"key":"OgoLlGdE8A"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tfiCyMejDd"}],"key":"QsxWpZWgaU"}],"key":"fe5pN38xoh"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Euer7045uJ"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"pRUgGkGyGM"}],"key":"x1OC5OBy9q"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"SBj3oNcjlP"}],"key":"JRtLBig9dE"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KprylpQkrU"}],"key":"rUAaNRFU0k"}],"key":"suTifTcKMq"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WjuLWJ0THX"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"ze69YFZJWc"}],"key":"Y6vnaHPfUe"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yau9dAPRs1"}],"key":"QfAvg02z15"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Q64iXAmlcW"}],"key":"CflnXfFnFZ"}],"key":"JmoTbWdIDp"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ggVXfmroc8"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"RIINO13u67"}],"key":"XkzBSHD2c5"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"dNHjC2Ystk"}],"key":"fIYbpG8qKl"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"MG79z0KRL0"}],"key":"KyDaapN9FE"}],"key":"Idr1CaTYIy"}],"key":"x9paO4dYVX"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"KhUs8Wglil"}],"key":"xbJj8VPOIp"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"m90FdZVeRo"}],"key":"nX6FI9QRVj"}],"key":"f6gB9Jwiwb"}],"key":"W3z6wHeKR9"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QFIw5FZRU5"}],"key":"VMz1xXWbKr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J5AWd1G4XW"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"V7z0LBHQua"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PV6sub4Jpt"}],"key":"ru7bBFkJoR"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"lwJ2AmHng0"}],"key":"O0ObhqKNKR"}],"key":"dsKjuJUCNi"}],"key":"l1QT7FYhwl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"eIpcEZz05i"},{"type":"output","id":"JHyTWgoEdKAeRALJkEqrV","data":[],"key":"J1BNsAo0jU"}],"key":"rlPNvk715l"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"feN3ASkty0"},{"type":"output","id":"J2VfKPEezdT0N_s9uRuup","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"f5VTrUU470"}],"key":"nWlsnsJIDE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"MKvwUXfE5A"},{"type":"output","id":"ZBJ2-eqbRpWkx_X5cEjh6","data":[],"key":"yQWPXCDOE2"}],"key":"CmSExR40Bg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.loc[\"boulder\", \"latitude\"]","key":"QZnjpi1inG"},{"type":"output","id":"jRj4KIw_IrZ-w0NK5dw6Z","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"np.float64(40.015)","content_type":"text/plain"}}}],"key":"O5q4k4KEON"}],"key":"ksOdo4HOFv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate the acute and obtuse angle of two great circle paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FKdgGar7SC"}],"identifier":"calculate-the-acute-and-obtuse-angle-of-two-great-circle-paths","label":"Calculate the acute and obtuse angle of two great circle paths","html_id":"calculate-the-acute-and-obtuse-angle-of-two-great-circle-paths","implicit":true,"key":"IBadIsmYSs"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The acute and obtuse angle formed by two great circle paths and an intersection point.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bKO1PWRbZS"}],"key":"wQ8FDNpJvG"}],"key":"OxiLr77qYM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def angle_between_arcs(start_gc1=None, end_gc1=None,\n                       start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1,\"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2,\"cart_z\"]])\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    obtuse_acute_angle = (np.rad2deg(angle), ((360-(2*np.rad2deg(angle)))/2))\n    obtuse_angle = np.max(obtuse_acute_angle)\n    print(f\"Acute Angle  = {np.min(obtuse_acute_angle)} degrees\")\n    print(f\"Obtuse Angle = {np.max(obtuse_acute_angle)} degrees\")\n    return obtuse_acute_angle","key":"bsIhZIxMsU"},{"type":"output","id":"VGVHr-uIeRDN7MOYAyXAf","data":[],"key":"zWVNw3zjM0"}],"key":"P6kRqqbWdX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"angle_between_arcs(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")","key":"cduVtKAhZu"},{"type":"output","id":"pcNvQcexQdhWCEKIF4yWK","data":[{"output_type":"stream","name":"stdout","text":"Acute Angle  = 30.646334650419135 degrees\nObtuse Angle = 149.35366534958087 degrees\n"},{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"(np.float64(149.35366534958087), np.float64(30.646334650419135))","content_type":"text/plain"}}}],"key":"Rr93Eb9teF"}],"key":"ngfosry5OY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"itudMUcZLg"}],"identifier":"calculate-the-directed-angle-of-two-great-circle-paths-based-on-an-intersection-point","label":"Calculate the Directed Angle of two Great Circle paths based on an intersection point","html_id":"calculate-the-directed-angle-of-two-great-circle-paths-based-on-an-intersection-point","implicit":true,"key":"o91fTU7XLi"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Calculate the directed angle of two great circle paths based on an intersection point.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IhHjHBbXvw"}],"key":"YZ73Vz1hIw"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Overview of Directed Angles","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"qnupImvjjO"}],"identifier":"overview-of-directed-angles","label":"Overview of Directed Angles","html_id":"overview-of-directed-angles","implicit":true,"key":"VQN5ayEOY6"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"DB1bgdrZzB"}],"key":"rMeUPKFTAv"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"inlineCode","value":"Finds the directed angle between two great circles defined by three points: A, B, C where A->B and A->C are arcs on the great circle (where A is where the arcs intersect","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"sztZiNbMA6"}],"key":"oiiKcpmNI3"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"inlineCode","value":"Returned angle is positive if C is to the left of the great circles A->B","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"kLDRuYj2Xb"}],"key":"hzxQWDKJex"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"inlineCode","value":"Returned angle is negative if C is to the right of the great circles A->B","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"hGDKImDo0Z"}],"key":"FvW1o7HPf5"},{"type":"blockquote","position":{"start":{"line":15,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Directed angle is in the standard position if it satistfies two conditions:","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Ctb6v6RWOY"}],"key":"pS6LKn4IaJ"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Its vertex is the origin of rectangular coordinates system\nIts initial side lies on the positive direction of the x-axis","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"OubUEryOo3"}],"key":"wz4MZEwpyn"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"The directed angle resulting from an anticlockwise rotation has a positive measure","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"J7P8hy3h5v"}],"key":"JDEHkD7VLL"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"The directed angle resulting from a clockwise rotation has a negative measure","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"aVlDDQ9fiv"}],"key":"YvIrg2FCql"}],"key":"wJT8ftV8Qr"}],"key":"sqKZnTOBr4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def directed_angle(b_coords=None, c_coords=None, a_coords=None):\n    # determine cartesian_coordinates from intersect points\n    earth_radius = 6378137  # meters\n    latitude = np.deg2rad(a_coords[0])\n    longitude = np.deg2rad(a_coords[1])\n    cart_x = earth_radius * np.cos(latitude) * np.cos(longitude)\n    cart_y = earth_radius * np.cos(latitude) * np.sin(longitude)\n    cart_z = earth_radius * np.sin(latitude)\n\n    # get normal of planes containing great circles\n    normal_one = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[b_coords, \"cart_x\"],\n                           location_df.loc[b_coords, \"cart_y\"],\n                           location_df.loc[b_coords, \"cart_z\"]])\n    normal_two = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[c_coords, \"cart_x\"],\n                           location_df.loc[c_coords, \"cart_y\"],\n                           location_df.loc[c_coords, \"cart_z\"]])\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    angle = np.rad2deg(angle)\n\n    # take the cross product of two vectors A->B and A->C\n    v_ab = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[b_coords, \"cart_x\"],\n                     location_df.loc[b_coords, \"cart_y\"],\n                     location_df.loc[b_coords, \"cart_z\"]]])\n    v_ac = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[c_coords, \"cart_x\"],\n                     location_df.loc[c_coords, \"cart_y\"],\n                     location_df.loc[c_coords, \"cart_z\"]]])\n\n    cross_prod = np.cross(v_ab, v_ac)\n    # inverse of the sign of the cross product\n    sign_angle = -1*np.sign(cross_prod[1][-1]) * angle\n    return sign_angle","key":"WRGGBGlVH7"},{"type":"output","id":"LbMB4SeMBOyhNpbbqTX6b","data":[],"key":"hFb676jT4R"}],"key":"Z4LWiUNeR7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate Intersection Point Between Two Great Circle Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PGxsGkJSOf"}],"identifier":"calculate-intersection-point-between-two-great-circle-paths","label":"Calculate Intersection Point Between Two Great Circle Paths","html_id":"calculate-intersection-point-between-two-great-circle-paths","implicit":true,"key":"nOkEPSKSK4"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"See previous section for more details","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aiOKNl2AbZ"}],"key":"ULPsYVcrc3"}],"key":"zLnZMEbeMt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def intersection_of_gc(start_gc1=None, end_gc1=None,\n                      start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n\n    # cross product of vectors\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1, \"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2, \"cart_z\"]])\n    # intersection of planes, normal to the poles of each plane\n    line_of_intersection = np.cross(normal_one, normal_two)\n    # intersection points (one on each side of the earth)\n    x1 = line_of_intersection /  np.sqrt(line_of_intersection[0]**2 + line_of_intersection[1]**2 + line_of_intersection[2]**2) \n    x2 = -x1\n    lat1 = np.rad2deg(np.arctan2(x1[2], np.sqrt(pow(x1[0],2)+pow(x1[1],2))))\n    lon1 = np.rad2deg(np.arctan2(x1[1], x1[0]))\n    lat2 = np.rad2deg(np.arctan2(x2[2], np.sqrt(pow(x2[0],2)+pow(x2[1],2))))\n    lon2 = np.rad2deg(np.arctan2(x2[1], x2[0]))\n    return [(lat1, lon1), (lat2, lon2)]","key":"x49rJMV7iO"},{"type":"output","id":"ZL3O9twC3YFLpPA6WRJAL","data":[],"key":"wmFqVCaCk4"}],"key":"Dt5QSu7YyS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"intersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")\nintersect_pts","key":"bwNQWuIu8o"},{"type":"output","id":"TYf5DR5AFZ0myAw3Qoo1b","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(-12.168951714418203), np.float64(22.96514530459759)),\n (np.float64(12.168951714418203), np.float64(-157.0348546954024))]","content_type":"text/plain"}}}],"key":"l6fAVkp3ip"}],"key":"aKDk7zJlxo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[0],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"BlZvjI1Yfq"},{"type":"output","id":"Y_MUnLDeMXgaBZukd-J6C","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"np.float64(-30.646334650419192)","content_type":"text/plain"}}}],"key":"ksaw8HdW4V"}],"key":"Vu90LEl0Uu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[-1],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"CBeDLDe05T"},{"type":"output","id":"PccoLAr9Isd9VZx0fig07","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"np.float64(-30.646334650419192)","content_type":"text/plain"}}}],"key":"ER76SkxM48"}],"key":"quLWZ5WtWa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Directed Angle","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iOgP3J8rcl"}],"identifier":"plot-directed-angle","label":"Plot Directed Angle","html_id":"plot-directed-angle","implicit":true,"key":"PmZ8BLVxlb"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Clockwise and Counterclockwise","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qaNrT5Opg8"}],"key":"ooMkj3mfRC"}],"key":"asip78ZOj1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# See previous section for more information\n\n# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_lat=None, start_lon=None,\n                               end_lat=None, end_lon=None,\n                               number_of_lon_pts=360):\n    lon1 = np.deg2rad(start_lon)\n    lat1 = np.deg2rad(start_lat)\n    lon2 = np.deg2rad(end_lon)\n    lat2 = np.deg2rad(end_lat)\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon\n\ndef interpolate_points_along_gc(lat_start=None, lon_start=None,\n                                lat_end=None, lon_end=None,\n                                distance_between_points_meter=0): \n    geodesic = Geod(ellps=\"WGS84\")\n    \n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points\n\ndef arc_points(start_lat=None, start_lon=None,\n               end_lat=None, end_lon=None,\n               n_total_points=10):\n\n    geodesic = Geod(ellps=\"WGS84\")\n\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_lat, start_lon,\n                                                   end_lat, end_lon,\n                                                    distance_between_points_meter)\n    return points_along_arc","key":"SQOLssfzf5"},{"type":"output","id":"v5L8vb-RGotjEEu26PN-7","data":[],"key":"z2e1AUZpXD"}],"key":"OcLUvua6mC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_gc_directed_angle(a_coords=None, b_coords=None,c_coords=None,\n                           angle=None,\n                           lon_west=-180, lon_east=180,\n                           lat_south=-90, lat_north=90):\n    # A = intersect point\n    # A->B and A->C where C is the angle to determine sign\n\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # Plot Great Circle Path\n    gc_one_lat_pts = generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[b_coords, \"latitude\"],\n                                                end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_one_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n    gc_two_lat_pts =  generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[c_coords, \"latitude\"],\n                                                end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_two_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Plot Great Circle Arc\n    gc_one_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[b_coords, \"latitude\"],\n                               end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_one_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"pink\")\n    gc_two_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[c_coords, \"latitude\"],\n                               end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_two_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"green\")\n\n    # plot A, B, C points in different colors\n    fz = 30\n    offset = 3\n    plt.scatter(a_coords[1], a_coords[0], s=100, c=\"red\", label=\"A\")\n    ax.annotate(\"A\", (a_coords[1]+offset, a_coords[0]+offset), fontsize=fz)\n    plt.scatter(location_df.loc[b_coords, \"longitude\"],\n               location_df.loc[b_coords, \"latitude\"],\n                s=100, c=\"blue\", label=\"B\")\n    ax.annotate(\"B\", (location_df.loc[b_coords, \"longitude\"]-(4*offset),\n                      location_df.loc[b_coords, \"latitude\"]-offset),\n                        fontsize=fz)\n    plt.scatter(location_df.loc[c_coords, \"longitude\"],\n                location_df.loc[c_coords, \"latitude\"], \n                s=100, c=\"cyan\", label=\"C\")\n    ax.annotate(\"C\", (location_df.loc[c_coords, \"longitude\"]+offset,\n                      location_df.loc[c_coords, \"latitude\"]+offset),\n                        fontsize=fz)\n    ax.quiver(location_df.loc[b_coords, \"longitude\"],\n              location_df.loc[b_coords, \"latitude\"], \n              (location_df.loc[c_coords, \"longitude\"]-location_df.loc[b_coords, \"longitude\"]), \n              (location_df.loc[c_coords, \"latitude\"]-location_df.loc[b_coords, \"latitude\"]), \n              angles='xy', scale_units='xy', scale=1)    \n    \n    if angle > 0: \n        sign = \"Counterclockwise\"\n    if angle < 0: \n        sign = \"Clockwise\"\n    if angle == 0:\n        sign = \"Colinear\"\n    plt.title(f\"Direction = {sign}, {angle}\")\n    plt.legend()\n    plt.show()","key":"BhhDXpVGYU"},{"type":"output","id":"n2yjS5el7jsTJo8TuxEI8","data":[],"key":"vGikyLlSEi"}],"key":"MdZiV1vOZI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"FZjVNSF8FL"},{"type":"output","id":"gTyetl1ICsk8BT42km_Ha","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"05bc8de788f08e31b5449014a3bcaa8a","path":"/great-circle-cookbook/build/05bc8de788f08e31b5449014a3bcaa8a.png"}}}],"key":"gekXX8uRYo"}],"key":"F3Zl2cqx9p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"EJdLxjsGmt"},{"type":"output","id":"NhHnlz-TVnRpm713cu9kk","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1f0eb73e984001b2538fe65237c04100","path":"/great-circle-cookbook/build/1f0eb73e984001b2538fe65237c04100.png"}}}],"key":"GVxVn8ZebW"}],"key":"oDU4KlhFlT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"U6dRwIIfJM"},{"type":"output","id":"c1GxnOuwmnsfYyCH6w6gB","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"8e8cd569f2757ed0a980444a68c14787","path":"/great-circle-cookbook/build/8e8cd569f2757ed0a980444a68c14787.png"}}}],"key":"Culn3uO9E0"}],"key":"Wf2dEgMwTd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"CW1liLZrP9"},{"type":"output","id":"yy0uQHAtzaOhNDq3UNhEr","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"22aa5053dcd7cc8198de497f5f09e698","path":"/great-circle-cookbook/build/22aa5053dcd7cc8198de497f5f09e698.png"}}}],"key":"GySGog6ERW"}],"key":"yiNTXo6lNH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Working with Spherical Triangles formed by great circle arcs (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a3vIDkeV7D"}],"identifier":"working-with-spherical-triangles-formed-by-great-circle-arcs-todo","label":"Working with Spherical Triangles formed by great circle arcs (TODO)","html_id":"working-with-spherical-triangles-formed-by-great-circle-arcs-todo","implicit":true,"key":"zDl97newPY"}],"key":"rqorOnq8vs"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YICnXzVNdM"}],"key":"FYodInCSmM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zYuoCNRpNU"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"Ojt0sKKXWK"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"TODO","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"V7hx3ohkjW"}],"key":"oK9X9dXtok"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"B1ab2EdNz7"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"cloF1oK7XO"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"N1TL9c5I6a"}],"key":"NyMNSGN0FF"}],"key":"BTLfLME6I8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JNf50VOoJw"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"D1kV0KC7ki"}],"key":"oXs8R3jLPG"}],"key":"GzMW6VG7jC"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"},"next":{"title":"Spherical Polygons and Areas","url":"/notebooks/tutorials/polygon-area","group":"Tutorials"}}},"domain":"http://localhost:3000"}