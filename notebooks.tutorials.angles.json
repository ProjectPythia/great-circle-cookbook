{"version":2,"kind":"Notebook","sha256":"8e06ae0806c1d19604f36f244825042ba776fb37ac77b635f0d92949e3d61692","slug":"notebooks.tutorials.angles","location":"/notebooks/tutorials/5_angles.ipynb","dependencies":[],"frontmatter":{"title":"Angles and Great Circles","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Cora Schneck","given":"Cora","family":"Schneck"},"name":"Cora Schneck","orcid":"0009-0009-1415-5170","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-1"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2025","affiliations":[{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/5_angles.ipynb","thumbnail":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","exports":[{"format":"ipynb","filename":"5_angles.ipynb","url":"/great-circle-cookbook/build/5_angles-af627379d0e3e0253752cead40f7aa36.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/35fc2340d78b684ff21e9bbdfc1c2009.gif","alt":"Illustrating the spherical triangles forming the pentagramma mirificum on Wikipedia","key":"qGjMPYtv61","urlSource":"https://upload.wikimedia.org/wikipedia/commons/4/4e/Pentagramma-mirificum.gif"}],"key":"dQrq7dcYM2"}],"key":"XOubjTQjtW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Angles and Great Circles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KrJNegNoht"}],"identifier":"angles-and-great-circles","label":"Angles and Great Circles","html_id":"angles-and-great-circles","implicit":true,"key":"EG20dDWUdu"}],"key":"ykrNxfZVpY"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"geoi05QHiq"}],"key":"PSMLCFxr7O"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wDOVHPOTdO"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"iPEoBTfg3i"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Multiple great circle paths will always intersection at some point along the globe, and at these points, they form internal angles.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"M3s7EOJwfN"}],"key":"TLidAePADS"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Determine the acute and obtuse angle formed by two great circle paths","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ZIorO1zX8F"}],"key":"vSgC7UftAx"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine the directed angle formed by two great circle paths based on an intersection point","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"qx69sxlEc0"}],"key":"rlJDnlwcOs"}],"key":"ir9V8jL24P"}],"key":"gAo2ceLDvU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eEsCIoTNqy"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"Pjqhg5oNz0"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b1VFKbQDLa"}],"key":"TaMyPbEPg2"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"q3MnJ2ezje"}],"key":"CRZ5xrP0Z9"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Q7xhGSvXNW"}],"key":"YeMKYpkJST"}],"key":"DE2rvK9ZNP"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ol2mB32b9M"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"MiXgLDcEDz"}],"key":"TjqP3U0Wc1"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"gUb9IvPo8Y"}],"key":"aLfxM0QHl7"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RjAmHAZ5F2"}],"key":"jNmQDPlPtV"}],"key":"abv8Gz89KU"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yr948fNPv9"}],"urlSource":"https://foundations.projectpythia.org/core/pandas","key":"ctjM1Ip2A1"}],"key":"OCg2wnL7bN"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"L6opCtvRJe"}],"key":"pEnote6xF7"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iXkm0jiFmD"}],"key":"FvVoYF0LgF"}],"key":"Fsnbjx8YZ0"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SgKRM8LP1p"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"sQufVZNHC4"}],"key":"e6SwXKjuln"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BNZsLWNXz3"}],"key":"yLiVsOPOyF"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WVGcjOZh2T"}],"key":"QfqSPq0LM3"}],"key":"KanZlJ9UZU"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CLlpGY1UH9"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/","key":"KCrSfOvi4D"}],"key":"WAOKkSR54F"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ldWi3S37Dd"}],"key":"nFz313Q3Ub"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IfLoUMvCpV"}],"key":"M0xdMp0ONq"}],"key":"ARxjdKLyj5"}],"key":"Exetaga7dt"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"B1g1h1W9eL"}],"key":"DE3DFe0ZJi"},{"type":"text","value":": 20 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"dAxe6YBdNo"}],"key":"VxIQ1Ldb2N"}],"key":"joNmyVYXHS"}],"key":"DjF6YP3C3x"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ugvxu8mgBK"}],"key":"eP7bbjXCbR"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TpavH3nE0c"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"eBTIiD32X8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rBK72BK22d"}],"key":"u2kzBs8M55"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"cxZPHGpJdf"}],"key":"VRypC1gjyb"}],"key":"fBdODx3WoP"}],"key":"hysORsZrdV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"ALI2PvsL5I"},{"type":"output","id":"XW1USctEccSLkb2IRkyzu","data":[],"key":"DpMcXsvRBd"}],"key":"wXFiCJ8clh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"IWokNduRI5"},{"type":"output","id":"ihRmDtY0VAHlZIYV-fX7L","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude    cart_x    cart_y    cart_z  rho     theta  \\\n0   arecibo   18.3441   -66.7527  0.374643 -0.872119  0.314723  1.0 -1.165054   \n1   boulder   40.0150  -105.2705 -0.201714 -0.738835  0.642988  1.0  1.304276   \n2    boston   42.3601   -71.0589  0.239852 -0.698914  0.673788  1.0 -1.240212   \n3  redwoods   41.4017  -124.0417 -0.419898 -0.621549  0.661334  1.0  0.976657   \n4   houston   29.5518   -95.0982 -0.077303 -0.866469  0.493210  1.0  1.481816   \n\n        phi       polar_x       polar_y       polar_z  \n0  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>0.374643</td>\n      <td>-0.872119</td>\n      <td>0.314723</td>\n      <td>1.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-0.201714</td>\n      <td>-0.738835</td>\n      <td>0.642988</td>\n      <td>1.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>0.239852</td>\n      <td>-0.698914</td>\n      <td>0.673788</td>\n      <td>1.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-0.419898</td>\n      <td>-0.621549</td>\n      <td>0.661334</td>\n      <td>1.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-0.077303</td>\n      <td>-0.866469</td>\n      <td>0.493210</td>\n      <td>1.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"uXLzrONMXf"}],"key":"Myj87NfdaJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"ym1YgY5DM8"},{"type":"output","id":"8dZgMbuAkMXxmy5ULWg_5","data":[],"key":"NKS5Au9swI"}],"key":"NGL9gkG5g4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the acute and obtuse angle formed by two great circle paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LWVF1yhwst"}],"identifier":"determine-the-acute-and-obtuse-angle-formed-by-two-great-circle-paths","label":"Determine the acute and obtuse angle formed by two great circle paths","html_id":"determine-the-acute-and-obtuse-angle-formed-by-two-great-circle-paths","implicit":true,"key":"GIOVMegNlK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"At an intersection point, two great circle paths will form both an acute and obtuse angle.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LflJDkQ1dF"}],"key":"H0e3SRNkz2"}],"key":"qmOG1LgkIl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def angle_between_arcs(start_gc1=None, end_gc1=None,\n                       start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1,\"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2,\"cart_z\"]])\n\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    obtuse_acute_angle = (float(np.rad2deg(angle)), float(((360-(2*np.rad2deg(angle)))/2)))\n    obtuse_angle = np.max(obtuse_acute_angle)\n\n    print(f\"Acute Angle  = {np.min(obtuse_acute_angle)} degrees\")\n    print(f\"Obtuse Angle = {np.max(obtuse_acute_angle)} degrees\")\n    return obtuse_acute_angle","key":"Cd0viSj7aK"},{"type":"output","id":"s3V2JMO_s_jmSvYylMDVS","data":[],"key":"wZroy81LSh"}],"key":"SDItgadgim"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"angle_between_arcs(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")","key":"CHCgxQTHfM"},{"type":"output","id":"f57i3IN3zVvcYii6MA1QT","data":[{"output_type":"stream","name":"stdout","text":"Acute Angle  = 30.646334650419192 degrees\nObtuse Angle = 149.3536653495808 degrees\n"},{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"(149.3536653495808, 30.646334650419192)","content_type":"text/plain"}}}],"key":"osBqIQ3NY6"}],"key":"bijZw83fLC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the directed angle formed by two great circle paths based on an intersection point","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OKeMatEsN0"}],"identifier":"determine-the-directed-angle-formed-by-two-great-circle-paths-based-on-an-intersection-point","label":"Determine the directed angle formed by two great circle paths based on an intersection point","html_id":"determine-the-directed-angle-formed-by-two-great-circle-paths-based-on-an-intersection-point","implicit":true,"key":"rGCDagQiTp"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Overview of Directed Angles","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yVEmzy4MEN"}],"identifier":"overview-of-directed-angles","label":"Overview of Directed Angles","html_id":"overview-of-directed-angles","implicit":true,"key":"CR5XJ1l5pv"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Most angles are undirected angles, where the configuration of the sides that form the angle are not important. A directed angle is useful when the configuration and ordering of the sides is important.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"T4LQICoTB0"}],"key":"VRw1NiLUUC"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For example, three points A, B, and C, define the sides of an angle (A->B and A->C) where A is the intersection point of the two arcs AB and AC. An undirected angle will return an unsigned value. However, a directed angle returns a signed angle, where it is:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fX6eqiaZde"}],"key":"R9Xi3GtXXv"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Positive if C is to the left of the great circle arc AB","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"M7krA6T6Kb"}],"key":"A7zxnSAN8L"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Negative if C is to the right of the great circle arc AB","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"wTdH0L3juP"}],"key":"qkkz1YHkbC"}],"key":"PaG7jfQUdg"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"So, a directed positive angle is counterclockwise, while a negative angle is clockwise.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"dz83Hg8S67"}],"key":"UGQEJR8pbf"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://wiki.artofproblemsolving.com/wiki/index.php/Directed_angles","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"See More: Directed Angles","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"pPnd2jDXKd"}],"urlSource":"https://wiki.artofproblemsolving.com/wiki/index.php/Directed_angles","key":"UsPuVMLwza"}],"key":"bw6A2oZ2AK"}],"key":"AsFGZp0FQC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def directed_angle(b_coords=None, c_coords=None, a_coords=None):\n    # determine cartesian_coordinates from intersect points\n    earth_radius = 6378137  # meters\n    latitude = np.deg2rad(a_coords[0])\n    longitude = np.deg2rad(a_coords[1])\n    cart_x = earth_radius * np.cos(latitude) * np.cos(longitude)\n    cart_y = earth_radius * np.cos(latitude) * np.sin(longitude)\n    cart_z = earth_radius * np.sin(latitude)\n\n    # get normal of planes containing great circles\n    normal_one = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[b_coords, \"cart_x\"],\n                           location_df.loc[b_coords, \"cart_y\"],\n                           location_df.loc[b_coords, \"cart_z\"]])\n    normal_two = np.cross([cart_x,\n                           cart_y,\n                           cart_z],\n                          [location_df.loc[c_coords, \"cart_x\"],\n                           location_df.loc[c_coords, \"cart_y\"],\n                           location_df.loc[c_coords, \"cart_z\"]])\n    # dot product to obtain the angle between the normal planes\n    angle_between_planes = np.dot(normal_one, normal_two)\n    # divide by the magnitude of the vectors, inverse of cos to find angle\n    angle = np.arccos(np.dot(normal_one, normal_two) / \n                    (np.linalg.norm(normal_one) * np.linalg.norm(normal_two)))\n    angle = np.rad2deg(angle)\n\n    # take the cross product of two vectors A->B and A->C\n    v_ab = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[b_coords, \"cart_x\"],\n                     location_df.loc[b_coords, \"cart_y\"],\n                     location_df.loc[b_coords, \"cart_z\"]]])\n    v_ac = np.array([[cart_x,\n                    cart_y,\n                    cart_z],\n                    [location_df.loc[c_coords, \"cart_x\"],\n                     location_df.loc[c_coords, \"cart_y\"],\n                     location_df.loc[c_coords, \"cart_z\"]]])\n\n    cross_prod = np.cross(v_ab, v_ac)\n\n    # inverse of the sign of the cross product\n    sign_angle = -1*np.sign(cross_prod[1][-1]) * angle\n    return float(sign_angle)","key":"vUqXb3ApsF"},{"type":"output","id":"VmTgGPWbgtdJiWO4H4QBr","data":[],"key":"B35ggYGAcc"}],"key":"wcKRr7lB8c"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate Intersection Point Between Two Great Circle Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ItZMGSYhb2"}],"identifier":"calculate-intersection-point-between-two-great-circle-paths","label":"Calculate Intersection Point Between Two Great Circle Paths","html_id":"calculate-intersection-point-between-two-great-circle-paths","implicit":true,"key":"aG3h3n16td"}],"key":"M8gvSXmZEL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# See previous notebook to see how this function is defined\n\ndef intersection_of_gc(start_gc1=None, end_gc1=None,\n                      start_gc2=None, end_gc2=None):\n    # get normal of planes containing great circles\n\n    # cross product of vectors\n    normal_one = np.cross([location_df.loc[start_gc1, \"cart_x\"],\n                           location_df.loc[start_gc1, \"cart_y\"],\n                           location_df.loc[start_gc1, \"cart_z\"]],\n                          [location_df.loc[end_gc1, \"cart_x\"],\n                           location_df.loc[end_gc1, \"cart_y\"],\n                           location_df.loc[end_gc1, \"cart_z\"]])\n    normal_two = np.cross([location_df.loc[start_gc2, \"cart_x\"],\n                           location_df.loc[start_gc2, \"cart_y\"],\n                           location_df.loc[start_gc2, \"cart_z\"]],\n                          [location_df.loc[end_gc2, \"cart_x\"],\n                           location_df.loc[end_gc2, \"cart_y\"],\n                           location_df.loc[end_gc2, \"cart_z\"]])\n\n    # intersection of planes, normal to the poles of each plane\n    line_of_intersection = np.cross(normal_one, normal_two)\n\n    # intersection points (one on each side of the earth)\n    x1 = line_of_intersection /  np.sqrt(line_of_intersection[0]**2 + line_of_intersection[1]**2 + line_of_intersection[2]**2) \n    x2 = -x1\n    lat1 = np.rad2deg(np.arctan2(x1[2], np.sqrt(pow(x1[0],2)+pow(x1[1],2))))\n    lon1 = np.rad2deg(np.arctan2(x1[1], x1[0]))\n    lat2 = np.rad2deg(np.arctan2(x2[2], np.sqrt(pow(x2[0],2)+pow(x2[1],2))))\n    lon2 = np.rad2deg(np.arctan2(x2[1], x2[0]))\n    return [(float(lat1), float(lon1)), (float(lat2), float(lon2))]","key":"oPgZc2bA34"},{"type":"output","id":"qsxDad3di3zNGrp2pRdir","data":[],"key":"dUpqDdBR5d"}],"key":"qjEsxnYI3f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"intersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"johannesburg\", \"reykjavík\")\nprint(f\"Intersection points between great circle arc 1 (Boulder -> Boston) and 2 (Johannesburg -> Reykjavík): \\n{intersect_pts}\")","key":"g0N1cgXrlc"},{"type":"output","id":"HXl_5zu0J4eEk8ixA1yi0","data":[{"output_type":"stream","name":"stdout","text":"Intersection points between great circle arc 1 (Boulder -> Boston) and 2 (Johannesburg -> Reykjavík): \n[(-12.168951714418165, 22.965145304597574), (12.168951714418165, -157.03485469540243)]\n"}],"key":"DriMjx1Mpr"}],"key":"qGBOYAINWR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[0],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"mndIezilNM"},{"type":"output","id":"M4mG8PEda7BI-aS-iuxRv","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"-30.64633465041918","content_type":"text/plain"}}}],"key":"wV1IbWDHnp"}],"key":"FAZdRaQfL3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\ndirected_angle(a_coords=intersect_pts[-1],\n               b_coords=\"boulder\",\n               c_coords=\"reykjavík\")","key":"KuSXcSybMI"},{"type":"output","id":"wYu0o5VMliQ3hmY2t-Z3M","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"-30.646334650419192","content_type":"text/plain"}}}],"key":"DvDnnYqCqP"}],"key":"IEGfBpW79x"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Directed Angle","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tAq4VgJJ6M"}],"identifier":"plot-directed-angle","label":"Plot Directed Angle","html_id":"plot-directed-angle","implicit":true,"key":"u71A1U1A1V"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A negative directed angle is clockwise, while a positive directed angle is counterclockwise. This can be easier to understand when plotted.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fbApnPuhjy"}],"key":"cyV0eytioV"}],"key":"LL4tcEuKOB"},{"type":"block","kind":"notebook-code","data":{"jupyter":{"source_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"# See previous section for more information\n\n# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_lat=None, start_lon=None,\n                               end_lat=None, end_lon=None,\n                               number_of_lon_pts=360):\n    lon1 = np.deg2rad(start_lon)\n    lat1 = np.deg2rad(start_lat)\n    lon2 = np.deg2rad(end_lon)\n    lat2 = np.deg2rad(end_lat)\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon\n\ndef interpolate_points_along_gc(lat_start=None, lon_start=None,\n                                lat_end=None, lon_end=None,\n                                distance_between_points_meter=0): \n    geodesic = Geod(ellps=\"WGS84\")\n    \n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points\n\ndef arc_points(start_lat=None, start_lon=None,\n               end_lat=None, end_lon=None,\n               n_total_points=10):\n\n    geodesic = Geod(ellps=\"WGS84\")\n\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_lat, start_lon,\n                                                   end_lat, end_lon,\n                                                    distance_between_points_meter)\n    return points_along_arc","key":"avoTu0y314"},{"type":"output","id":"1udE8EttwiHg88H2NgZ-f","data":[],"key":"BTFp115kg6"}],"key":"zUfiDAig7m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_gc_directed_angle(a_coords=None, b_coords=None,c_coords=None,\n                           angle=None,\n                           lon_west=-180, lon_east=180,\n                           lat_south=-90, lat_north=90):\n    # A = intersect point\n    # A->B and A->C where C is the angle to determine sign\n\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # Plot Great Circle Path\n    gc_one_lat_pts = generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[b_coords, \"latitude\"],\n                                                end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_one_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n    gc_two_lat_pts =  generate_latitude_along_gc(start_lat=a_coords[0],\n                                                start_lon=a_coords[1],\n                                                end_lat=location_df.loc[c_coords, \"latitude\"],\n                                                end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_lat_pts] # longitude\n    latitudes = [x[0] for x in gc_two_lat_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Plot Great Circle Arc\n    gc_one_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[b_coords, \"latitude\"],\n                               end_lon=location_df.loc[b_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_one_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_one_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"pink\")\n    gc_two_arc_pts = arc_points(start_lat=a_coords[0],\n                               start_lon=a_coords[1],\n                               end_lat=location_df.loc[c_coords, \"latitude\"],\n                               end_lon=location_df.loc[c_coords, \"longitude\"])\n    longitudes = [x[1] for x in gc_two_arc_pts] # longitude\n    latitudes = [x[0] for x in gc_two_arc_pts] # latitude\n    plt.plot(longitudes, latitudes, c=\"green\")\n\n    # plot A, B, C points in different colors\n    fz = 30\n    offset = 3\n    plt.scatter(a_coords[1], a_coords[0], s=100, c=\"red\", label=\"A\")\n    ax.annotate(\"A\", (a_coords[1]+offset, a_coords[0]+offset), fontsize=fz)\n    plt.scatter(location_df.loc[b_coords, \"longitude\"],\n               location_df.loc[b_coords, \"latitude\"],\n                s=100, c=\"blue\", label=\"B\")\n    ax.annotate(\"B\", (location_df.loc[b_coords, \"longitude\"]-(4*offset),\n                      location_df.loc[b_coords, \"latitude\"]-offset),\n                        fontsize=fz)\n    plt.scatter(location_df.loc[c_coords, \"longitude\"],\n                location_df.loc[c_coords, \"latitude\"], \n                s=100, c=\"cyan\", label=\"C\")\n    ax.annotate(\"C\", (location_df.loc[c_coords, \"longitude\"]+offset,\n                      location_df.loc[c_coords, \"latitude\"]+offset),\n                        fontsize=fz)\n    ax.quiver(location_df.loc[b_coords, \"longitude\"],\n              location_df.loc[b_coords, \"latitude\"], \n              (location_df.loc[c_coords, \"longitude\"]-location_df.loc[b_coords, \"longitude\"]), \n              (location_df.loc[c_coords, \"latitude\"]-location_df.loc[b_coords, \"latitude\"]), \n              angles='xy', scale_units='xy', scale=1)    \n    \n    if angle > 0: \n        sign = \"Counterclockwise\"\n    if angle < 0: \n        sign = \"Clockwise\"\n    if angle == 0:\n        sign = \"Colinear\"\n    plt.title(f\"Direction = {sign}, {angle}\")\n    plt.legend()\n    plt.show()","key":"oz3tpU9VzC"},{"type":"output","id":"aRz4zKeAi-SapSQKEPEeg","data":[],"key":"pTRb7RljvC"}],"key":"MfkMArzXFn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"V43claY93N"},{"type":"output","id":"GRblIFMClTQEREFcyGPcj","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"81a30f9132498ec8db96c7e4c0d0e82e","path":"/great-circle-cookbook/build/81a30f9132498ec8db96c7e4c0d0e82e.png"}}}],"key":"nwpcZalPwz"}],"key":"DS2izQM4nG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"boulder\", \"boston\", \"reykjavík\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"boulder\",\n                              c_coords=\"reykjavík\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"boulder\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"APXhLSC62C"},{"type":"output","id":"F1QdyrsL8jxwyc1TDSdEl","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2d6b43eca0a8abe62b4ba331947086e6","path":"/great-circle-cookbook/build/2d6b43eca0a8abe62b4ba331947086e6.png"}}}],"key":"Y1kW80xnHK"}],"key":"WNjOXuIVRc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[0],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[0],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"SnC5gRiPbh"},{"type":"output","id":"tdh36Qt5b8JbKP7geRbRZ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7df35105c879882cbc32941c2a4bee8f","path":"/great-circle-cookbook/build/7df35105c879882cbc32941c2a4bee8f.png"}}}],"key":"iEvRGECe92"}],"key":"OH10SxITsR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Arcs defined as A->B and A->C where A is the intersection\nintersect_pts = intersection_of_gc(\"zambezi\", \"boston\", \"greenwich\", \"johannesburg\")\n\ndirect_angle = directed_angle(a_coords=intersect_pts[-1],\n                              b_coords=\"zambezi\",\n                              c_coords=\"greenwich\")\n\nplot_gc_directed_angle(a_coords=intersect_pts[-1],\n                       b_coords=\"zambezi\",\n                       c_coords=\"reykjavík\",\n                       angle=direct_angle)","key":"VcedLkd3L9"},{"type":"output","id":"giF0Bn3f-Z-sBG0SADUGx","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"00bc43904868070afedadb1f9bc87582","path":"/great-circle-cookbook/build/00bc43904868070afedadb1f9bc87582.png"}}}],"key":"T1vXa01NkQ"}],"key":"qRUqPXxoo6"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Xqjo7wDDW7"}],"key":"vCgKWhaYgj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cBx4mFVy0h"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"wI6VgNPynK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this notebook, we determined how to find the angles and directed angle formed by the intersection of two great circle paths.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"w5XETmtRXx"}],"key":"mjOj9YH66Q"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vqQNtqIDb3"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"ef8qxnOBnN"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Up next, we will cover how to calculate spherical polygons and the area of spherical polygons.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"q4ivq3cySs"}],"key":"Ng3wideyM0"}],"key":"C6FErnIGYj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fVzh4CXR0U"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"uSmaxzr1NZ"}],"key":"p4qYxKGlWQ"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bjq1OgBN2H"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"E8PSBbf1WP"}],"key":"RRXHGWLQQa"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dTW1TJ49SG"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"HzbxVl9PEE"}],"key":"lwdbQ2aVdW"}],"key":"C84nyaRRSM"}],"key":"pDQD7sG0jS"}],"key":"uY5ndW94r1"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"},"next":{"title":"Spherical Polygons and Areas","url":"/notebooks/tutorials/polygon-area","group":"Tutorials"}}},"domain":"http://localhost:3000"}