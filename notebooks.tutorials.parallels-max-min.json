{"version":2,"kind":"Notebook","sha256":"34b6dcf9681eca26e069729b704ace2fbac76e1ce57a7f8c9cfe6f205f803115","slug":"notebooks.tutorials.parallels-max-min","location":"/notebooks/tutorials/3_parallels_max_min.ipynb","dependencies":[],"frontmatter":{"title":"Great Circles and Parallels","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/3_parallels_max_min.ipynb","thumbnail":"/great-circle-cookbook/build/0425273bd8f62ee885fd0d5f673b76df.gif","exports":[{"format":"ipynb","filename":"3_parallels_max_min.ipynb","url":"/great-circle-cookbook/build/3_parallels_max_min-3148ef2410e6c74af711790b654709b1.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/0425273bd8f62ee885fd0d5f673b76df.gif","alt":"Ship on waves gif","key":"ZYkRqVBfqr","urlSource":"https://cdn1.byjus.com/wp-content/uploads/blog/2021/01/21071038/giphy-1.gif"}],"key":"ZukNuj6AJQ"}],"key":"HfYnpsgPS8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great Circles and Parallels","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bRQ0k6hPK8"}],"identifier":"great-circles-and-parallels","label":"Great Circles and Parallels","html_id":"great-circles-and-parallels","implicit":true,"key":"HdvKHwIngi"}],"key":"a68NbjpDZ9"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xCPvIZWTIo"}],"key":"LrUq7PtAcc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hjs0iDpeJa"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"IE4JOCjNHq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A valid great circle path (that is not a path around the equator) will cross a maximum and minimum latitude.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"G4DcQENGR0"}],"key":"qbbwntZmID"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine the maximum latitude on a Great Circle Path","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"J8j2wgKaX4"}],"key":"t5Tl9dz0KV"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine the minimum latitude on a Great Great path","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"m3mNAJRe5e"}],"key":"tQbZ34iog2"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Determine when a great circle path crosses parallels (TODO)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Wbvtvy6YdT"}],"key":"NijrrSDwWX"}],"key":"N2kTMZ6IWD"}],"key":"BE4RI2RdA1"}],"key":"NXf80ANOgT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mgHcgu9Kf7"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"SBhDaylhb7"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hXi9hV1nTf"}],"key":"JIbfwRoVod"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KRP3ew2mG3"}],"key":"S9CSifY03V"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WNXVF01cNR"}],"key":"BEBJv5TEGy"}],"key":"uadfiUEGT4"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Jv746PTrkI"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"uhZfZ9aiTv"}],"key":"sfm2jNds5Q"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Ms5GkdOaEB"}],"key":"SCtQeQlu6t"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"r1JozvR8Ff"}],"key":"zQgd68nsdZ"}],"key":"JTxyDsBlEn"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"sxPKQ9CsLx"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"n7CBnZFts4"}],"key":"YRv7LrsNYV"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"AZu3VbVVxZ"}],"key":"H5i9QfEWHT"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Cr6XKvCNtv"}],"key":"APrD2Jtbxh"}],"key":"CN1ejH0V3f"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"F9IgmU3Y3v"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"RPtHvzv7eF"}],"key":"B8GaPgoapY"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"HSn3PxHMNg"}],"key":"dM5edSI9S8"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"mzJrbXjX5o"}],"key":"s8Xatt0Nah"}],"key":"ZDUxJFb0vm"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"gXFqWwuaEI"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"buk0ywyd0w"}],"key":"KNXx1FLvr3"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"InXlANKdmF"}],"key":"Iaa5E9fFKy"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"qBdUbVTpCh"}],"key":"mpf7UR8DN0"}],"key":"GP00lYzRda"}],"key":"LqDDiECaaB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"nw5ihvmlDO"}],"key":"NzISs1IMAJ"},{"type":"text","value":": 30 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LqGYHPk6bm"}],"key":"fdC2RtDI7M"}],"key":"F4aPcmeNi9"}],"key":"mfRa99jqz2"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kcu3bXMP2S"}],"key":"yu359sUr6M"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s1YJDMcdx0"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"pANB92xyfv"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fAgHznqFRo"}],"key":"IOUlIxoNSA"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SsnxuUmIR5"}],"key":"onAbUUqoj7"}],"key":"RO1lU8PRGJ"}],"key":"RKCBomv2ie"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"QCJgtrfTkI"},{"type":"output","id":"6ev4FVmxKQ7MPoHtW7eQc","data":[],"key":"rENVAtotAf"}],"key":"r5UUk3XbdM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"zYM4qosWhl"},{"type":"output","id":"7sEtkEJahg1zORYAJpf-1","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"wlqZIo0O70"}],"key":"R0frVT9pT7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"KGA42ZC6HB"},{"type":"output","id":"xwwUtoZjAAPAXVHWkHKpd","data":[],"key":"eJ2mvL8Z5W"}],"key":"QyAIHiurqx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s8f44sZgvz"}],"identifier":"maximum-latitude-on-a-great-circle-path","label":"Maximum Latitude on a Great Circle Path","html_id":"maximum-latitude-on-a-great-circle-path","implicit":true,"key":"MKlWOM4OL3"}],"key":"GZwKRngbfR"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We have previously determined an equation to derive a great circle path from intermediate points from two points on a great circle arc.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vTDp49RZiA"}],"key":"D5koI9w6pM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Without additional calculations, we can use a list of points along the great circle path to find the maximum location of the maximum and minimum.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uCXiKcpOdk"}],"key":"HVMP1ioCr5"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By default, the equation below will determine 360 points along longitude, so the output will only have a resolution of 1 degree. However, by defining the longitude with more points, the resolution increases.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"I5ga5NRleu"}],"key":"OVisqsMOKe"}],"key":"dnx56ddP0x"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon","key":"s5F6o19LM7"},{"type":"output","id":"a5JYB76LFHQdiuQv6Zd0u","data":[],"key":"vvj0hRrPQm"}],"key":"d0ABdXMis1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Max Latitude (within 1 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"Sck9gVDHmW"},{"type":"output","id":"WZCoAyyI7TzUTGRv23c-Z","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 1 degree): (np.float64(42.750406941471915), np.float64(-81.0))\n"}],"key":"XobhLY8viU"}],"key":"y0lWKpFaTj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Max Latitude (within 0.5 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"xbzBQZMM8o"},{"type":"output","id":"XqmyDeNfzSzT5q9f0Zh0T","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 0.5 degree): (np.float64(42.751388471834524), np.float64(-80.5))\n"}],"key":"FnOvCSWku1"}],"key":"XBrYnvzLXz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Max Latitude (within 0.3 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"wOsdUwDzxO"},{"type":"output","id":"4JPsXS9p9kpHkJWTiS8Xt","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 0.3 degree): (np.float64(42.751302958796096), np.float64(-80.66666666666667))\n"}],"key":"gCGvVLk6im"}],"key":"fAwmg05i0N"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Maximum","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kT3eYHMfbV"}],"identifier":"plot-maximum","label":"Plot Maximum","html_id":"plot-maximum","implicit":true,"key":"cC15PvHyJ0"}],"key":"y81uzdHvE4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_coordinate_max_min(great_circle_pts=None,\n                            max_coord=None, min_coord=None,\n                            title=None):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -180, 180, -90, 90\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n    \n    # Plot Great Circle Latitude/Longitude Location\n    longitudes = [x[1] for x in great_circle_pts] # longitude\n    latitudes = [x[0] for x in great_circle_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Overly Max/Min Coordinates\n    if max_coord is not None:\n        plt.scatter([max_coord[1]], [max_coord[0]], s=100, c=\"red\")\n    if min_coord is not None:\n        plt.scatter([min_coord[1]], [min_coord[0]], s=100, c=\"green\")\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(title)\n    plt.show()","key":"tuuUCBswXA"},{"type":"output","id":"gZNhL2NbvOJ7ZH7Rj7wtv","data":[],"key":"uPuSur68e0"}],"key":"iTp88QILDi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"xttTdA3OeK"},{"type":"output","id":"LUUk1iwlOowBVcxqO2WTr","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31merror\u001b[39m                                     Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/formatters.py:402\u001b[39m, in \u001b[36mBaseFormatter.__call__\u001b[39m\u001b[34m(self, obj)\u001b[39m\n\u001b[32m    400\u001b[39m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[32m    401\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m402\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mprinter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    403\u001b[39m \u001b[38;5;66;03m# Finally look for special method names\u001b[39;00m\n\u001b[32m    404\u001b[39m method = get_real_method(obj, \u001b[38;5;28mself\u001b[39m.print_method)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/pylabtools.py:170\u001b[39m, in \u001b[36mprint_figure\u001b[39m\u001b[34m(fig, fmt, bbox_inches, base64, **kwargs)\u001b[39m\n\u001b[32m    167\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mbackend_bases\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m FigureCanvasBase\n\u001b[32m    168\u001b[39m     FigureCanvasBase(fig)\n\u001b[32m--> \u001b[39m\u001b[32m170\u001b[39m \u001b[43mfig\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcanvas\u001b[49m\u001b[43m.\u001b[49m\u001b[43mprint_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbytes_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    171\u001b[39m data = bytes_io.getvalue()\n\u001b[32m    172\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m fmt == \u001b[33m'\u001b[39m\u001b[33msvg\u001b[39m\u001b[33m'\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/backend_bases.py:2155\u001b[39m, in \u001b[36mFigureCanvasBase.print_figure\u001b[39m\u001b[34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[39m\n\u001b[32m   2152\u001b[39m     \u001b[38;5;66;03m# we do this instead of `self.figure.draw_without_rendering`\u001b[39;00m\n\u001b[32m   2153\u001b[39m     \u001b[38;5;66;03m# so that we can inject the orientation\u001b[39;00m\n\u001b[32m   2154\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(renderer, \u001b[33m\"\u001b[39m\u001b[33m_draw_disabled\u001b[39m\u001b[33m\"\u001b[39m, nullcontext)():\n\u001b[32m-> \u001b[39m\u001b[32m2155\u001b[39m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfigure\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2156\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m bbox_inches:\n\u001b[32m   2157\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches == \u001b[33m\"\u001b[39m\u001b[33mtight\u001b[39m\u001b[33m\"\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:94\u001b[39m, in \u001b[36m_finalize_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer, *args, **kwargs)\u001b[39m\n\u001b[32m     92\u001b[39m \u001b[38;5;129m@wraps\u001b[39m(draw)\n\u001b[32m     93\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdraw_wrapper\u001b[39m(artist, renderer, *args, **kwargs):\n\u001b[32m---> \u001b[39m\u001b[32m94\u001b[39m     result = \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     95\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m renderer._rasterizing:\n\u001b[32m     96\u001b[39m         renderer.stop_rasterizing()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/figure.py:3257\u001b[39m, in \u001b[36mFigure.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3254\u001b[39m             \u001b[38;5;66;03m# ValueError can occur when resizing a window.\u001b[39;00m\n\u001b[32m   3256\u001b[39m     \u001b[38;5;28mself\u001b[39m.patch.draw(renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3257\u001b[39m     \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3258\u001b[39m \u001b[43m        \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3260\u001b[39m     renderer.close_group(\u001b[33m'\u001b[39m\u001b[33mfigure\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3261\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/geoaxes.py:524\u001b[39m, in \u001b[36mGeoAxes.draw\u001b[39m\u001b[34m(self, renderer, **kwargs)\u001b[39m\n\u001b[32m    519\u001b[39m         \u001b[38;5;28mself\u001b[39m.imshow(img, extent=extent, origin=origin,\n\u001b[32m    520\u001b[39m                     transform=factory.crs, *factory_args[\u001b[32m1\u001b[39m:],\n\u001b[32m    521\u001b[39m                     **factory_kwargs)\n\u001b[32m    522\u001b[39m \u001b[38;5;28mself\u001b[39m._done_img_factory = \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m524\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/axes/_base.py:3216\u001b[39m, in \u001b[36m_AxesBase.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3213\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m artists_rasterized:\n\u001b[32m   3214\u001b[39m     _draw_rasterized(\u001b[38;5;28mself\u001b[39m.get_figure(root=\u001b[38;5;28;01mTrue\u001b[39;00m), artists_rasterized, renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3216\u001b[39m \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3217\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mroot\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3219\u001b[39m renderer.close_group(\u001b[33m'\u001b[39m\u001b[33maxes\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3220\u001b[39m \u001b[38;5;28mself\u001b[39m.stale = \u001b[38;5;28;01mFalse\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/feature_artist.py:185\u001b[39m, in \u001b[36mFeatureArtist.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m    180\u001b[39m     geoms = \u001b[38;5;28mself\u001b[39m._feature.geometries()\n\u001b[32m    181\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    182\u001b[39m     \u001b[38;5;66;03m# For efficiency on local maps with high resolution features (e.g\u001b[39;00m\n\u001b[32m    183\u001b[39m     \u001b[38;5;66;03m# from Natural Earth), only create paths for geometries that are\u001b[39;00m\n\u001b[32m    184\u001b[39m     \u001b[38;5;66;03m# in view.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m185\u001b[39m     geoms = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_feature\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    187\u001b[39m stylised_paths = {}\n\u001b[32m    188\u001b[39m \u001b[38;5;66;03m# Make an empty placeholder style dictionary for when styler is not\u001b[39;00m\n\u001b[32m    189\u001b[39m \u001b[38;5;66;03m# used.  Freeze it so that we can use it as a dict key.  We will need\u001b[39;00m\n\u001b[32m    190\u001b[39m \u001b[38;5;66;03m# to unfreeze all style dicts with dict(frozen) before passing to mpl.\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:309\u001b[39m, in \u001b[36mNaturalEarthFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    302\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    303\u001b[39m \u001b[33;03mReturns an iterator of shapely geometries that intersect with\u001b[39;00m\n\u001b[32m    304\u001b[39m \u001b[33;03mthe given extent.\u001b[39;00m\n\u001b[32m    305\u001b[39m \u001b[33;03mThe extent is assumed to be in the CRS of the feature.\u001b[39;00m\n\u001b[32m    306\u001b[39m \u001b[33;03mIf extent is None, the method returns all geometries for this dataset.\u001b[39;00m\n\u001b[32m    307\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    308\u001b[39m \u001b[38;5;28mself\u001b[39m.scaler.scale_from_extent(extent)\n\u001b[32m--> \u001b[39m\u001b[32m309\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:112\u001b[39m, in \u001b[36mFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    109\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m extent \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np.isnan(extent[\u001b[32m0\u001b[39m]):\n\u001b[32m    110\u001b[39m     extent_geom = sgeom.box(extent[\u001b[32m0\u001b[39m], extent[\u001b[32m2\u001b[39m],\n\u001b[32m    111\u001b[39m                             extent[\u001b[32m1\u001b[39m], extent[\u001b[32m3\u001b[39m])\n\u001b[32m--> \u001b[39m\u001b[32m112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m (geom \u001b[38;5;28;01mfor\u001b[39;00m geom \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m\n\u001b[32m    113\u001b[39m             geom \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m extent_geom.intersects(geom))\n\u001b[32m    114\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    115\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m.geometries()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:294\u001b[39m, in \u001b[36mNaturalEarthFeature.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    290\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m key \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m _NATURAL_EARTH_GEOM_CACHE:\n\u001b[32m    291\u001b[39m     path = shapereader.natural_earth(resolution=\u001b[38;5;28mself\u001b[39m.scale,\n\u001b[32m    292\u001b[39m                                      category=\u001b[38;5;28mself\u001b[39m.category,\n\u001b[32m    293\u001b[39m                                      name=\u001b[38;5;28mself\u001b[39m.name)\n\u001b[32m--> \u001b[39m\u001b[32m294\u001b[39m     geometries = \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshapereader\u001b[49m\u001b[43m.\u001b[49m\u001b[43mReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    295\u001b[39m     _NATURAL_EARTH_GEOM_CACHE[key] = geometries\n\u001b[32m    296\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/shapereader.py:164\u001b[39m, in \u001b[36mBasicReader.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    152\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mgeometries\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m    153\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    154\u001b[39m \u001b[33;03m    Return an iterator of shapely geometries from the shapefile.\u001b[39;00m\n\u001b[32m    155\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m    162\u001b[39m \n\u001b[32m    163\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m164\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_reader\u001b[49m\u001b[43m.\u001b[49m\u001b[43miterShapes\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_bbox\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    165\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Skip the shape that can not be represented as geometry.\u001b[39;49;00m\n\u001b[32m    166\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshapeType\u001b[49m\u001b[43m \u001b[49m\u001b[43m!=\u001b[49m\u001b[43m \u001b[49m\u001b[43mshapefile\u001b[49m\u001b[43m.\u001b[49m\u001b[43mNULL\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    167\u001b[39m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01myield\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43msgeom\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1483\u001b[39m, in \u001b[36mReader.iterShapes\u001b[39m\u001b[34m(self, bbox)\u001b[39m\n\u001b[32m   1479\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.numShapes:\n\u001b[32m   1480\u001b[39m     \u001b[38;5;66;03m# Iterate exactly the number of shapes from shx header\u001b[39;00m\n\u001b[32m   1481\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m xrange(\u001b[38;5;28mself\u001b[39m.numShapes):\n\u001b[32m   1482\u001b[39m         \u001b[38;5;66;03m# MAYBE: check if more left of file or exit early? \u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1483\u001b[39m         shape = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m__shape\u001b[49m\u001b[43m(\u001b[49m\u001b[43moid\u001b[49m\u001b[43m=\u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1484\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m shape:\n\u001b[32m   1485\u001b[39m             \u001b[38;5;28;01myield\u001b[39;00m shape\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1340\u001b[39m, in \u001b[36mReader.__shape\u001b[39m\u001b[34m(self, oid, bbox)\u001b[39m\n\u001b[32m   1338\u001b[39m \u001b[38;5;66;03m# Read points - produces a list of [x,y] values\u001b[39;00m\n\u001b[32m   1339\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m nPoints:\n\u001b[32m-> \u001b[39m\u001b[32m1340\u001b[39m     flat = \u001b[43munpack\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m<\u001b[39;49m\u001b[38;5;132;43;01m%s\u001b[39;49;00m\u001b[33;43md\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m%\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m2\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m \u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m16\u001b[39;49m\u001b[43m*\u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1341\u001b[39m     record.points = \u001b[38;5;28mlist\u001b[39m(izip(*(\u001b[38;5;28miter\u001b[39m(flat),) * \u001b[32m2\u001b[39m))\n\u001b[32m   1342\u001b[39m \u001b[38;5;66;03m# Read z extremes and values\u001b[39;00m\n\n\u001b[31merror\u001b[39m: unpack requires a buffer of 1216 bytes","ename":"error","evalue":"unpack requires a buffer of 1216 bytes"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"}}}],"key":"b94UzYR9bb"}],"key":"w8kNHOcANT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"CHJOcqLfnU"},{"type":"output","id":"fg-l_6-LSeWfi92zUH0zG","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7d2f3a532cb1ca29c23df5b60e8de9ab","path":"/great-circle-cookbook/build/7d2f3a532cb1ca29c23df5b60e8de9ab.png"}}}],"key":"S9lxyacsk2"}],"key":"qZ2n31SaF5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O8DPuHTuWE"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula","implicit":true,"key":"VrjDrDwtnW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"R6afCSiyzC"}],"urlSource":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","data":{"page":"Clairaut%27s_relation_(differential_geometry)","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"bAgOo4BYJ4"},{"type":"text","value":" (Clairaut’s equation or Clairaut’s relation) is a differential equation which defines the relationship between the latitude, φ, and the true course (bearing, θ) where:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RDq67rzm0y"}],"key":"H4aX7eugBx"},{"type":"math","value":"sin(θ) * cos(φ) = \\text{constant}","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>constant</mtext></mrow><annotation encoding=\"application/x-tex\">sin(θ) * cos(φ) = \\text{constant}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord text\"><span class=\"mord\">constant</span></span></span></span></span></span>","enumerator":"1","key":"kdqJfqa2uY"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"So, for any two points (A and B) along the great circle:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"S4iuzWIZ27"}],"key":"XSIpl2nOyp"},{"type":"math","value":"sin(θA) * cos(φA) = sin(θB) * cos(φB)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sin(θA) * cos(φA) = sin(θB) * cos(φB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">θB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">φB</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"2","key":"n4ecCai0Zq"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"So, to solve for the maximum latitude the true course should be when 90 and 270 degrees on the unit sphere where for ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"nGiK4sSHzq"},{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"yB9hwyvzEp"}],"key":"Wn67OFUWRA"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"obKdnOUjGj"}],"key":"VBtsaVWnvj"},{"type":"math","value":"\\text{max latitude} = acos(|sin(θ) * cos(φ)|)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>max latitude</mtext><mo>=</mo><mi>a</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{max latitude} = acos(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">max latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"3","key":"i4j3Oul7Ri"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"For the purpose of this example, we will use ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"EhIKoUmOFW"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"vtGIRP9rNM"},{"type":"text","value":" geodesic to determine the bearing based on a great circle arc, but consult previous sections if you want to determine bearing mathetically based on the unit sphere instead of the ellipsoid.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"vRw3Nrr0kQ"}],"key":"g7BZ8Jpk7b"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Important Note","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"GMTor0QaCT"}],"key":"QmiKztffP6"}],"key":"HALte2uX4n"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula works from unit sphere, and as a result, is subject to errors (about 3%, about +/- 11 degrees).","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"M2oVTVWKdn"}],"key":"xXrzNWzjLk"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm#Clairaut","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Ed Williams: Clairaut’s Formula","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"KVOvNwYdtl"}],"urlSource":"https://edwilliams.org/avform147.htm#Clairaut","key":"MHcuJysrtK"}],"key":"s4KiGD5s25"}],"key":"KmxY0VwlWn"}],"key":"kAPjSqZvku"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_max(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    max_lat = np.arccos(np.abs(np.sin(fwd_bearing) * np.cos(start_lat)))\n    return np.rad2deg(max_lat)","key":"mxx64JCP8X"},{"type":"output","id":"zXZU0PJZzPAUoWq_Krbg2","data":[],"key":"IGawwNO2CQ"}],"key":"eVhdf03Uqk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"max_lat = clairaut_formula_max(\"boulder\", \"boston\")\nprint(f\"Max latitude from Boulder to Boston: {max_lat}\")","key":"rlUQJmQR4b"},{"type":"output","id":"5tEacZNaNrjoIeCTkZUkt","data":[{"output_type":"stream","name":"stdout","text":"Max latitude from Boulder to Boston: 75.50718325253314\n"}],"key":"RbZCRwogvI"}],"key":"hgGPriKT8B"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r6K2qPKmBW"}],"identifier":"minimum-latitude-on-a-great-circle-path","label":"Minimum Latitude on a Great Circle Path","html_id":"minimum-latitude-on-a-great-circle-path","implicit":true,"key":"lw6AVZVtmX"}],"key":"w0L9sBh6uy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Antipodal Point of Max (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N7cEjkpfHQ"}],"identifier":"antipodal-point-of-max-todo","label":"Antipodal Point of Max (TODO)","html_id":"antipodal-point-of-max-todo","implicit":true,"key":"eGFXmIeEuo"}],"key":"Nm9gwh3IT6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def antipodal(latitude=None, longitude=None):\n    anti_lat = -1 * latitude\n    if longitude > 0:\n        anti_lon = longitude - 180\n    else:\n        anti_lon = longitude + 180\n    return (anti_lat, anti_lon)","key":"T1q0Xxw8Uk"},{"type":"output","id":"UEzz64Yt3J7OZDpgRdBI8","data":[],"key":"ucI9xqHmXn"}],"key":"uezwqap1GU"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Like finding maximum from a list of great circle path, the smallest latitude can be found by analysing the list for the smallest latitude point.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NyqHjPcwNZ"}],"key":"NpNQodKMPJ"}],"key":"NGWMsk6L8M"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nprint(max_lat_lon)\nantipodal(max_lat_lon[0], max_lat_lon[1])","key":"CnhDPA9uZ2"},{"type":"output","id":"RCbt1frVqzwtng0iiZnK3","data":[{"output_type":"stream","name":"stdout","text":"(np.float64(59.410929434369436), np.float64(-166.0))\n"},{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"(np.float64(-59.410929434369436), np.float64(14.0))","content_type":"text/plain"}}}],"key":"xJUZwsRDOe"}],"key":"yRoNRxEdnL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude along Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AOnCX0uDue"}],"identifier":"minimum-latitude-along-great-circle-path","label":"Minimum Latitude along Great Circle Path","html_id":"minimum-latitude-along-great-circle-path","implicit":true,"key":"XE7zqg2jdy"}],"key":"ifgDJlHyaI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Min Latitude (within 1 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"TW0qUnhrJe"},{"type":"output","id":"HI3nVXktS9kLFQxDXMRDP","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 1 degree): (np.float64(-42.75040694147194), np.float64(99.0))\n"}],"key":"OGEFBonStc"}],"key":"YdCIDqFSqD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Min Latitude (within 0.5 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"Niu8GO55T0"},{"type":"output","id":"UXGXHWOaBf0pEq-oqWYdQ","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.5 degree): (np.float64(-42.75138847183453), np.float64(99.5))\n"}],"key":"qONF2x5QYL"}],"key":"SzU9rbsNS2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Min Latitude (within 0.3 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"ODmKvW8N9P"},{"type":"output","id":"fiysv8NKfGf_fgwxzCRdO","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.3 degree): (np.float64(-42.7513029587961), np.float64(99.33333333333331))\n"}],"key":"cEN7aLQU7G"}],"key":"fSXbxEKo6A"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmin_lat_lon = min(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            min_coord=min_lat_lon,\n                            title=f\"Min Latitude located at {min_lat_lon}\")","key":"IALtEtg0JE"},{"type":"output","id":"K-91Wxy2MJUs6udnz-pmc","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"48cd0e75238d32272560c26dd35f34fb","path":"/great-circle-cookbook/build/48cd0e75238d32272560c26dd35f34fb.png"}}}],"key":"xksaLgJm2f"}],"key":"flmxmd0LFL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DKv2Eri0bk"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula-1","implicit":true,"key":"au9vdVcWmV"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To solve for the minimum, the true course should be when 0 and 180 degrees on the unit sphere where for ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VtUYabratZ"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yR4Btz3o7p"}],"key":"IUd54BQ7Jb"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Zq2NNo8IPe"}],"key":"kUI6zGah3N"},{"type":"math","value":"\\text{min latitude} = asin(|sin(θ) * cos(φ)|)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>min latitude</mtext><mo>=</mo><mi>a</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{min latitude} = asin(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">min latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"4","key":"JN2yPfi5BO"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The southernmost point is the antipode to the northernmost (max) latitude.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ZmAvm3lxGL"}],"key":"pSez8mLY9q"}],"key":"P2VtBADECp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_min(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut Formula\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    min_lat = np.arcsin(np.abs(np.cos(fwd_bearing) * np.sin(start_lat)))\n    return np.rad2deg(min_lat)","key":"laCbxveDkb"},{"type":"output","id":"cX2yF9YSlZykhmVoOy3PB","data":[],"key":"cWqT8Bs0sP"}],"key":"qgX7iRFLnn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"min_lat = clairaut_formula_min(\"boulder\", \"boston\")\nprint(f\"Min latitude along great circle path from Boulder to Boston: {min_lat}\")","key":"LItXhHlAMa"},{"type":"output","id":"WyFIXIHZqRkwWPYyWv90p","data":[{"output_type":"stream","name":"stdout","text":"Min latitude along great circle path from Boulder to Boston: 17.49699780715814\n"}],"key":"bLwWs5qQ8a"}],"key":"xDs57A45a0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine when great circle path cross parallels (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eDbh3kDCh7"}],"identifier":"determine-when-great-circle-path-cross-parallels-todo","label":"Determine when great circle path cross parallels (TODO)","html_id":"determine-when-great-circle-path-cross-parallels-todo","implicit":true,"key":"WLzDQt0FzQ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Determine the longitude when a great circle crosses a given latitude parrellel.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DLDGKV7gsD"}],"key":"AX4X9Oyil3"}],"key":"BDx5AjJg5e"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GhmzCXrDVj"}],"key":"pzhxc1PRbx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JTWX4gz7R8"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"eWk3dirund"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the coordinates when a great circle path crosses a specific parallel as well as the maximumn and minimum latitude coordinates.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"OqCoT4EzKv"}],"key":"ho7RKDPhCA"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ej2Ss2rKlV"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"z2z8BHJyDI"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intersections of Great Circles.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Yi93n3H8Bd"}],"key":"oE5rDxaQIa"}],"key":"Ugl5G83p5S"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T20pZpp9n0"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"SKaq8ouAOM"}],"key":"ap4sJGF1rS"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r2qc0tDVUc"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"cnWL8vybZc"}],"key":"SUUmfVnbgJ"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qG6npdxOuc"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"zQs9pEzbfV"}],"key":"OPEjHDUGbN"}],"key":"NTEHsS5te5"}],"key":"W9nMKSKjj7"}],"key":"x982lO7MZ8"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Great Circles and a Point","url":"/notebooks/tutorials/arc-to-point","group":"Tutorials"},"next":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"}}},"domain":"http://localhost:3000"}