{"version":2,"kind":"Notebook","sha256":"34b6dcf9681eca26e069729b704ace2fbac76e1ce57a7f8c9cfe6f205f803115","slug":"notebooks.tutorials.parallels-max-min","location":"/notebooks/tutorials/3_parallels_max_min.ipynb","dependencies":[],"frontmatter":{"title":"Great Circles and Parallels","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/main/notebooks/tutorials/3_parallels_max_min.ipynb","thumbnail":"/great-circle-cookbook/build/0425273bd8f62ee885fd0d5f673b76df.gif","exports":[{"format":"ipynb","filename":"3_parallels_max_min.ipynb","url":"/great-circle-cookbook/build/3_parallels_max_min-baef35538752771010783508802ac150.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/build/0425273bd8f62ee885fd0d5f673b76df.gif","alt":"Ship on waves gif","key":"Sc4OQH3CZd","urlSource":"https://cdn1.byjus.com/wp-content/uploads/blog/2021/01/21071038/giphy-1.gif"}],"key":"mIecWfC55O"}],"key":"KUK2KRKpwl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great Circles and Parallels","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lqtec1WiV3"}],"identifier":"great-circles-and-parallels","label":"Great Circles and Parallels","html_id":"great-circles-and-parallels","implicit":true,"key":"E9r9lV4tkA"}],"key":"LqSpb8ZOjq"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WHX6deeSgV"}],"key":"KT8vKMpWwy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nk6jU53zS1"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"ZK0u3xp6tz"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A valid great circle path (that is not a path around the equator) will cross a maximum and minimum latitude.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W1nwJJr0UE"}],"key":"wJsFKqRrsV"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine the maximum latitude on a Great Circle Path","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bafqRPhS0s"}],"key":"K0h2qV6lUa"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine the minimum latitude on a Great Great path","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZGmSYHiXox"}],"key":"hOpRYX52qk"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Determine when a great circle path crosses parallels (TODO)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"TfbZ9xQTub"}],"key":"Ky8oMgEqyq"}],"key":"UWreMiMh2t"}],"key":"Bl5J4QN6Hq"}],"key":"FYcFlEpk4Y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"csUbGIqtNl"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"icAYTFErGp"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H05CnsBhbZ"}],"key":"qciZ5knvUT"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Kzd2YxT0Z0"}],"key":"Kgtwzu6AbV"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PxqWFaW1j6"}],"key":"PXDA65yqeM"}],"key":"hP22Qfy27L"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yGqOfZ4fc0"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"I5r2jn9VD9"}],"key":"ww24F6OUAQ"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WnUD3jED3f"}],"key":"MchZHOhOrN"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZQbN4bcnqy"}],"key":"VQHOL0eu5e"}],"key":"QuF4IDrz7H"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jGykgZP0hX"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"POYZbUWZLs"}],"key":"cMVlQdL3iB"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"rt7venxsJq"}],"key":"cAd6CIBcWX"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"YCK1XKA2c5"}],"key":"QxJYbF4EKA"}],"key":"TnYoFYqYQR"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ItYmziuSrU"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"W9YuBwXGu0"}],"key":"iM6TB6Vuhw"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gAwQkFrL79"}],"key":"MEvFMdsgxB"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wQdVlFkKr7"}],"key":"QmvKCabv1S"}],"key":"Sqba1uOea1"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"dB7KZKYTHp"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"KMtuUuLVd7"}],"key":"cDmkkuHkwL"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"YDX208ddmD"}],"key":"vQVBlWPNTa"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"KuxsW3Yvhm"}],"key":"irXHjO8lR0"}],"key":"f9Rqlt7RmQ"}],"key":"LYeGOTUgN2"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"e5GOE9s5wa"}],"key":"HiEPnwJjY5"},{"type":"text","value":": 30 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LgeXEGszpj"}],"key":"oLLu2oZ8Fu"}],"key":"F96zf7QxYg"}],"key":"ou8pUpAsxm"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZcDns9s8Ql"}],"key":"FlRTeTktD7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gEPZjTnrX2"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"tXvl0KWGd8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Itt4u5UWEC"}],"key":"MW3aaG4cqt"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"H5rjc3hbdL"}],"key":"lpecKNgTrx"}],"key":"YGsljzRopl"}],"key":"As1jf4L6S7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"WR7UbmNoCc"},{"type":"output","id":"ijiL5HAGZAZgIHzs9tj4Q","data":[],"key":"xacY8WHExh"}],"key":"EZ2UdoQul0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"eW6nhBw4WY"},{"type":"output","id":"L1EMu3voaB0oUWoeGea-2","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"Z1IvJ7oV0K"}],"key":"R9efBLza7f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"bESGEJiPp8"},{"type":"output","id":"B9dyHrMHLxSUClClwlCdI","data":[],"key":"NTotkbws19"}],"key":"bB10VgES5d"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EVN78ra7vg"}],"identifier":"maximum-latitude-on-a-great-circle-path","label":"Maximum Latitude on a Great Circle Path","html_id":"maximum-latitude-on-a-great-circle-path","implicit":true,"key":"wsJX1nv9Vc"}],"key":"aEGrJLefme"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We have previously determined an equation to derive a great circle path from intermediate points from two points on a great circle arc.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"atfrEhoF3R"}],"key":"Onji2bo8yt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Without additional calculations, we can use a list of points along the great circle path to find the maximum location of the maximum and minimum.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gismAkUceP"}],"key":"RCbg4FPstt"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By default, the equation below will determine 360 points along longitude, so the output will only have a resolution of 1 degree. However, by defining the longitude with more points, the resolution increases.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jVldUbkQMz"}],"key":"hboNyJ3xs6"}],"key":"dYylzVmM1d"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon","key":"WnC4YDgqsL"},{"type":"output","id":"eH4ZCUndlRriRsJbt3LU_","data":[],"key":"AhnphctrKR"}],"key":"ZKwaOzB2I0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Max Latitude (within 1 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"fhCD4qdgmd"},{"type":"output","id":"HW43XqjWh7QJRDiucyyqh","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 1 degree): (np.float64(42.750406941471915), np.float64(-81.0))\n"}],"key":"ROFpxB7lwe"}],"key":"jnWjKoVQd5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Max Latitude (within 0.5 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"ruPH9cEMW1"},{"type":"output","id":"uxhgyJ982UzECjZvPXM_4","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 0.5 degree): (np.float64(42.751388471834524), np.float64(-80.5))\n"}],"key":"CSP3cjHmO5"}],"key":"bzFOGe6Iti"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Max Latitude (within 0.3 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"KNFrkhRM8P"},{"type":"output","id":"zxOa7BEddQN8zJU4sUHCf","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude (within 0.3 degree): (np.float64(42.751302958796096), np.float64(-80.66666666666667))\n"}],"key":"TsEyFia5ZG"}],"key":"jqhd6fP3F0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Maximum","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ni5yn2VC9q"}],"identifier":"plot-maximum","label":"Plot Maximum","html_id":"plot-maximum","implicit":true,"key":"pZZOEzbHI2"}],"key":"dfS3exbIak"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_coordinate_max_min(great_circle_pts=None,\n                            max_coord=None, min_coord=None,\n                            title=None):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -180, 180, -90, 90\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n    \n    # Plot Great Circle Latitude/Longitude Location\n    longitudes = [x[1] for x in great_circle_pts] # longitude\n    latitudes = [x[0] for x in great_circle_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Overly Max/Min Coordinates\n    if max_coord is not None:\n        plt.scatter([max_coord[1]], [max_coord[0]], s=100, c=\"red\")\n    if min_coord is not None:\n        plt.scatter([min_coord[1]], [min_coord[0]], s=100, c=\"green\")\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(title)\n    plt.show()","key":"ZQhujkE2l0"},{"type":"output","id":"1vybrRuzWlseOtJEYGjYg","data":[],"key":"MOzWxUQsgD"}],"key":"EvdECe0JYh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"ZmETmBci5Q"},{"type":"output","id":"Uc4Xb-IuKgMxNKM5WBwD4","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2f3ff6175df8531ccb54e2890a36b698","path":"/great-circle-cookbook/build/2f3ff6175df8531ccb54e2890a36b698.png"}}}],"key":"NMNGqP6XaF"}],"key":"cmBso8cMNU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"bMxCDZu1TN"},{"type":"output","id":"OEuY8AG4nWGPFCMV9gVVs","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7d2f3a532cb1ca29c23df5b60e8de9ab","path":"/great-circle-cookbook/build/7d2f3a532cb1ca29c23df5b60e8de9ab.png"}}}],"key":"wAyOnrcoxb"}],"key":"PuxlB65Ssg"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LaDCz89dSi"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula","implicit":true,"key":"dDcyyCTsdd"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OVmUc4Na6H"}],"urlSource":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","data":{"page":"Clairaut%27s_relation_(differential_geometry)","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"tcRIrHuoV3"},{"type":"text","value":" (Clairaut’s equation or Clairaut’s relation) is a differential equation which defines the relationship between the latitude, φ, and the true course (bearing, θ) where:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ga5KGnYXPD"}],"key":"DSvU35xmeH"},{"type":"math","value":"sin(θ) * cos(φ) = \\text{constant}","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>constant</mtext></mrow><annotation encoding=\"application/x-tex\">sin(θ) * cos(φ) = \\text{constant}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord text\"><span class=\"mord\">constant</span></span></span></span></span></span>","enumerator":"1","key":"uZynM5VjyQ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"So, for any two points (A and B) along the great circle:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bpB2qHhQfq"}],"key":"Y7FgwaGVe0"},{"type":"math","value":"sin(θA) * cos(φA) = sin(θB) * cos(φB)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sin(θA) * cos(φA) = sin(θB) * cos(φB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">θB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">φB</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"2","key":"TvT9dFfJo8"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"So, to solve for the maximum latitude the true course should be when 90 and 270 degrees on the unit sphere where for ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"hrukalHXOt"},{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"w7IJe6S18d"}],"key":"YKz33j5Bwl"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"yatrGLvuXH"}],"key":"GIwzjvHIJA"},{"type":"math","value":"\\text{max latitude} = acos(|sin(θ) * cos(φ)|)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>max latitude</mtext><mo>=</mo><mi>a</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{max latitude} = acos(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">max latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"3","key":"TZKwu7O6Fy"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"For the purpose of this example, we will use ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"iUrlckF627"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"RzwdlI39PA"},{"type":"text","value":" geodesic to determine the bearing based on a great circle arc, but consult previous sections if you want to determine bearing mathetically based on the unit sphere instead of the ellipsoid.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"TbH1eCrHX3"}],"key":"jyIQ7FVFtA"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Important Note","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"UOINsLeCZH"}],"key":"otpgTZFFMa"}],"key":"ugiYUh6Q6c"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula works from unit sphere, and as a result, is subject to errors (about 3%, about +/- 11 degrees).","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"P7ucB1f284"}],"key":"XX5sj78Mrk"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm#Clairaut","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Ed Williams: Clairaut’s Formula","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"tOJXbhk2OV"}],"urlSource":"https://edwilliams.org/avform147.htm#Clairaut","key":"EAneEmDufz"}],"key":"bMsxTBiObx"}],"key":"ZNspNNrLJL"}],"key":"ZQyLp7iiaL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_max(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    max_lat = np.arccos(np.abs(np.sin(fwd_bearing) * np.cos(start_lat)))\n    return np.rad2deg(max_lat)","key":"RNGvFKcCKu"},{"type":"output","id":"Jlj7DV-PAabl0UNJOWfqZ","data":[],"key":"QKmPxBbyvc"}],"key":"ze1BpWneX8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"max_lat = clairaut_formula_max(\"boulder\", \"boston\")\nprint(f\"Max latitude from Boulder to Boston: {max_lat}\")","key":"avjnJp2QI9"},{"type":"output","id":"S2cVSEo2TxTruGa3VCDOP","data":[{"output_type":"stream","name":"stdout","text":"Max latitude from Boulder to Boston: 75.50718325253314\n"}],"key":"y32qqP2k92"}],"key":"nyTheCe2Lx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GF4hp1zrKv"}],"identifier":"minimum-latitude-on-a-great-circle-path","label":"Minimum Latitude on a Great Circle Path","html_id":"minimum-latitude-on-a-great-circle-path","implicit":true,"key":"jGtkjRQfap"}],"key":"jTH3SmISwI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Antipodal Point of Max (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r4HcuZylp1"}],"identifier":"antipodal-point-of-max-todo","label":"Antipodal Point of Max (TODO)","html_id":"antipodal-point-of-max-todo","implicit":true,"key":"r9CT87LtIu"}],"key":"r8vY2ocJSK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def antipodal(latitude=None, longitude=None):\n    anti_lat = -1 * latitude\n    if longitude > 0:\n        anti_lon = longitude - 180\n    else:\n        anti_lon = longitude + 180\n    return (anti_lat, anti_lon)","key":"yzpQkR1poS"},{"type":"output","id":"avHAGpC8Tfd_63JJIdzei","data":[],"key":"l8z4kn0Cd3"}],"key":"DyFnkPBL74"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Like finding maximum from a list of great circle path, the smallest latitude can be found by analysing the list for the smallest latitude point.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GwS962XBDG"}],"key":"oSQF4M3CgH"}],"key":"Aczeef8Gwg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nprint(max_lat_lon)\nantipodal(max_lat_lon[0], max_lat_lon[1])","key":"khGGxKRJH4"},{"type":"output","id":"qFbudm7yTumchVT92X-ds","data":[{"output_type":"stream","name":"stdout","text":"(np.float64(59.410929434369436), np.float64(-166.0))\n"},{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"(np.float64(-59.410929434369436), np.float64(14.0))","content_type":"text/plain"}}}],"key":"gKS8vbhE74"}],"key":"WtRt1ctShV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude along Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fmQRs6NZdi"}],"identifier":"minimum-latitude-along-great-circle-path","label":"Minimum Latitude along Great Circle Path","html_id":"minimum-latitude-along-great-circle-path","implicit":true,"key":"LTHxlqfbId"}],"key":"KOjBC3niDK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Min Latitude (within 1 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"fyyijGDtda"},{"type":"output","id":"VhitIf5eeAhzswGf0LXg-","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 1 degree): (np.float64(-42.75040694147194), np.float64(99.0))\n"}],"key":"tygGScoad9"}],"key":"SJftEB7RC8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Min Latitude (within 0.5 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"VCH2eLUuao"},{"type":"output","id":"hZbqnHtqNz2sLZscWg6_u","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.5 degree): (np.float64(-42.75138847183453), np.float64(99.5))\n"}],"key":"YJUCAJK05F"}],"key":"XwZjfQGbxV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Min Latitude (within 0.3 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"cJlPolPySz"},{"type":"output","id":"wbPtoMObGo_QmzGw_bKPb","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.3 degree): (np.float64(-42.7513029587961), np.float64(99.33333333333331))\n"}],"key":"JY35c0Ah13"}],"key":"gMcuheOxOr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmin_lat_lon = min(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            min_coord=min_lat_lon,\n                            title=f\"Min Latitude located at {min_lat_lon}\")","key":"RSRM8gGpET"},{"type":"output","id":"XLTqxldSymhfTu-3jJPiQ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"48cd0e75238d32272560c26dd35f34fb","path":"/great-circle-cookbook/build/48cd0e75238d32272560c26dd35f34fb.png"}}}],"key":"P87eMbhdNe"}],"key":"DdShZeDhPS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DSUFX47o05"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula-1","implicit":true,"key":"iv1NUlYegE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To solve for the minimum, the true course should be when 0 and 180 degrees on the unit sphere where for ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B61BpxMCb7"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ltzDRk8F6E"}],"key":"i0O2WRDhpl"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"t5UgwvKEkF"}],"key":"CA80cJT6vc"},{"type":"math","value":"\\text{min latitude} = asin(|sin(θ) * cos(φ)|)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>min latitude</mtext><mo>=</mo><mi>a</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{min latitude} = asin(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">min latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"4","key":"JGmra0D6Wc"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The southernmost point is the antipode to the northernmost (max) latitude.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"eZ1UDRQMGX"}],"key":"R7qEsGrVdS"}],"key":"L72fxnyFYI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_min(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut Formula\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    min_lat = np.arcsin(np.abs(np.cos(fwd_bearing) * np.sin(start_lat)))\n    return np.rad2deg(min_lat)","key":"cqN6EhPCXu"},{"type":"output","id":"mujxnMbBKjwEtIMl8a4t3","data":[],"key":"P487N7HM68"}],"key":"yHRmgbeGsM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"min_lat = clairaut_formula_min(\"boulder\", \"boston\")\nprint(f\"Min latitude along great circle path from Boulder to Boston: {min_lat}\")","key":"fB2gG5ObWn"},{"type":"output","id":"ZVwRi5Y2kfSj0AqBrNAnr","data":[{"output_type":"stream","name":"stdout","text":"Min latitude along great circle path from Boulder to Boston: 17.49699780715814\n"}],"key":"Mv72NdvLpv"}],"key":"okqwD1jmPI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine when great circle path cross parallels (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mqUK4lvXDv"}],"identifier":"determine-when-great-circle-path-cross-parallels-todo","label":"Determine when great circle path cross parallels (TODO)","html_id":"determine-when-great-circle-path-cross-parallels-todo","implicit":true,"key":"zdJDhXol1J"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Determine the longitude when a great circle crosses a given latitude parrellel.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ysNu18VXi5"}],"key":"aYaqVL3ehR"}],"key":"Hl9WQMj48e"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xbCRZ67t8U"}],"key":"pxcwcVMWXH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SEOU9NwFQi"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"xGDc7RmXCV"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the coordinates when a great circle path crosses a specific parallel as well as the maximumn and minimum latitude coordinates.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"JMaJD74cy6"}],"key":"tLlW4LdXz1"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Lzk4AZSB1n"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"hmTZvnXBD5"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intersections of Great Circles.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"b2v7kqJB24"}],"key":"zXOoR5q6t2"}],"key":"Dem9MRyJmn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"stU3dcZncJ"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"P4XAOeyEa1"}],"key":"BxWzcmHD7Y"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lY0vKICwZp"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"OINsxVHbzG"}],"key":"ZD3HGlFnnD"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"OB1PC3FioQ"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"sqRetjyIcm"}],"key":"mCtDC75KTg"}],"key":"clAch4qQaP"}],"key":"Wxm2AV7qkA"}],"key":"Q5ooS3iFCh"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Great Circles and a Point","url":"/notebooks/tutorials/arc-to-point","group":"Tutorials"},"next":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"}}},"domain":"http://localhost:3000"}