{"version":2,"kind":"Notebook","sha256":"35558356bb5b46baf24ca48e76258c8f3efbb86c6e1953b6b8a47159479ff138","slug":"notebooks.tutorials.arc-path","location":"/notebooks/tutorials/1_arc_path.ipynb","dependencies":[],"frontmatter":{"title":"Great Circle Arcs and Path","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/HEAD/notebooks/tutorials/1_arc_path.ipynb","thumbnail":"/great-circle-cookbook/_preview/6/build/17b783c8f9a45f5f402dc3edacb2de26.gif","exports":[{"format":"ipynb","filename":"1_arc_path.ipynb","url":"/great-circle-cookbook/_preview/6/build/1_arc_path-45834d4a5a72b0548fc4d8a08fe9a7fa.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/_preview/6/build/17b783c8f9a45f5f402dc3edacb2de26.gif","alt":"Indiana Jones Plane Flying Gif","key":"JcaVKLUC02","urlSource":"https://j.gifs.com/vO2k6P.gif"}],"key":"bJDPcnxYgr"}],"key":"ricpPR64Y6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great Circle Arcs and Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xNqo7vUoWl"}],"identifier":"great-circle-arcs-and-path","label":"Great Circle Arcs and Path","html_id":"great-circle-arcs-and-path","implicit":true,"key":"Uv1Em6cEBK"}],"key":"BX7F0NmtL3"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qEQ0brdbCt"}],"key":"sMEfOm3f1y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VMEJgT7dZP"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"QMHPqNyi1o"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Imagine a plane flying from Cario to Hong Kong. To a passenger, the plane appears to travel a straight path, but the plane actually curves around the surface of the Earth held down by the gravity of the planet.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"O9jCX6Ir3e"}],"key":"CL0IGE0yOT"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Great circles are circles that circumnavigate the globe.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QhJB5b2jyo"}],"key":"bImqajv3hK"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Distance between Points on a Great Circle Arc","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CAVWlqcSii"}],"key":"Z9fwG5rIgr"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Spherical Distance to Degrees","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JtnS6VUofu"}],"key":"rKwa0s2Iq6"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Determine the Bearing of a Great Circle Arc","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"BfwanfcXT8"}],"key":"RUQ5yjW8NP"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Generate a Great Circle Arc with Intermediate Points","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"rUZtWLiiKh"}],"key":"iVr2dxzS7b"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Determine the Midpoint of a Great Circle Arc","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"TlKzxVG1sw"}],"key":"ZycSeUosTu"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Generate a Great Circle Path","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"VeYalAGBmg"}],"key":"F2Tv3XwlWr"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Determine an Antipodal Point","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"v3EWTkwfHo"}],"key":"qWAv9DjhLw"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Compare Great Circle Arc to Rhumb Line (TODO)","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"yZtQbROWM2"}],"key":"i53PZ5zw7J"}],"key":"w6z9qfIJGa"}],"key":"PHXkmBshce"}],"key":"v3uAwbrKo0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DGHyQ81kRw"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"rh7dt5rMeI"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TYqf8cibwm"}],"key":"jIgs35bcwU"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"P7abUvWCQx"}],"key":"u38uq4UM1q"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VQz3yJr5Yv"}],"key":"KCt6vGSmyG"}],"key":"o0tOAOrwtF"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OLCPrSatja"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"tHzeIWS1Ef"}],"key":"U8FGhYXrui"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pP2YlgnRm7"}],"key":"fABCIrtahU"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"f7dcjktYd0"}],"key":"o2hTf5me61"}],"key":"o7Gpf4a2We"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"PpHWVyjOC3"}],"urlSource":"https://foundations.projectpythia.org/core/numpy.html","key":"mad4CdY1el"}],"key":"dbv7oLHvrs"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"tDe6QRNnvQ"}],"key":"MQDtA5j9P6"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"efiSXgWQ6O"}],"key":"WuEOzQ5Ujb"}],"key":"ySn1cEqnjk"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"V9aTY4iApl"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"CV6Z5THi9Y"}],"key":"glIOsaWDoa"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aUyA8Sv0PK"}],"key":"FxNqDsw0wS"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"TwVi7VnWBN"}],"key":"MX4pRuIjJ6"}],"key":"Y3pcP9Y2SI"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"FtvhrwTJnm"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib.html","key":"SbEyLgC5it"}],"key":"Go3wUY3azG"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"v4a4ETIZXE"}],"key":"bLaYRN2suq"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"MVuwnbBx9Z"}],"key":"VuZcZiaopH"}],"key":"eR5ATcFBVm"}],"key":"n30frzatlJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"qlaryQKn54"}],"key":"tbsRa3vsLK"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"qm5LIgIYMP"}],"key":"REdS5dgoqv"}],"key":"CZ4vglXsaA"}],"key":"TpyM4r5DqV"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WKemVMLxso"}],"key":"goRii8CA8G"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m0uCm77JG0"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"qKoRq3rvOJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mZwkxDkMEM"}],"key":"NjbrooHFzF"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TEhRJrCFRy"}],"key":"dppf2NJMmu"}],"key":"PM8HIOgryb"}],"key":"bWYLuDN6oA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\nimport geopy.distance     # working with the Earth as an ellipsod","key":"V1ScVz3CqI"},{"type":"output","id":"wvpfNTCb3cHEVvejGKLYE","data":[],"key":"DyeD318j4j"}],"key":"jrRzWBQHkC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"SFe5JUaMz7"},{"type":"output","id":"ahQMAAcqBXqcvjq8vD9Uv","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude        cart_x        cart_y        cart_z  \\\n0   arecibo   18.3441   -66.7527  2.389526e+06 -5.562495e+06  2.007347e+06   \n1   boulder   40.0150  -105.2705 -1.286558e+06 -4.712394e+06  4.101066e+06   \n2    boston   42.3601   -71.0589  1.529809e+06 -4.457769e+06  4.297512e+06   \n3  redwoods   41.4017  -124.0417 -2.678169e+06 -3.964322e+06  4.218080e+06   \n4   houston   29.5518   -95.0982 -4.930480e+05 -5.526456e+06  3.145762e+06   \n\n         rho     theta       phi       polar_x       polar_y       polar_z  \n0  6378137.0 -1.165054  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  6378137.0  1.304276  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  6378137.0 -1.240212  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  6378137.0  0.976657  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  6378137.0  1.481816  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>2.389526e+06</td>\n      <td>-5.562495e+06</td>\n      <td>2.007347e+06</td>\n      <td>6378137.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-1.286558e+06</td>\n      <td>-4.712394e+06</td>\n      <td>4.101066e+06</td>\n      <td>6378137.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>1.529809e+06</td>\n      <td>-4.457769e+06</td>\n      <td>4.297512e+06</td>\n      <td>6378137.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-2.678169e+06</td>\n      <td>-3.964322e+06</td>\n      <td>4.218080e+06</td>\n      <td>6378137.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-4.930480e+05</td>\n      <td>-5.526456e+06</td>\n      <td>3.145762e+06</td>\n      <td>6378137.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"WzZQtqCXsQ"}],"key":"dIj6UjvQcb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"sHcssXr2g4"},{"type":"output","id":"8M7U3RQ7ggnXnNL0L4c3v","data":[],"key":"QJtprOskT0"}],"key":"AOyHagFO83"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Distance Between Points on a Great Circle Arc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xBiRtHNvhz"}],"identifier":"distance-between-points-on-a-great-circle-arc","label":"Distance Between Points on a Great Circle Arc","html_id":"distance-between-points-on-a-great-circle-arc","implicit":true,"key":"caec4IqCgf"}],"key":"fiQjpQ8yjl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine Distance Between Points Mathematically via Unit Sphere","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"THMvyglsCo"}],"identifier":"determine-distance-between-points-mathematically-via-unit-sphere","label":"Determine Distance Between Points Mathematically via Unit Sphere","html_id":"determine-distance-between-points-mathematically-via-unit-sphere","implicit":true,"key":"lVmegYZ0Xb"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Distance between point A (latA, lonA) and point B (latB, lonB):","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CqmAeKadFk"}],"key":"pxqhhZeqmV"},{"type":"math","value":"d=acos(sin(latA)*sin(latB)+cos(latA)*cos(latB)*cos(lonA-lonB))","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>=</mo><mi>a</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d=acos(sin(latA)*sin(latB)+cos(latA)*cos(latB)*cos(lonA-lonB))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">))</span></span></span></span></span>","enumerator":"1","key":"h6bbMek3aw"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For shorter distances (with less rounding errors):","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RIciNsCau1"}],"key":"AnwinijnJL"},{"type":"math","value":"d=2*asin(\\sqrt{sin(\\frac{latA-latB}{2})^2 + cos(latA)*cos(latB)*sin(\\frac{lonA-lonB}{2})^2})","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo>−</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi></mrow><mn>2</mn></mfrac><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi></mrow><mn>2</mn></mfrac><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d=2*asin(\\sqrt{sin(\\frac{latA-latB}{2})^2 + cos(latA)*cos(latB)*sin(\\frac{lonA-lonB}{2})^2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.44em;vertical-align:-0.7634em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6766em;\"><span class=\"svg-align\" style=\"top:-4.4em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.6366em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:2.48em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'><path d='M424,2478\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl0 -0c4,-6.7,10,-10,18,-10 H400000\nv40H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M1001 80\nh400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7634em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"2","key":"CPsE3pZLH3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm#Dist","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Ed Williams: Distance Between Points","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"KtvMs1TkGD"}],"urlSource":"https://edwilliams.org/avform147.htm#Dist","key":"zKkCDqPXpo"}],"key":"S4Wv0l2hCr"}],"key":"qF4Z5mZYG4"}],"key":"vD2vooaILn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def distance_between_points_default(start_point=None, end_point=None):\n    earth_radius = 6378137  # meters\n    latA = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lonA = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    latB = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    lonB = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n\n    distance_default = np.arccos(np.sin(latA)*np.sin(latB)+np.cos(latA)*np.cos(latB)*np.cos(lonA-lonB))\n    return distance_default * earth_radius","key":"oFFGRJGI3c"},{"type":"output","id":"POASJi4QmZstCmKZAoVD4","data":[],"key":"VWIsN18yK6"}],"key":"x4994XUEHs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def distance_between_points_small(start_point=None, end_point=None):\n    earth_radius = 6378137  # meters\n    latA = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lonA = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    latB = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    lonB = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n\n    distance_small = 2 * np.arcsin(np.sqrt((np.sin((latA-latB)/2))**2 + np.cos(latA)*np.cos(latB)*(np.sin((lonA-lonB)/2))**2))\n    return distance_small * earth_radius","key":"fDPIaLdDoM"},{"type":"output","id":"IQZQXHMYKlxGUZCFDMUZw","data":[],"key":"U5hlnCfcqy"}],"key":"y8Jzw7SMwe"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Additional types of distance measuerments:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O0Q3GJf6Ga"}],"key":"jn10DWq8tw"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Haversine","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VcwZTCjHgW"}],"key":"ewGg4TKdXQ"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Vincenty Sphere Great Circle Distance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Tdz3rUA9Xl"}],"key":"M9HFrAcWvU"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Vincenty Ellipsoid Great Circle Distance","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"pP9ut73mY5"}],"key":"g22nvvMhzQ"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Meeus Great Circle Distance","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hzxgzy7nds"}],"key":"wd9BUIFFnm"}],"key":"BhwFroGBEq"}],"key":"bPrMaDB9HK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine Distance Points via Python Package ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SNK0hZ2aee"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FdutoDJp0m"}],"identifier":"determine-distance-points-via-python-package-pyproj","label":"Determine Distance Points via Python Package pyproj","html_id":"determine-distance-points-via-python-package-pyproj","implicit":true,"key":"SgGWvhPCpu"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"pyproj","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BMQLgkVKoF"},{"type":"text","value":" accounts for different ellipsoids like ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"N1noKpmDK7"},{"type":"inlineCode","value":"WGS-84","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xuXssLCffz"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"l5fS3nrpV8"}],"key":"oKih4PEPgE"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"First, setup a ellipsoid to represent the Earth (“WGS-84”):","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ArPA84atpU"}],"key":"jzXttUJsj7"}],"key":"KsDwOxhWlC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Distance between Boulder and Boston\ngeodesic = Geod(ellps=\"WGS84\")\n_, _, distance_meter =  geodesic.inv(location_df.loc[\"boulder\", \"longitude\"],\n                                     location_df.loc[\"boulder\", \"latitude\"],\n                                     location_df.loc[\"boston\", \"longitude\"],\n                                     location_df.loc[\"boston\", \"latitude\"])\n\nprint(f\"Distance between coordinates (ellipsoid)   = {distance_meter/1000} km\")\ndistance_unit_sphere_default = distance_between_points_default(\"boulder\", \"boston\")\nprint(f\"Distance between coordinates (unit sphere) = {distance_unit_sphere_default/1000} km\")\ndistance_unit_sphere_small = distance_between_points_small(\"boulder\", \"boston\")\nprint(f\"Distance between coordinates (unit sphere) = {distance_unit_sphere_small/1000} km\")","key":"RABaj4VCFh"},{"type":"output","id":"mCscOdlnGj6uSfdR4qRha","data":[{"output_type":"stream","name":"stdout","text":"Distance between coordinates (ellipsoid)   = 2862.5974799145215 km\nDistance between coordinates (unit sphere) = 2858.532213639344 km\nDistance between coordinates (unit sphere) = 2858.5322136393447 km\n"}],"key":"DnYpGJOWN6"}],"key":"TdvK8cCvKK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compared to the distance from the associated airports in Denver and Boston (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BVit4Tl88M"},{"type":"link","url":"https://www.greatcirclemap.com/?routes=DEN-BOS","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"DIA to Logan","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pwbtpzxWJC"}],"urlSource":"https://www.greatcirclemap.com/?routes=DEN-BOS","key":"wM3LJO8uVA"},{"type":"text","value":") which has a distance of 2823 km, using Denver instead of Boulder.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FA9bxrGyn6"}],"key":"Vg8AFqJ2Jg"}],"key":"ktc3OdhKGI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Distance to Degrees","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gAiT4YMuXu"}],"identifier":"spherical-distance-to-degrees","label":"Spherical Distance to Degrees","html_id":"spherical-distance-to-degrees","implicit":true,"key":"GertkuBaMt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Convert a distance from meters to degrees, measured along the great circle sphere with a constant spherical radius of ~6371 km (mean radius of Earth).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iB0rQoHyrK"}],"key":"W2w21s5uIt"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"See also: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ITmfGfs8bV"},{"type":"link","url":"https://docs.obspy.org/packages/autogen/obspy.geodetics.base.kilometer2degrees.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"ObsPy ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"b9t2XPHWrF"},{"type":"inlineCode","value":"kilometer2degrees()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yC99yGPLWQ"}],"urlSource":"https://docs.obspy.org/packages/autogen/obspy.geodetics.base.kilometer2degrees.html","key":"fxYqefgtel"}],"key":"jZlCL3Mg5C"}],"key":"Vs2ytB0mF0"}],"key":"RaVBKKcFhl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# assumes a spherical Earth\nearth_radius = 6378.137 # km\n\ndef km_to_degree_distance(distance_km=None):\n    return distance_km / (2 * earth_radius * np.pi / 360)\n\ndef degree_to_km_distance(distance_degree=None):\n    return distance_degree * (2 * earth_radius * np.pi / 360)","key":"FSMoNbZEpT"},{"type":"output","id":"X4fPIZSFz4L82fzQsr1Ns","data":[],"key":"J0W25b930Q"}],"key":"m9TbOYitlM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"300 km to degrees = {km_to_degree_distance(300)} degrees\")\nprint(f\"6.381307 degree to km = {degree_to_km_distance(6.381307)} km\")","key":"hzftiqN0Nq"},{"type":"output","id":"JjkSXtTlbKLUAIX9OkH5F","data":[{"output_type":"stream","name":"stdout","text":"300 km to degrees = 2.6949458523585643 degrees\n6.381307 degree to km = 710.3638458355522 km\n"}],"key":"lswabmiYrt"}],"key":"coLWLEKSz8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the Bearing of a Great Circle Arc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OF80WugOg7"}],"identifier":"determine-the-bearing-of-a-great-circle-arc","label":"Determine the Bearing of a Great Circle Arc","html_id":"determine-the-bearing-of-a-great-circle-arc","implicit":true,"key":"SNs3SEgX7M"}],"key":"rwWWjSHpWI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the Bearing Mathematically via Unit Sphere","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IW6Myo17hm"}],"identifier":"determine-the-bearing-mathematically-via-unit-sphere","label":"Determine the Bearing Mathematically via Unit Sphere","html_id":"determine-the-bearing-mathematically-via-unit-sphere","implicit":true,"key":"Nf4Vq2QYWa"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Bearing between point A (latA, lonA) and point B (latB, lonB):","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XKafDlgtLI"}],"key":"F0Y8hqV0Kx"},{"type":"math","value":"x = cos(latA) * sin(latB) - sin(latA) * cos(latB) * cos(lonB - lonA)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = cos(latA) * sin(latB) - sin(latA) * cos(latB) * cos(lonB - lonA)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"3","key":"e5DCQMKTK4"},{"type":"math","value":"y = sin(lonB - lonA) * cos(latB)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y = sin(lonB - lonA) * cos(latB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"4","key":"iRH8nRQBkM"},{"type":"math","value":"θ = atan2(y, x)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>a</mi><mi>t</mi><mi>a</mi><mi>n</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">θ = atan2(y, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">an</span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"5","key":"eAlxIwlxfa"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html#bearing","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Movable Type: Bearing","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"dD3lgyBGy5"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html#bearing","key":"nNadgPB6nS"}],"key":"xYdZt8Mkok"}],"key":"Z2vraNjNsl"}],"key":"cPSzpoGi0T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def bearing_between_points_unit_sphere(start_point=None, end_point=None):\n    latA = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lonA = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    latB = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    lonB = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n\n    x = np.cos(latA) * np.sin(latB) - np.sin(latA) * np.cos(latB) * np.cos(lonB - lonA)\n    y = np.sin(lonB - lonA) * np.cos(latB)\n    bearing = np.arctan2(y, x)\n    return np.rad2deg(bearing) % 360","key":"n9sGuzWs6W"},{"type":"output","id":"QSApRJDtv9mBd9VeZsqCo","data":[],"key":"iwfWnfXbTg"}],"key":"azODRsHrLC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the Bearing via Python Package ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SFUzPFRlUX"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kYoXHMe5Ux"}],"identifier":"determine-the-bearing-via-python-package-pyproj","label":"Determine the Bearing via Python Package pyproj","html_id":"determine-the-bearing-via-python-package-pyproj","implicit":true,"key":"gL5NMhZYf2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"pyproj","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ciZhzjqYcr"},{"type":"text","value":" accounts for different ellipsoids like ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EChfVW2zkI"},{"type":"inlineCode","value":"WGS-84","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"T7vvuXfq6h"},{"type":"text","value":":","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p3mZhZbfhx"}],"key":"jMp2yGgtAc"}],"key":"aKsoV6bFR4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def bearing_between_points_ellps(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                        location_df.loc[start_point, \"latitude\"],\n                                        location_df.loc[end_point, \"longitude\"],\n                                        location_df.loc[end_point, \"latitude\"])\n    return fwd_bearing","key":"nTBAGl9SSx"},{"type":"output","id":"bvVEZyA4M97XkpE1SjsU0","data":[],"key":"Vc0DzaujQn"}],"key":"s1ahQmv6My"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"### Compare Unit Sphere and Ellipsoid\nbeaing_ellps = bearing_between_points_ellps(\"boulder\", \"boston\")\nprint(f\"forward bearing between coordinates (ellipsoid)   = {beaing_ellps} Degrees\")\nbearing_us = bearing_between_points_unit_sphere(\"boulder\", \"boston\")\nprint(f\"forward bearing between coordinates (unit sphere) = {bearing_us} Degrees\")","key":"EZegOnccxo"},{"type":"output","id":"f_p0UZwYMGmLzdj1wfrD-","data":[{"output_type":"stream","name":"stdout","text":"forward bearing between coordinates (ellipsoid)   = 73.51048829569022 Degrees\nforward bearing between coordinates (unit sphere) = 73.49180375272644 Degrees\n"}],"key":"CnRfnVBiaw"}],"key":"UuGtHDu2KZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Generating a Great Circle Arc with Intermediates Points","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fwTc6yME3P"}],"identifier":"generating-a-great-circle-arc-with-intermediates-points","label":"Generating a Great Circle Arc with Intermediates Points","html_id":"generating-a-great-circle-arc-with-intermediates-points","implicit":true,"key":"vliubj1PFG"}],"key":"kV6RSS2hip"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine Intermediate Points Mathemetically via Unit Sphere","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lraWxlCoJi"}],"identifier":"determine-intermediate-points-mathemetically-via-unit-sphere","label":"Determine Intermediate Points Mathemetically via Unit Sphere","html_id":"determine-intermediate-points-mathemetically-via-unit-sphere","implicit":true,"key":"fo9fgNY5IU"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Determine the points (lat, lon) a given fraction of a distance (d) between a starting points A (latA, lonA) and the final point B (latB, lonB) where f is a fraction along the great circle arc. ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ms3dkGKprO"},{"type":"inlineCode","value":"f=0","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HtgknNoIML"},{"type":"text","value":" is point A and ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"aP4WYq7pDC"},{"type":"inlineCode","value":"f=1","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"WBoQHBlE1f"},{"type":"text","value":" is point B.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rFocaMAgkH"}],"key":"Bmk1ANb40P"},{"type":"blockquote","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Note: The points cannot be antipodal because the path is undefined","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TKiosuPyp1"}],"key":"yUvt4TAvZB"}],"key":"CyHNbra0ZY"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Where, antipodal is defined by:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CWZhBDRTQt"}],"key":"zm4ILWhVI6"},{"type":"math","value":"latA + latB = 0","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"tight":true,"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo>+</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">latA + latB = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>","enumerator":"6","key":"QpsZUD0JhT"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"olzptue3nn"}],"key":"T4C3KK8P1s"},{"type":"math","value":"abs(lonA - lonB) = pi","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"tight":"before","html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">abs(lonA - lonB) = pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">i</span></span></span></span></span>","enumerator":"7","key":"xH8j8ZJFvt"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Where the distance between two points is the angular distance:","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ZWzbJU0qJJ"}],"key":"agtRPtlT69"},{"type":"math","value":"d = \\frac{\\text{total distance of arc}}{\\text{earth's radius}}","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mtext>total distance of arc</mtext><mtext>earth’s radius</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">d = \\frac{\\text{total distance of arc}}{\\text{earth&#x27;s radius}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">earth’s radius</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">total distance of arc</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","enumerator":"8","key":"l7Z11E7ttw"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"The intermediate points (lat, lon) along a given path starting point to end point:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"vqLs5Ed2YQ"}],"key":"SzDEJsdVS9"},{"type":"math","value":"A = sin(\\frac{(1-f) * d}{sin(d)}","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>d</mi></mrow><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">A = sin(\\frac{(1-f) * d}{sin(d)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","enumerator":"9","key":"E6MxNtZRbg"},{"type":"math","value":"B = \\frac{sin(f*d)}{sin(d)}","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>B</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∗</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">B = \\frac{sin(f*d)}{sin(d)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","enumerator":"10","key":"zT3RtPdT7F"},{"type":"math","value":"x = A * cos(latA) * cos(lonA) + B * cos(latB) * cos(lonB)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>A</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>B</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = A * cos(latA) * cos(lonA) + B * cos(latB) * cos(lonB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"11","key":"LpCuiUPXr9"},{"type":"math","value":"y = A * cos(latA) * sin(lonA) + B * cos(latB) * sin(lonB)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>A</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>B</mi><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>n</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y = A * cos(latA) * sin(lonA) + B * cos(latB) * sin(lonB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"12","key":"MCf5bPgUTb"},{"type":"math","value":"z = A * sin(latA) + B * sin(latB)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>A</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>B</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>a</mi><mi>t</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z = A * sin(latA) + B * sin(latB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"13","key":"Xx5sbFFU8J"},{"type":"math","value":"lat = atan2(z, \\sqrt{x^2 + y^2})","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>l</mi><mi>a</mi><mi>t</mi><mo>=</mo><mi>a</mi><mi>t</mi><mi>a</mi><mi>n</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">lat = atan2(z, \\sqrt{x^2 + y^2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2567em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">an</span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0067em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9667em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2333em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"14","key":"vBC7dY0vYd"},{"type":"math","value":"lon = atan2(y, x)","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>a</mi><mi>t</mi><mi>a</mi><mi>n</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">lon = atan2(y, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">an</span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"15","key":"Joeuk4ABZY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":24,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm#Intermediate","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Ed Williams: Intermediate Points on a Great Circle","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"SD5xobJu6K"}],"urlSource":"https://edwilliams.org/avform147.htm#Intermediate","key":"hhiGyEnvyp"}],"key":"vxSOyRwZRu"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html#intermediate-point","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Moveable Type: Intermediate Point","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"q8hi5AmtRm"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html#intermediate-point","key":"QhXYIKH2tT"}],"key":"Fgb7KyPfsZ"}],"key":"bWXN5sVCHN"}],"key":"t1ucviqjbn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def intermediate_points(start_point=None, end_point=None,\n                        fraction=None, distance=None):\n    earth_radius = 6378137  # meters\n    total_distance = distance / earth_radius\n    latA = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lonA = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    latB = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    lonB = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n\n    A = np.sin((1-fraction) * total_distance) / np.sin(total_distance)\n    B = np.sin(fraction * total_distance) / np.sin(total_distance)\n    x = (A * np.cos(latA) * np.cos(lonA)) + (B * np.cos(latB) * np.cos(lonB))\n    y = (A * np.cos(latA) * np.sin(lonA)) + (B * np.cos(latB) * np.sin(lonB))\n    z = (A * np.sin(latA)) + (B * np.sin(latB))\n    lat = np.arctan2(z, np.sqrt(x**2 + y**2))\n    lon = np.arctan2(y, x)\n    return (np.rad2deg(lat), np.rad2deg(lon))\n\ndef calculate_intermediate_pts(start_point=None, end_point=None,\n                               fraction=None, total_distance_meter=None):\n    fractions = np.arange(0, 1+fraction, fraction)\n    intermediate_lat_lon = []\n    for fractional in fractions:\n        intermediate_pts = intermediate_points(start_point, end_point,\n                                                fractional, total_distance_meter)\n        intermediate_lat_lon.append(intermediate_pts)\n    return intermediate_lat_lon","key":"ahI8Yr1EhQ"},{"type":"output","id":"pEh4_r-vVP9yi8Fn1MKUK","data":[],"key":"CuVBtN76Tu"}],"key":"bEDstqaGSh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine Intermediate Points via Python Package ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H5g7aba3r7"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MuPRfdG210"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UldkMLHMXE"},{"type":"inlineCode","value":"geopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fO3hVe4tJE"}],"identifier":"determine-intermediate-points-via-python-package-pyproj-and-geopy","label":"Determine Intermediate Points via Python Package pyproj and geopy","html_id":"determine-intermediate-points-via-python-package-pyproj-and-geopy","implicit":true,"key":"RIIk8UqzaZ"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Interpolate with N total equally spaced number of points","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"D526OYjmDu"}],"key":"MABiwtl1nv"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Interpolate every N meters","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"CSVwo1ZLcQ"}],"key":"y0G7N0ULQn"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Interpolate a fractional distance along arc","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xNgr4NsbYl"}],"key":"qxFlS1GX3T"}],"key":"j9JNEzOfMX"}],"key":"XSIDvt3tzj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def interpolate_points_along_gc(lat_start,\n                                lon_start,\n                                lat_end,\n                                lon_end,\n                                distance_between_points_meter): \n    lat_lon_points = [(lat_start, lon_start)]\n    \n    # move to next point when distance between points is less than the equal distance\n    move_to_next_point = True\n    while(move_to_next_point):\n        forward_bearing, _, distance_meters = geodesic.inv(lon_start,\n                                                            lat_start, \n                                                            lon_end,\n                                                            lat_end)\n        if distance_meters < distance_between_points_meter:\n            # ends before overshooting\n            move_to_next_point = False\n        else:\n            start_point = geopy.Point(lat_start, lon_start)\n            distance_to_move = geopy.distance.distance(\n                            kilometers=distance_between_points_meter /\n                            1000)  # distance to move towards the next point\n            final_position = distance_to_move.destination(\n                            start_point, bearing=forward_bearing)\n            lat_lon_points.append((final_position.latitude, final_position.longitude))\n            # new starting position is newly found end position\n            lon_start, lat_start = final_position.longitude, final_position.latitude\n    lat_lon_points.append((lat_end, lon_end))\n    return lat_lon_points","key":"AkusMO4ufP"},{"type":"output","id":"_JCQXECKrXPUOHn8DWsnG","data":[],"key":"M9jHG4SN6v"}],"key":"DjgfPEKg1O"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Arcs as Points on a World Map","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gt9qpvGURQ"}],"identifier":"plot-arcs-as-points-on-a-world-map","label":"Plot Arcs as Points on a World Map","html_id":"plot-arcs-as-points-on-a-world-map","implicit":true,"key":"XBbcyWObNI"}],"key":"OVsScPfBe2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nfrom cartopy import crs as ccrs, feature as cfeature\n\ndef plot_coordinate(lst_of_coords=None, title=None):\n    # Set up world map plot on the United States\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -130, -60, 20, 60\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n    \n    # Plot Latitude/Longitude Location\n    longitudes = [x[1] for x in lst_of_coords] # longitude\n    latitudes = [x[0] for x in lst_of_coords] # latitude\n    plt.plot(longitudes, latitudes)\n    plt.scatter(longitudes, latitudes)\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(title)\n    plt.show()","key":"UwZgprVwjB"},{"type":"output","id":"SA6FiOFIt-aERhoiWzUhl","data":[],"key":"PUFkuPOlnS"}],"key":"dX5Z6KBAH3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Interpolate with N Total Equally Spaced Points","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OYriwAIEz7"}],"identifier":"interpolate-with-n-total-equally-spaced-points","label":"Interpolate with N Total Equally Spaced Points","html_id":"interpolate-with-n-total-equally-spaced-points","implicit":true,"key":"TjGajfLSkm"}],"key":"jRLiQLLQdS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"n_total_points = 10 # total points (n points)\ndistance_between_points_meter = distance_meter / (n_total_points + 1)\nprint(f\"Each point will be separated by {distance_between_points_meter} meters ({distance_between_points_meter/1000} km)\")","key":"QuT0ZnqO8Y"},{"type":"output","id":"jWp1FXWKFL-ZkZoPujhhg","data":[{"output_type":"stream","name":"stdout","text":"Each point will be separated by 260236.13453768377 meters (260.23613453768377 km)\n"}],"key":"iGq0ZVeHcd"}],"key":"K80BLvpg3b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_start, lon_start = location_df.loc[[\"boulder\"]][\"latitude\"].iloc[0], location_df.loc[[\"boulder\"]][\"longitude\"].iloc[0]\nlat_end, lon_end = location_df.loc[[\"boston\"]][\"latitude\"].iloc[0], location_df.loc[[\"boston\"]][\"longitude\"].iloc[0]\n\nintermediate_geodesic = interpolate_points_along_gc(lat_start,\n                                          lon_start,\n                                          lat_end,\n                                          lon_end,\n                                          distance_between_points_meter)\nprint(f\"{len(intermediate_geodesic)} Total Points\")\nintermediate_geodesic","key":"K4DZrskJt1"},{"type":"output","id":"Cr5JnrxeVdwuG5kjtNfjv","data":[{"output_type":"stream","name":"stdout","text":"12 Total Points\n"},{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(40.015), np.float64(-105.2705)),\n (40.64283438472448, -102.32002071588883),\n (41.19386139956729, -99.31719425393653),\n (41.665293789240074, -96.2672998277903),\n (42.05464865958041, -93.17653047007545),\n (42.35980367525435, -90.05192021556942),\n (42.579048241302566, -86.9012334462751),\n (42.71112689737456, -83.73281874084786),\n (42.75527239726804, -80.5554326250441),\n (42.711226442193585, -77.37804142647055),\n (42.579246749547636, -74.20961159223961),\n (np.float64(42.3601), np.float64(-71.0589))]","content_type":"text/plain"}}}],"key":"OJnpaii73v"}],"key":"gIq0Q7Gnfn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_coordinate(intermediate_geodesic,\n                title=f\"Interpolate {n_total_points} Points\")","key":"gVO67wZf5n"},{"type":"output","id":"c72gVLmLGqEvEh6ulbWbX","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31merror\u001b[39m                                     Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/formatters.py:402\u001b[39m, in \u001b[36mBaseFormatter.__call__\u001b[39m\u001b[34m(self, obj)\u001b[39m\n\u001b[32m    400\u001b[39m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[32m    401\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m402\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mprinter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    403\u001b[39m \u001b[38;5;66;03m# Finally look for special method names\u001b[39;00m\n\u001b[32m    404\u001b[39m method = get_real_method(obj, \u001b[38;5;28mself\u001b[39m.print_method)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/IPython/core/pylabtools.py:170\u001b[39m, in \u001b[36mprint_figure\u001b[39m\u001b[34m(fig, fmt, bbox_inches, base64, **kwargs)\u001b[39m\n\u001b[32m    167\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mbackend_bases\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m FigureCanvasBase\n\u001b[32m    168\u001b[39m     FigureCanvasBase(fig)\n\u001b[32m--> \u001b[39m\u001b[32m170\u001b[39m \u001b[43mfig\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcanvas\u001b[49m\u001b[43m.\u001b[49m\u001b[43mprint_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbytes_io\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    171\u001b[39m data = bytes_io.getvalue()\n\u001b[32m    172\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m fmt == \u001b[33m'\u001b[39m\u001b[33msvg\u001b[39m\u001b[33m'\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/backend_bases.py:2155\u001b[39m, in \u001b[36mFigureCanvasBase.print_figure\u001b[39m\u001b[34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[39m\n\u001b[32m   2152\u001b[39m     \u001b[38;5;66;03m# we do this instead of `self.figure.draw_without_rendering`\u001b[39;00m\n\u001b[32m   2153\u001b[39m     \u001b[38;5;66;03m# so that we can inject the orientation\u001b[39;00m\n\u001b[32m   2154\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(renderer, \u001b[33m\"\u001b[39m\u001b[33m_draw_disabled\u001b[39m\u001b[33m\"\u001b[39m, nullcontext)():\n\u001b[32m-> \u001b[39m\u001b[32m2155\u001b[39m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfigure\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2156\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m bbox_inches:\n\u001b[32m   2157\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m bbox_inches == \u001b[33m\"\u001b[39m\u001b[33mtight\u001b[39m\u001b[33m\"\u001b[39m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:94\u001b[39m, in \u001b[36m_finalize_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer, *args, **kwargs)\u001b[39m\n\u001b[32m     92\u001b[39m \u001b[38;5;129m@wraps\u001b[39m(draw)\n\u001b[32m     93\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mdraw_wrapper\u001b[39m(artist, renderer, *args, **kwargs):\n\u001b[32m---> \u001b[39m\u001b[32m94\u001b[39m     result = \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     95\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m renderer._rasterizing:\n\u001b[32m     96\u001b[39m         renderer.stop_rasterizing()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/figure.py:3257\u001b[39m, in \u001b[36mFigure.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3254\u001b[39m             \u001b[38;5;66;03m# ValueError can occur when resizing a window.\u001b[39;00m\n\u001b[32m   3256\u001b[39m     \u001b[38;5;28mself\u001b[39m.patch.draw(renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3257\u001b[39m     \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3258\u001b[39m \u001b[43m        \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3260\u001b[39m     renderer.close_group(\u001b[33m'\u001b[39m\u001b[33mfigure\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3261\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/geoaxes.py:524\u001b[39m, in \u001b[36mGeoAxes.draw\u001b[39m\u001b[34m(self, renderer, **kwargs)\u001b[39m\n\u001b[32m    519\u001b[39m         \u001b[38;5;28mself\u001b[39m.imshow(img, extent=extent, origin=origin,\n\u001b[32m    520\u001b[39m                     transform=factory.crs, *factory_args[\u001b[32m1\u001b[39m:],\n\u001b[32m    521\u001b[39m                     **factory_kwargs)\n\u001b[32m    522\u001b[39m \u001b[38;5;28mself\u001b[39m._done_img_factory = \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m524\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/axes/_base.py:3216\u001b[39m, in \u001b[36m_AxesBase.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m   3213\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m artists_rasterized:\n\u001b[32m   3214\u001b[39m     _draw_rasterized(\u001b[38;5;28mself\u001b[39m.get_figure(root=\u001b[38;5;28;01mTrue\u001b[39;00m), artists_rasterized, renderer)\n\u001b[32m-> \u001b[39m\u001b[32m3216\u001b[39m \u001b[43mmimage\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_draw_list_compositing_images\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3217\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43martists\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43mroot\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43msuppressComposite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   3219\u001b[39m renderer.close_group(\u001b[33m'\u001b[39m\u001b[33maxes\u001b[39m\u001b[33m'\u001b[39m)\n\u001b[32m   3220\u001b[39m \u001b[38;5;28mself\u001b[39m.stale = \u001b[38;5;28;01mFalse\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/image.py:134\u001b[39m, in \u001b[36m_draw_list_compositing_images\u001b[39m\u001b[34m(renderer, parent, artists, suppress_composite)\u001b[39m\n\u001b[32m    132\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m not_composite \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m has_images:\n\u001b[32m    133\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m artists:\n\u001b[32m--> \u001b[39m\u001b[32m134\u001b[39m         \u001b[43ma\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    135\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    136\u001b[39m     \u001b[38;5;66;03m# Composite any adjacent images together\u001b[39;00m\n\u001b[32m    137\u001b[39m     image_group = []\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/matplotlib/artist.py:71\u001b[39m, in \u001b[36mallow_rasterization.<locals>.draw_wrapper\u001b[39m\u001b[34m(artist, renderer)\u001b[39m\n\u001b[32m     68\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m     69\u001b[39m         renderer.start_filter()\n\u001b[32m---> \u001b[39m\u001b[32m71\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdraw\u001b[49m\u001b[43m(\u001b[49m\u001b[43martist\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrenderer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     72\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m     73\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m artist.get_agg_filter() \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/mpl/feature_artist.py:185\u001b[39m, in \u001b[36mFeatureArtist.draw\u001b[39m\u001b[34m(self, renderer)\u001b[39m\n\u001b[32m    180\u001b[39m     geoms = \u001b[38;5;28mself\u001b[39m._feature.geometries()\n\u001b[32m    181\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    182\u001b[39m     \u001b[38;5;66;03m# For efficiency on local maps with high resolution features (e.g\u001b[39;00m\n\u001b[32m    183\u001b[39m     \u001b[38;5;66;03m# from Natural Earth), only create paths for geometries that are\u001b[39;00m\n\u001b[32m    184\u001b[39m     \u001b[38;5;66;03m# in view.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m185\u001b[39m     geoms = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_feature\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    187\u001b[39m stylised_paths = {}\n\u001b[32m    188\u001b[39m \u001b[38;5;66;03m# Make an empty placeholder style dictionary for when styler is not\u001b[39;00m\n\u001b[32m    189\u001b[39m \u001b[38;5;66;03m# used.  Freeze it so that we can use it as a dict key.  We will need\u001b[39;00m\n\u001b[32m    190\u001b[39m \u001b[38;5;66;03m# to unfreeze all style dicts with dict(frozen) before passing to mpl.\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:309\u001b[39m, in \u001b[36mNaturalEarthFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    302\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    303\u001b[39m \u001b[33;03mReturns an iterator of shapely geometries that intersect with\u001b[39;00m\n\u001b[32m    304\u001b[39m \u001b[33;03mthe given extent.\u001b[39;00m\n\u001b[32m    305\u001b[39m \u001b[33;03mThe extent is assumed to be in the CRS of the feature.\u001b[39;00m\n\u001b[32m    306\u001b[39m \u001b[33;03mIf extent is None, the method returns all geometries for this dataset.\u001b[39;00m\n\u001b[32m    307\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    308\u001b[39m \u001b[38;5;28mself\u001b[39m.scaler.scale_from_extent(extent)\n\u001b[32m--> \u001b[39m\u001b[32m309\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mintersecting_geometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextent\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:112\u001b[39m, in \u001b[36mFeature.intersecting_geometries\u001b[39m\u001b[34m(self, extent)\u001b[39m\n\u001b[32m    109\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m extent \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m np.isnan(extent[\u001b[32m0\u001b[39m]):\n\u001b[32m    110\u001b[39m     extent_geom = sgeom.box(extent[\u001b[32m0\u001b[39m], extent[\u001b[32m2\u001b[39m],\n\u001b[32m    111\u001b[39m                             extent[\u001b[32m1\u001b[39m], extent[\u001b[32m3\u001b[39m])\n\u001b[32m--> \u001b[39m\u001b[32m112\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m (geom \u001b[38;5;28;01mfor\u001b[39;00m geom \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mif\u001b[39;00m\n\u001b[32m    113\u001b[39m             geom \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m extent_geom.intersects(geom))\n\u001b[32m    114\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    115\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m.geometries()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/feature/__init__.py:294\u001b[39m, in \u001b[36mNaturalEarthFeature.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    290\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m key \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m _NATURAL_EARTH_GEOM_CACHE:\n\u001b[32m    291\u001b[39m     path = shapereader.natural_earth(resolution=\u001b[38;5;28mself\u001b[39m.scale,\n\u001b[32m    292\u001b[39m                                      category=\u001b[38;5;28mself\u001b[39m.category,\n\u001b[32m    293\u001b[39m                                      name=\u001b[38;5;28mself\u001b[39m.name)\n\u001b[32m--> \u001b[39m\u001b[32m294\u001b[39m     geometries = \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshapereader\u001b[49m\u001b[43m.\u001b[49m\u001b[43mReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mgeometries\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    295\u001b[39m     _NATURAL_EARTH_GEOM_CACHE[key] = geometries\n\u001b[32m    296\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/shapereader.py:164\u001b[39m, in \u001b[36mBasicReader.geometries\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    152\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mgeometries\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m    153\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    154\u001b[39m \u001b[33;03m    Return an iterator of shapely geometries from the shapefile.\u001b[39;00m\n\u001b[32m    155\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m    162\u001b[39m \n\u001b[32m    163\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m164\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_reader\u001b[49m\u001b[43m.\u001b[49m\u001b[43miterShapes\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_bbox\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    165\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# Skip the shape that can not be represented as geometry.\u001b[39;49;00m\n\u001b[32m    166\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshapeType\u001b[49m\u001b[43m \u001b[49m\u001b[43m!=\u001b[49m\u001b[43m \u001b[49m\u001b[43mshapefile\u001b[49m\u001b[43m.\u001b[49m\u001b[43mNULL\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m    167\u001b[39m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01myield\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43msgeom\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1483\u001b[39m, in \u001b[36mReader.iterShapes\u001b[39m\u001b[34m(self, bbox)\u001b[39m\n\u001b[32m   1479\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.numShapes:\n\u001b[32m   1480\u001b[39m     \u001b[38;5;66;03m# Iterate exactly the number of shapes from shx header\u001b[39;00m\n\u001b[32m   1481\u001b[39m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m xrange(\u001b[38;5;28mself\u001b[39m.numShapes):\n\u001b[32m   1482\u001b[39m         \u001b[38;5;66;03m# MAYBE: check if more left of file or exit early? \u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1483\u001b[39m         shape = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m__shape\u001b[49m\u001b[43m(\u001b[49m\u001b[43moid\u001b[49m\u001b[43m=\u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbbox\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1484\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m shape:\n\u001b[32m   1485\u001b[39m             \u001b[38;5;28;01myield\u001b[39;00m shape\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/shapefile.py:1340\u001b[39m, in \u001b[36mReader.__shape\u001b[39m\u001b[34m(self, oid, bbox)\u001b[39m\n\u001b[32m   1338\u001b[39m \u001b[38;5;66;03m# Read points - produces a list of [x,y] values\u001b[39;00m\n\u001b[32m   1339\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m nPoints:\n\u001b[32m-> \u001b[39m\u001b[32m1340\u001b[39m     flat = \u001b[43munpack\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m<\u001b[39;49m\u001b[38;5;132;43;01m%s\u001b[39;49;00m\u001b[33;43md\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m%\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m2\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m \u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[32;43m16\u001b[39;49m\u001b[43m*\u001b[49m\u001b[43mnPoints\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1341\u001b[39m     record.points = \u001b[38;5;28mlist\u001b[39m(izip(*(\u001b[38;5;28miter\u001b[39m(flat),) * \u001b[32m2\u001b[39m))\n\u001b[32m   1342\u001b[39m \u001b[38;5;66;03m# Read z extremes and values\u001b[39;00m\n\n\u001b[31merror\u001b[39m: unpack requires a buffer of 224 bytes","ename":"error","evalue":"unpack requires a buffer of 224 bytes"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"}}}],"key":"mGykV2A3vY"}],"key":"sGONdTCuDt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Interpolate every N meters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eGD6dPa99m"}],"identifier":"interpolate-every-n-meters","label":"Interpolate every N meters","html_id":"interpolate-every-n-meters","implicit":true,"key":"S6VdoMNPqR"}],"key":"BaRGOocH2M"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"distance_between_points_meter = 112000\nprint(f\"Each point will be separated by {distance_between_points_meter} meters ({distance_between_points_meter/1000} km)\")","key":"DecsB4Qvwd"},{"type":"output","id":"JiXXsonDfFnqCLSYYUIWU","data":[{"output_type":"stream","name":"stdout","text":"Each point will be separated by 112000 meters (112.0 km)\n"}],"key":"gK04LyBP4h"}],"key":"HH7sAjiVLD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_start, lon_start = location_df.loc[\"boulder\", \"latitude\"], location_df.loc[\"boulder\", \"longitude\"]\nlat_end, lon_end = location_df.loc[\"boston\", \"latitude\"], location_df.loc[\"boston\", \"longitude\"]\n\nintermediate_geodesic = interpolate_points_along_gc(lat_start,\n                                          lon_start,\n                                          lat_end,\n                                          lon_end,\n                                          distance_between_points_meter)\nprint(f\"{len(intermediate_geodesic)} Total Points\")\nintermediate_geodesic","key":"HeAbk5yRa4"},{"type":"output","id":"v5NfJr7wG8OMjcIZcnlNc","data":[{"output_type":"stream","name":"stdout","text":"27 Total Points\n"},{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(40.015), np.float64(-105.2705)),\n (40.29443152420481, -104.00739372929635),\n (40.55994883031889, -102.73410083358552),\n (40.811312209497714, -101.45097760323463),\n (41.04829010633232, -100.15841313140038),\n (41.27065999040772, -98.8568290209118),\n (41.47820922569627, -97.54667886388195),\n (41.67073593071231, -96.22844748540258),\n (41.848049822017195, -94.90264994540797),\n (42.00997303342117, -93.56983029584387),\n (42.156340903095064, -92.23056009359964),\n (42.287002720790326, -90.88543667319323),\n (42.40182242747838, -89.53508118686946),\n (42.50067925996674, -88.1801364234981),\n (42.583468333429785, -86.82126442135142),\n (42.65010115530707, -85.45914389340653),\n (42.700506064664665, -84.09446748716023),\n (42.73462859187762, -82.72793890397021),\n (42.75243173435998, -81.36026990555973),\n (42.75389614502746, -79.99217723746453),\n (42.73902023120852, -78.62437950079696),\n (42.707820162798164, -77.25759400470386),\n (42.66032978955507, -75.89253363227026),\n (42.596600468550456, -74.52990375235937),\n (42.51670080386281, -73.1703992089883),\n (42.42071630165334, -71.81470141834599),\n (np.float64(42.3601), np.float64(-71.0589))]","content_type":"text/plain"}}}],"key":"DFD65QDLQU"}],"key":"cJgEd59idk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_coordinate(intermediate_geodesic,\n                title=f\"Interpolate every {distance_between_points_meter/1000} km\")","key":"icCqknu7aW"},{"type":"output","id":"6WbIDXFLXzKY0hv5KhBuV","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c24f12b0bdf38febd9921bc27ae4d04c","path":"/great-circle-cookbook/_preview/6/build/c24f12b0bdf38febd9921bc27ae4d04c.png"}}}],"key":"TAv48MZElC"}],"key":"zbAzr0Lw7T"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Interpolate a fractional distance along arc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UhlVwqYSW2"}],"identifier":"interpolate-a-fractional-distance-along-arc","label":"Interpolate a fractional distance along arc","html_id":"interpolate-a-fractional-distance-along-arc","implicit":true,"key":"YFF8qP4M2N"}],"key":"lZQ2tmV64h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fraction = 1/10","key":"e6m1PEx6cZ"},{"type":"output","id":"XHrlGZeZkQxGV7dil50mi","data":[],"key":"kqiJtZR2pR"}],"key":"G0r0MDf6Pp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"distance_between_points_meter = fraction * distance_meter\nprint(f\"Each point will be separated by {distance_between_points_meter} meters ({distance_between_points_meter/1000} km)\")","key":"vCbF4PQ6IR"},{"type":"output","id":"W68FBdb7ENruGnlNf4pvD","data":[{"output_type":"stream","name":"stdout","text":"Each point will be separated by 286259.74799145217 meters (286.2597479914522 km)\n"}],"key":"BVYumS1vwr"}],"key":"qihmW7xcC8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_start, lon_start = location_df.loc[\"boulder\", \"latitude\"], location_df.loc[\"boulder\", \"longitude\"]\nlat_end, lon_end = location_df.loc[\"boston\", \"latitude\"], location_df.loc[\"boston\", \"longitude\"]\n\nintermediate_ellipsoid = interpolate_points_along_gc(lat_start,\n                                          lon_start,\n                                          lat_end,\n                                          lon_end,\n                                          distance_between_points_meter)\nprint(f\"{len(intermediate_ellipsoid)} Total Points\")\nintermediate_ellipsoid","key":"bg47GklaUV"},{"type":"output","id":"FciktFl8uQ7bbfwIAVVrA","data":[{"output_type":"stream","name":"stdout","text":"11 Total Points\n"},{"output_type":"execute_result","execution_count":23,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(40.015), np.float64(-105.2705)),\n (40.70144152851926, -102.0220139666611),\n (41.29459964930597, -98.7107954391427),\n (41.790822409112124, -95.34405626799516),\n (42.18692017366623, -91.93032741511365),\n (42.4802543416051, -88.47932636547252),\n (42.66881568690329, -85.00175846666659),\n (42.75128706952139, -81.50905885116296),\n (42.72708599453554, -78.01308797522954),\n (42.59638380227174, -74.52579917182065),\n (np.float64(42.3601), np.float64(-71.0589))]","content_type":"text/plain"}}}],"key":"VbT4IxH3xx"}],"key":"owvXe8LudP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_coordinate(intermediate_ellipsoid,\n                title=f\"(Ellipsoid) Interpolate on Fraction {fraction}\")","key":"OQpm0jVKSr"},{"type":"output","id":"_KXTdLedWS7oVrw5gFM4Q","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"df157e776b805f13b4e712ca328e5d58","path":"/great-circle-cookbook/_preview/6/build/df157e776b805f13b4e712ca328e5d58.png"}}}],"key":"NFjCBJIwP8"}],"key":"XhLaldGSzF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"distance_unit_sphere_default = distance_between_points_default(\"boulder\", \"boston\")\nintermediate_unit_sphere = calculate_intermediate_pts(\"boulder\", \"boston\",\n                                               fraction, distance_unit_sphere_default)\nprint(f\"{len(intermediate_unit_sphere)} Total Points\")\nintermediate_unit_sphere","key":"DIfZuhWLyM"},{"type":"output","id":"ox5J59uWA1bokthjj9uYF","data":[{"output_type":"stream","name":"stdout","text":"11 Total Points\n"},{"output_type":"execute_result","execution_count":25,"metadata":{},"data":{"text/plain":{"content":"[(np.float64(40.015), np.float64(-105.2705)),\n (np.float64(40.69956840796515), np.float64(-102.0224051615289)),\n (np.float64(41.291305596308824), np.float64(-98.71150732723615)),\n (np.float64(41.786544424077), np.float64(-95.3450112546059)),\n (np.float64(42.1820804843035), np.float64(-91.93144054027105)),\n (np.float64(42.475261312703864), np.float64(-88.48050569778584)),\n (np.float64(42.66406520473303), np.float64(-85.00290620334833)),\n (np.float64(42.74716436193266), np.float64(-81.51007310432796)),\n (np.float64(42.723967826794556), np.float64(-78.01386515980239)),\n (np.float64(42.59464096704978), np.float64(-74.52623685097386)),\n (np.float64(42.3601), np.float64(-71.0589))]","content_type":"text/plain"}}}],"key":"KmQx2Pqj9S"}],"key":"U0UR9gdTAv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_coordinate(intermediate_unit_sphere,\n                title=f\"(Unit Sphere) Interpolate on Fraction {fraction}\")","key":"Jm3a6G0HPj"},{"type":"output","id":"tiImI5R9WMKW141mVUpUv","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"9d489dd56ba43b872c45a6d96391ffa1","path":"/great-circle-cookbook/_preview/6/build/9d489dd56ba43b872c45a6d96391ffa1.png"}}}],"key":"Zj1RppmjRy"}],"key":"RHVIsJZPi3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# compare math and geodesic outputs\nfor i in range(len(intermediate_ellipsoid)):\n    _, _, distance_m = geodesic.inv(intermediate_ellipsoid[i][0], intermediate_ellipsoid[i][1],\n                                   intermediate_unit_sphere[i][0], intermediate_unit_sphere[i][1])\n    if np.isnan(distance_m): distance_m = 0\n    print(f\"Distance between ellipsoid/unit sphere defined point {i}: {distance_m} meters\")","key":"vEwmxmFmGt"},{"type":"output","id":"SWNB1RKLoNhWg4mgL3K7D","data":[{"output_type":"stream","name":"stdout","text":"Distance between ellipsoid/unit sphere defined point 0: 0 meters\nDistance between ellipsoid/unit sphere defined point 1: 0 meters\nDistance between ellipsoid/unit sphere defined point 2: 0 meters\nDistance between ellipsoid/unit sphere defined point 3: 0 meters\nDistance between ellipsoid/unit sphere defined point 4: 0 meters\nDistance between ellipsoid/unit sphere defined point 5: 132.55154860348821 meters\nDistance between ellipsoid/unit sphere defined point 6: 136.26443374199349 meters\nDistance between ellipsoid/unit sphere defined point 7: 132.0972186842191 meters\nDistance between ellipsoid/unit sphere defined point 8: 112.95654352480192 meters\nDistance between ellipsoid/unit sphere defined point 9: 71.29186326482345 meters\nDistance between ellipsoid/unit sphere defined point 10: 0.0 meters\n"}],"key":"pTXhVxwByW"}],"key":"u0UjuZLNjZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine the Midpoint of a Great Circle Arc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iG4Yq2lDMA"}],"identifier":"determine-the-midpoint-of-a-great-circle-arc","label":"Determine the Midpoint of a Great Circle Arc","html_id":"determine-the-midpoint-of-a-great-circle-arc","implicit":true,"key":"xgonxSXg3y"}],"key":"UMAVcW5F9f"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The midpoint of an arc can be determiend as a fractional distance along an arc where f = 0.5.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S4XbwMleZq"}],"key":"mj22b5fhCz"}],"key":"bdyrbz301L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"midpoint = distance_meter / 2\nlat_start, lon_start = location_df.loc[\"boulder\", \"latitude\"], location_df.loc[\"boulder\", \"longitude\"]\nlat_end, lon_end = location_df.loc[\"boston\", \"latitude\"], location_df.loc[\"boston\", \"longitude\"]\n\nintermediate_geodesic = interpolate_points_along_gc(lat_start,\n                                          lon_start,\n                                          lat_end,\n                                          lon_end,\n                                          midpoint)\nprint(f\"{len(intermediate_geodesic)} Total Points\")\nprint(intermediate_geodesic)\nprint(f\"Midpoint = {intermediate_geodesic[1]}\")","key":"FiH0CarmLb"},{"type":"output","id":"-46pGvKRnsXjBzxJHy2Ib","data":[{"output_type":"stream","name":"stdout","text":"3 Total Points\n[(np.float64(40.015), np.float64(-105.2705)), (42.48025434160511, -88.4793263654725), (np.float64(42.3601), np.float64(-71.0589))]\nMidpoint = (42.48025434160511, -88.4793263654725)\n"}],"key":"XCFOBGHOmE"}],"key":"ZFZb4prPU6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"distance_unit_sphere_default = distance_between_points_default(\"boulder\", \"boston\")\nintermediate_unit_sphere = calculate_intermediate_pts(\"boulder\", \"boston\",\n                                               1/2, distance_unit_sphere_default)\nprint(f\"{len(intermediate_unit_sphere)} Total Points\")\nprint(intermediate_unit_sphere)\nprint(f\"Midpoint = {intermediate_unit_sphere[1]}\")","key":"jujQpr8ZG3"},{"type":"output","id":"TQpjf-7bkBrhIAlUaA5C3","data":[{"output_type":"stream","name":"stdout","text":"3 Total Points\n[(np.float64(40.015), np.float64(-105.2705)), (np.float64(42.475261312703864), np.float64(-88.48050569778584)), (np.float64(42.3601), np.float64(-71.0589))]\nMidpoint = (np.float64(42.475261312703864), np.float64(-88.48050569778584))\n"}],"key":"Bjrtso48VV"}],"key":"KqVYKcy7hv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Compare geodesic and unit sphere\n_, _, distance_m = geodesic.inv(intermediate_geodesic[1][0], intermediate_geodesic[1][1],\n                                   intermediate_unit_sphere[1][0], intermediate_unit_sphere[1][1])\nprint(f\"Distance between geodesic/unint sphere defined midpoint = {distance_m} meters\")","key":"j2kArP40mg"},{"type":"output","id":"i3FNQvVd-7G980g5XL697","data":[{"output_type":"stream","name":"stdout","text":"Distance between geodesic/unint sphere defined midpoint = 132.55154860505925 meters\n"}],"key":"kRYDnPiFTu"}],"key":"aLr3v9Ea61"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Generate a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nKm627vKgt"}],"identifier":"generate-a-great-circle-path","label":"Generate a Great Circle Path","html_id":"generate-a-great-circle-path","implicit":true,"key":"CTD9DZX1aA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Generate points along a great circle path bewtween two points.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wT2RpnCIFe"}],"key":"sWGSB4vNTU"}],"key":"FOtv9VfPF2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate Latitude Coordinates based on Longitude Coordinates\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # note: can be expanded to handle input of np arrays by filter out antipodal/merdiain points\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((np.rad2deg(new_lat), np.rad2deg(gc_lon)))\n    return gc_lat_lon","key":"m821IVMq8a"},{"type":"output","id":"v_Q1S8uPtr758xyUvvB8A","data":[],"key":"Z8pO5DlbwK"}],"key":"PClc1fHzq4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def arc_points(start_lat=None,\n               start_lon=None,\n               end_lat=None,\n               end_lon=None,\n               n_total_points=10):\n    _, _, distance_meter =  geodesic.inv(start_lon,\n                                        start_lat,\n                                        end_lon,\n                                        end_lat)\n        \n    distance_between_points_meter = distance_meter / (n_total_points + 1)\n\n    \n    points_along_arc = interpolate_points_along_gc(start_lat,\n                                              start_lon,\n                                              end_lat,\n                                              end_lon,\n                                              distance_between_points_meter)\n    return points_along_arc","key":"gxdqhC1Mx1"},{"type":"output","id":"r2j_7Km3deRFYK-_aFt2P","data":[],"key":"H9thRkSqcb"}],"key":"dgYF9HVli5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_coordinate(lat_lon_lst=None,\n                    start_point=None, end_point=None,\n                    title=None):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -180, 180, -90, 90\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.BORDERS, edgecolor='grey')\n    ax.add_feature(cfeature.STATES, edgecolor=\"grey\")\n        \n    # Plot Latitude/Longitude Location of great circle path\n    longitudes = [x[1] for x in lat_lon_lst] # longitude\n    latitudes = [x[0] for x in lat_lon_lst] # latitude\n    plt.plot(longitudes, latitudes, c=\"cornflowerblue\")\n    plt.scatter(longitudes, latitudes, c=\"cornflowerblue\")\n\n    # Overly great circle with arc rom start/end point\n    start_end_lat_lon = arc_points(location_df.loc[start_point, \"latitude\"],\n                                   location_df.loc[start_point, \"longitude\"],\n                                   location_df.loc[end_point, \"latitude\"],\n                                   location_df.loc[end_point, \"longitude\"],\n                                   n_total_points=20)\n    longitudes = [x[1] for x in start_end_lat_lon] # longitude\n    latitudes = [x[0] for x in start_end_lat_lon] # latitude\n    plt.plot(longitudes, latitudes, c=\"red\")\n    plt.scatter(longitudes, latitudes, c=\"red\")\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(title)\n    plt.show()","key":"Pe09srQE4y"},{"type":"output","id":"jjwd7yt3-Zy5j0AGxMI1w","data":[],"key":"eSjWHYZbC5"}],"key":"beGTC9JrxX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start_pt = \"boulder\"\nend_pt = \"boston\"\nn_pts = 360\nlat_lon_pts = generate_latitude_along_gc(start_pt, end_pt, number_of_lon_pts=n_pts)\nplot_coordinate(lat_lon_pts, start_pt, end_pt,\n                f\"Plot Great Circle, made from the arc {start_pt.title()} to {end_pt.title()}\")","key":"ulwZzdKBX0"},{"type":"output","id":"WNyWWw-LsrofMsqVPFlDv","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"952cc17e79c125ec65c6b1015125342a","path":"/great-circle-cookbook/_preview/6/build/952cc17e79c125ec65c6b1015125342a.png"}}}],"key":"Nw0zrEBfz1"}],"key":"ACWSt7DEIF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start_pt = \"arecibo\"\nend_pt = \"greenwich\"\nn_pts = 360\nlat_lon_pts = generate_latitude_along_gc(start_pt, end_pt, number_of_lon_pts=n_pts)\nplot_coordinate(lat_lon_pts, start_pt, end_pt,\n                f\"Plot Great Circle, made from the arc {start_pt.title()} to {end_pt.title()}\")","key":"bZm5zyG4OZ"},{"type":"output","id":"JLOoFMF4vSZNXO2G8Iuxt","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fd0b822f41968f426b37ea027e47c89b","path":"/great-circle-cookbook/_preview/6/build/fd0b822f41968f426b37ea027e47c89b.png"}}}],"key":"Oyyy6XjZV3"}],"key":"PaQUYSHu2m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start_pt = \"zambezi\"\nend_pt = \"svalbard\"\nn_pts = 360\nlat_lon_pts = generate_latitude_along_gc(start_pt, end_pt, number_of_lon_pts=n_pts)\nplot_coordinate(lat_lon_pts, start_pt, end_pt,\n                f\"Plot Great Circle, made from the arc {start_pt.title()} to {end_pt.title()}\")","key":"jeWjGvNnlY"},{"type":"output","id":"1KxBYownQc_hXDtq1Keo5","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1ffbe7bc6b01ca34e0351c9a2546edd9","path":"/great-circle-cookbook/_preview/6/build/1ffbe7bc6b01ca34e0351c9a2546edd9.png"}}}],"key":"hVBSKGvppL"}],"key":"ox4rWUuwnu"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine an Antipodal Point","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PrWLGhVyqB"}],"identifier":"determine-an-antipodal-point","label":"Determine an Antipodal Point","html_id":"determine-an-antipodal-point","implicit":true,"key":"dIRifIWuQL"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Antipodal is the point on the globe that is on the exact opposite side of the Earth.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EOkbEPkbYy"}],"key":"lvcsPWeigF"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Antipodal latitude is defined as:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wptPSoMtqy"}],"key":"i6iNcTHpFT"},{"type":"math","value":"\\text{antipodal latitude} = -1 * \\text{latitude}","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>antipodal latitude</mtext><mo>=</mo><mo>−</mo><mn>1</mn><mo>∗</mo><mtext>latitude</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{antipodal latitude} = -1 * \\text{latitude}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">antipodal latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">latitude</span></span></span></span></span></span>","enumerator":"16","key":"gy0G8OsOmX"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Antipodal longitude is defined as:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"F4dhfLcvmv"}],"key":"bi7qAdtCPr"},{"type":"math","value":"\\text{anitpodal longitude} = (\\text{longitude} + 180) \\text{ if longitude} \\le 0","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>anitpodal longitude</mtext><mo>=</mo><mo stretchy=\"false\">(</mo><mtext>longitude</mtext><mo>+</mo><mn>180</mn><mo stretchy=\"false\">)</mo><mtext> if longitude</mtext><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\text{anitpodal longitude} = (\\text{longitude} + 180) \\text{ if longitude} \\le 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">anitpodal longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">180</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\"> if longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>","enumerator":"17","key":"Nyyr3q0rUW"},{"type":"math","value":"\\text{anitpodal longitude} = (\\text{longitude} - 180) \\text{ if longitude} \\gt 0","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>anitpodal longitude</mtext><mo>=</mo><mo stretchy=\"false\">(</mo><mtext>longitude</mtext><mo>−</mo><mn>180</mn><mo stretchy=\"false\">)</mo><mtext> if longitude</mtext><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\text{anitpodal longitude} = (\\text{longitude} - 180) \\text{ if longitude} \\gt 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">anitpodal longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">180</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\"> if longitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>","enumerator":"18","key":"wYFTGxItsZ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://www.antipodesmap.com/","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Antipodes Map","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Z5dWBdKDTc"}],"urlSource":"https://www.antipodesmap.com/","key":"dGpe31Vjee"}],"key":"h3EHk9t2ZB"}],"key":"GgYDOSxlby"}],"key":"cexNHY62dm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def antipodal(start_point=None):\n    anti_lat = -1 * location_df.loc[start_point, \"latitude\"]\n    ref_lon = location_df.loc[start_point, \"longitude\"]\n    if ref_lon > 0:\n        anti_lon = ref_lon - 180\n    else:\n        anti_lon = ref_lon + 180\n    #if anti_lon >= 180:\n    #    anti_lon = -1 * (anti_lon % 180)\n    return (anti_lat, anti_lon)","key":"k4b9aFYz47"},{"type":"output","id":"D_TudaQD_G4uFBRaFRR1x","data":[],"key":"nV4PA9y8h7"}],"key":"XwS378s0ip"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def is_antipodal(start_point=None, end_point=None):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n    return lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi","key":"xS6clgi0ff"},{"type":"output","id":"FugE09H7FCmQQLB9jO0LW","data":[],"key":"vpUnGSQjom"}],"key":"Xu1wX8ebP1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_antipodal(start_point=None):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -180, 180, -90, 90\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.BORDERS, edgecolor='grey')\n    ax.add_feature(cfeature.STATES, edgecolor=\"grey\")\n        \n    # Plot Start point\n    plt.scatter(location_df.loc[start_point, \"longitude\"],\n                location_df.loc[start_point, \"latitude\"],\n                s=100, c=\"cornflowerblue\", label=start_point.title())\n\n    # Plot Antipodal Point\n    antipodal_point = antipodal(start_point)\n    plt.scatter(antipodal_point[1], antipodal_point[0], s=100, c=\"red\", label=\"Antipodal\")\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(f\"{start_point.title()} and Antipodal Point {antipodal_point}\")\n    plt.legend(loc=\"lower right\")\n    plt.show()","key":"KIi7p8fvMm"},{"type":"output","id":"NW6Z2s5aiY1R3x7ypR3q9","data":[],"key":"GqlA6VGzNf"}],"key":"GLcKfKQ8VL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(antipodal(\"boulder\"))\nplot_antipodal(\"boulder\")","key":"Z8fWD1W2wP"},{"type":"output","id":"JZyD6Y9KYCqRSei6qZz5W","data":[{"output_type":"stream","name":"stdout","text":"(np.float64(-40.015), np.float64(74.7295))\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"40134eea94ab99f1ec14f1b7e63e84fe","path":"/great-circle-cookbook/_preview/6/build/40134eea94ab99f1ec14f1b7e63e84fe.png"}}}],"key":"JsK9wADK5c"}],"key":"fvOo6vtwmN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(antipodal(\"svalbard\"))\nplot_antipodal(\"svalbard\")","key":"SIW4ut6gdV"},{"type":"output","id":"AmOcwc_bYMlSRNGF5gvXc","data":[{"output_type":"stream","name":"stdout","text":"(np.float64(-77.875), np.float64(-159.0248))\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"62c6118c13d47a09aa0a54b6a86888ba","path":"/great-circle-cookbook/_preview/6/build/62c6118c13d47a09aa0a54b6a86888ba.png"}}}],"key":"z4OkiuzYKl"}],"key":"oj4aOcAE6q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(antipodal(\"cairo\"))\nplot_antipodal(\"cairo\")","key":"IaVB6wsOc4"},{"type":"output","id":"9OwYaBCsbYvVB3MrfDaTO","data":[{"output_type":"stream","name":"stdout","text":"(np.float64(-30.0444), np.float64(-148.7643))\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"69298ba6b78aebfdcad5aab87f3f1052","path":"/great-circle-cookbook/_preview/6/build/69298ba6b78aebfdcad5aab87f3f1052.png"}}}],"key":"HNqQVJva0V"}],"key":"kJvP1vEgNG"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zS27KId9YN"}],"key":"SVZAHvKrE1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HIpCR5jJro"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"nubUvdXER7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Calculating and mapping the midpoint and intermediate points along the great circle arc and closed circle path.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MN5mPtqyjv"}],"key":"wt2zkLB81X"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PlTi3LaVYc"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"nUdq5tbQgo"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"With a great circle arc defined, determine if a third point is along the arc or at what distance it sits from the great circle arc and path.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vIvWdxnRxD"}],"key":"LAb4g1W0VQ"}],"key":"uACqmgaIWk"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zfz33x3kY9"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"Jcu0mFLJRR"}],"key":"GQOiILMg0w"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Ed Williams “Avitation Formulary”","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Wpp1kKjeZn"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"TqEzPpdbYm"}],"key":"modiLmDUaq"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Movable Type Scripts","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"x1CFXvPUmI"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"gKAjqD56aY"}],"key":"sqNKhAei6j"}],"key":"aq6gOY5usT"}],"key":"tZ6HniiVb7"}],"key":"B9u5Y4wtgY"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Coordinate Types","url":"/notebooks/foundations/coordinates","group":"Foundations"},"next":{"title":"Great Circles and a Point","url":"/notebooks/tutorials/arc-to-point","group":"Tutorials"}}},"domain":"http://localhost:3000"}