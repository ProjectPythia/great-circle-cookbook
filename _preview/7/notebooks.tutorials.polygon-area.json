{"version":2,"kind":"Notebook","sha256":"a24f6f8fbf11a0c9c0630c754a16f347c5226e122ef46afeb9195b5e70d45810","slug":"notebooks.tutorials.polygon-area","location":"/notebooks/tutorials/6_polygon_area.ipynb","dependencies":[],"frontmatter":{"title":"Spherical Polygons and Areas","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Cora Schneck","given":"Cora","family":"Schneck"},"name":"Cora Schneck","orcid":"0009-0009-1415-5170","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-1"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2025","affiliations":[{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/HEAD/notebooks/tutorials/6_polygon_area.ipynb","thumbnail":"/great-circle-cookbook/_preview/7/build/701107a0e2ee97885d350edb1770afee.gif","exports":[{"format":"ipynb","filename":"6_polygon_area.ipynb","url":"/great-circle-cookbook/_preview/7/build/6_polygon_area-bdbfdc093777b015d671ab5082202616.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/_preview/7/build/701107a0e2ee97885d350edb1770afee.gif","alt":"Tiling of the sphere by spherical triangles","key":"QNDZmkFf2I","urlSource":"https://upload.wikimedia.org/wikipedia/commons/f/f2/Sphere5tesselation.gif"}],"key":"uxQGU0KQT7"}],"key":"zNq7DHmQuZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mlG60kCgFh"}],"identifier":"spherical-polygons-and-areas","label":"Spherical Polygons and Areas","html_id":"spherical-polygons-and-areas","implicit":true,"key":"FEvkXYjaH4"}],"key":"lwhRxxnXFH"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hRXCiCge63"}],"key":"N6aeTHWXZF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FezdRdrLru"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"lblKJbHYX0"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook, we will calculate how to use spherical polygons on a unit sphere to determine areas and perimeters.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"IwezOlxePx"}],"key":"Y0yPrfonDE"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Calculate area and permieter of quadrilateral patch on a unit sphere","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"G3pfafTJUg"}],"key":"P2e0pux9Um"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wGolEavR4W"}],"key":"HjaDy7UCIy"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"RWzY4lmkR3"}],"key":"Lb0FyQou21"}],"key":"OBOfmpGioa"}],"key":"GJhvnyQS2G"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zTxdJOWvFD"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"U9ksBhFOFq"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vKiAj1FwYz"}],"key":"z2rfZx6nGD"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QZly7GwIYJ"}],"key":"YkrNfNHk7P"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ll2i270VRy"}],"key":"AqYE0YT1h4"}],"key":"gJHfOYU4Rq"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"k69SHXsRta"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"gwjCY9sDoa"}],"key":"lkryDHytrl"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ufkPBbAgby"}],"key":"a0xwKM65LF"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TYJZK5sDYV"}],"key":"r3VGeKcILj"}],"key":"ucJv1cwf5I"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HkKKxAZeX2"}],"urlSource":"https://foundations.projectpythia.org/core/pandas","key":"A4K7q8mMYg"}],"key":"CfTn8Qy8w1"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"rl3Sysqn5U"}],"key":"N154afll8A"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"fc7qUnBbwv"}],"key":"N6OFsu68Ka"}],"key":"QJn5Y6wSjg"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vP4pYQQZ6D"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"rf3Jku53Ro"}],"key":"Xj3xLNAmhR"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NNsSUDBqAO"}],"key":"yZRWlgzRuq"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RyOSNgu54D"}],"key":"TzSGp8m8X8"}],"key":"NXh2jNu4GU"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"W9vTHSOFQP"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/","key":"U8CySMukNr"}],"key":"uB0ckhrJvP"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RRN651Nqn0"}],"key":"aR5c2IF9Ug"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"f9wspanPZa"}],"key":"HguMAyjFrh"}],"key":"iFACtw9g6O"}],"key":"MhLHkYER96"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"VkmaAxCpAK"}],"key":"RE1FLcsPqe"},{"type":"text","value":": 20 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"npniDn8SGx"}],"key":"QQJEYfNyh0"}],"key":"of9arOHRIB"}],"key":"T0xsHAJVri"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MsSdnWjH9j"}],"key":"SoUG6aEm7k"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QURBEG4LiI"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"QPb55zdPmj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Lhf442hCCT"}],"key":"tBQhWTuehM"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"xKw2zCBZka"}],"key":"u5dw8j8sVN"}],"key":"N9UyuH2VSm"}],"key":"f9FLgSCl1D"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"wuK8nwmjcI"},{"type":"output","id":"cu6FHNBASIMvEC1_CqZm4","data":[],"key":"UJH5AvgdPo"}],"key":"NZIS4GUEtZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"mLd3SbCbZ8"},{"type":"output","id":"k1mdlpy7cdfbtDx4hY2T1","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude    cart_x    cart_y    cart_z  rho     theta  \\\n0   arecibo   18.3441   -66.7527  0.374643 -0.872119  0.314723  1.0 -1.165054   \n1   boulder   40.0150  -105.2705 -0.201714 -0.738835  0.642988  1.0  1.304276   \n2    boston   42.3601   -71.0589  0.239852 -0.698914  0.673788  1.0 -1.240212   \n3  redwoods   41.4017  -124.0417 -0.419898 -0.621549  0.661334  1.0  0.976657   \n4   houston   29.5518   -95.0982 -0.077303 -0.866469  0.493210  1.0  1.481816   \n\n        phi       polar_x       polar_y       polar_z  \n0  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>0.374643</td>\n      <td>-0.872119</td>\n      <td>0.314723</td>\n      <td>1.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-0.201714</td>\n      <td>-0.738835</td>\n      <td>0.642988</td>\n      <td>1.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>0.239852</td>\n      <td>-0.698914</td>\n      <td>0.673788</td>\n      <td>1.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-0.419898</td>\n      <td>-0.621549</td>\n      <td>0.661334</td>\n      <td>1.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-0.077303</td>\n      <td>-0.866469</td>\n      <td>0.493210</td>\n      <td>1.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"gQDEDB8CPl"}],"key":"MUWHbXuwq8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"MzVfdUOkPF"},{"type":"output","id":"ukhzyvFmLjx57C0fLjIs-","data":[],"key":"OUEPJ1NM90"}],"key":"AFeU2Ueu6W"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area and Perimeter of quadrilateral patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ms1HEisC10"}],"identifier":"area-and-perimeter-of-quadrilateral-patch","label":"Area and Perimeter of quadrilateral patch","html_id":"area-and-perimeter-of-quadrilateral-patch","implicit":true,"key":"MjexkGqocm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can make use of the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g8u8kiva9a"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gtvpum47m9"},{"type":"text","value":" Python package to calculate the area and perimeter of a patch formed by a list of latitude and longitude coordinates for an ellipsoid or a unit sphere.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KslnojDDB4"}],"key":"dVL4BNSZYE"}],"key":"UqBiDE9HME"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def area_of_polygon_ellps(poly_pts=None):\n    geod = Geod(ellps=\"WGS84\")\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km\n\ndef area_of_polygon_unit_sphere(poly_pts=None):\n    geod = Geod(ellps=\"sphere\") # 'sphere': {'a': 6370997.0, 'b': 6370997.0, 'description': 'Normal Sphere (r=6370997)'\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km","key":"wm0W8TKBsG"},{"type":"output","id":"WJCfiG2teruSGBX6j84S3","data":[],"key":"oYAKhXFdEF"}],"key":"HaqH2v5KZ2"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s compare how area and perimeter vary based on whether you use an ellpsoid like  WGS-84 and a unit sphere. The changes will become more pronounced as you move further towards the poles.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tvbk2BXYIf"}],"key":"SF86PMJ1qz"}],"key":"ST3OywMMRd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"area_ellps, perimeter_ellps = area_of_polygon_ellps([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\narea_us, perimeter_us = area_of_polygon_unit_sphere([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\nprint(f\"Area Ellipsoid   = {area_ellps} km^2\")\nprint(f\"Area Unit Sphere = {area_us} km^2\")\nprint(f\"Perimeter Ellipsoid = {perimeter_ellps} km\")\nprint(f\"Perimeter Unit SPhere = {perimeter_us} km\")\nprint(f\"Roughly {(area_ellps/509600000)*100:.2f}% of the Earth's Surface\")\nprint(f\"Roughly {(area_us/509600000)*100:.2f}% of the Earth's Surface\")","key":"x7WGPpv7ps"},{"type":"output","id":"GkbRh-R5Ng5m9lVKv0Kgs","data":[{"output_type":"stream","name":"stdout","text":"Area Ellipsoid   = 5342585.6476998255 km^2\nArea Unit Sphere = 5344606.94796931 km^2\nPerimeter Ellipsoid = 10171.738963248145 km\nPerimeter Unit SPhere = 10170.504728302833 km\nRoughly 1.05% of the Earth's Surface\nRoughly 1.05% of the Earth's Surface\n"}],"key":"oKKf9eiGKT"}],"key":"OFuSWcEExi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Area of Quadrilateral Patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mmviupxeFa"}],"identifier":"plot-area-of-quadrilateral-patch","label":"Plot Area of Quadrilateral Patch","html_id":"plot-area-of-quadrilateral-patch","implicit":true,"key":"fjoQIAlP6Y"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s see what spherical polygons looks like on a world map!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JaMOgSoRWL"}],"key":"YX7dB5Hxwb"}],"key":"DFaYvPdy1y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_area(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # determine the area and perimeter\n    area_ellps, perimeter_ellps = area_of_polygon_ellps(pt_lst)\n    area_us, perimeter_us = area_of_polygon_unit_sphere(pt_lst)\n    print(f\"Ellipsoid Area   = {area_ellps} km^2\")\n    print(f\"Unit Sphere Area = {area_us} km^2\")\n    plt.title(f\"Roughly {(area_ellps/509600000)*100:.2f}% ({(area_us/509600000)*100:.2f}%) of the Earth's Surface\")\n    plt.show()","key":"hHL2Nu0c4e"},{"type":"output","id":"MEkh6vRdj9ebpvhfuuG1S","data":[],"key":"R5BnvseDXj"}],"key":"uqqZbbEbvj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"arecibo\", \"houston\"])","key":"TtsM2owd2C"},{"type":"output","id":"LpF2LzeGXP11v4NR97-4a","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 21872449.378265787 km^2\nUnit Sphere Area = 21896220.663299154 km^2\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"cd7c8cadb8adb3a873ecee04ac81bc66","path":"/great-circle-cookbook/_preview/7/build/cd7c8cadb8adb3a873ecee04ac81bc66.png"}}}],"key":"FF0Zf4i0Bh"}],"key":"rLLwUwH3wM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"rockford\", \"boston\", \"houston\",], -130, -60, 20, 60)","key":"s0K6JwxOcX"},{"type":"output","id":"dH6jTy4lTtHDKNo2xL4gx","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3150946.426714995 km^2\nUnit Sphere Area = 3149017.3086414044 km^2\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b03acc9da630950bb6bb21e3579587e7","path":"/great-circle-cookbook/_preview/7/build/b03acc9da630950bb6bb21e3579587e7.png"}}}],"key":"Z184iem5LS"}],"key":"lzmEnRdkKJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"znorQYDaiX"},{"type":"output","id":"6RWm93VgGjy-PAavQEC_x","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3788155.432965353 km^2\nUnit Sphere Area = 3782548.632737316 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f9d39e8938aa9fe781c13a6edd2e607c","path":"/great-circle-cookbook/_preview/7/build/f9d39e8938aa9fe781c13a6edd2e607c.png"}}}],"key":"jhuqwGQlGy"}],"key":"eO8SHZ8NFy"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"pIQnsYOv41"}],"key":"xryPVVdBR1"},{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Make sure that the points that form the polygon are in a clockwise or counterclockwise order. Otherwise, the polygon formed will have overlapping portions and the area will not be valid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wB408zZa33"}],"key":"NOgz8B4UQL"}],"kind":"important","class":"simple","key":"BxuPAxVGc1"}],"key":"FIgm1FcYbw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# For example: here is a list of unordered points\nplot_area([\"boulder\", \"boston\", \"houston\", \"boston\", \"cairo\", \"arecibo\", \"greenwich\"])","key":"rhMCPlarx2"},{"type":"output","id":"szFpLWVPXeGz9ih5Jwv41","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 914381.1786067598 km^2\nUnit Sphere Area = 954445.989927043 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"a55ae239a904a1229af3918dbc78374c","path":"/great-circle-cookbook/_preview/7/build/a55ae239a904a1229af3918dbc78374c.png"}}}],"key":"onO7p16n2I"}],"key":"p4lj9fCSwF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VR9Nz4rCwa"}],"identifier":"determine-if-a-given-point-is-within-a-spherical-polygon","label":"Determine if a given point is within a spherical polygon","html_id":"determine-if-a-given-point-is-within-a-spherical-polygon","implicit":true,"key":"qWfJD2j1aY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now that we have a spherical polygon, how can be determine if a new point lies within the area of the polygon? The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eHJpPiWCT3"},{"type":"inlineCode","value":"shapely","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OSb3cPl9yj"},{"type":"text","value":" Python package makes this quite easy, let’s give it a shot!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IkOsV4YtO9"}],"key":"AlF077Q4NK"}],"key":"AGnTWSC1DJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_contains_points(pt_lst=None, polygon_pts=None):\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in polygon_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    # setup polygon\n    polygon = Polygon(lat_lon_coords)\n    # check if new point lies within the polygon\n    contains = np.vectorize(lambda pt: polygon.contains(Point((location_df.loc[pt, \"longitude\"],\n                                                               location_df.loc[pt, \"latitude\"]))))\n    contained_by_polygon = contains(np.array(pt_lst))\n    return contained_by_polygon","key":"gxBAhWTCAj"},{"type":"output","id":"CLznYxhe2678W-MbGJlU0","data":[],"key":"wK2dIEFdAa"}],"key":"pGIynlaAmY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"])","key":"gCgEkZcICX"},{"type":"output","id":"TpYLdcDdew9wSJZLRUoAe","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"GgIdVQYNV7"}],"key":"ADmgchMcVl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot and See if New Point within Polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kLQkwLM4uU"}],"identifier":"plot-and-see-if-new-point-within-polygon","label":"Plot and See if New Point within Polygon","html_id":"plot-and-see-if-new-point-within-polygon","implicit":true,"key":"C1HEywjzpX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"On a map, it can be fairly intuitive to see if a point lies within a polygon or not. Let’s give it a shot!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YtSfpLaUlo"}],"key":"ubsAu1jq8U"}],"key":"OYR5iY8pqG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_polygon_pts(pt_lst=None, polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check points\n    pt_lst = np.array(pt_lst)\n    contains_pts = polygon_contains_points(pt_lst, polygon_pts)\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"green\", label=\"Within Polygon\")\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[~contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[~contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\", label=\"Not within Polygon\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Points contained within polygon = {pt_lst[contains_pts]}, not contained = {pt_lst[~contains_pts]}\")\n    plt.show()","key":"utPzPp3KFJ"},{"type":"output","id":"7aekfaO_KPaTetwBsoFWx","data":[],"key":"VSki4Y01B1"}],"key":"wVBuPB8fVw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"])","key":"ftUWxCObMI"},{"type":"output","id":"eL0Jkg_CJP10AFoIb1J0r","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"gj3T0a5iXA"}],"key":"EWuG7yMs3S"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"Suanip7OuL"},{"type":"output","id":"KEaJD2WVeZ8hr8zOrV32G","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"1b73b751a23b74bc6918c1dce7efa448","path":"/great-circle-cookbook/_preview/7/build/1b73b751a23b74bc6918c1dce7efa448.png"}}}],"key":"DTcnvSHJjx"}],"key":"ZpSuCMFsTR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"])","key":"R7hWsmyvSK"},{"type":"output","id":"IKgCMSk9Kr0YD1uWvRxX3","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"array([False])","content_type":"text/plain"}}}],"key":"xH0X912J5A"}],"key":"XLj846dVXu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"iCW599dOd5"},{"type":"output","id":"cqLYmC-uhI331A7RPK-pm","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"4fe902e8089f16e7914bb64d34216164","path":"/great-circle-cookbook/_preview/7/build/4fe902e8089f16e7914bb64d34216164.png"}}}],"key":"DWKC6nADMs"}],"key":"Q8j6qmbhzI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"oYAbWK1tYw"},{"type":"output","id":"h3jClOE17lAytVqzEy4Gb","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"70afaf06b9ed8e41fbf38b3971ac9a33","path":"/great-circle-cookbook/_preview/7/build/70afaf06b9ed8e41fbf38b3971ac9a33.png"}}}],"key":"p48WuhQMUh"}],"key":"R4PU5FXsWV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"redwoods\"], [\"rockford\", \"boston\", \"cape canaveral\"],\n               -130, -60, 20, 60)","key":"A1sTwKcTBq"},{"type":"output","id":"AOXkod9vaDARhVvOejTAq","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"5ac6b98bc657f904d5ad300ce965cccc","path":"/great-circle-cookbook/_preview/7/build/5ac6b98bc657f904d5ad300ce965cccc.png"}}}],"key":"YYyYtjaRi4"}],"key":"fIV8nXLoex"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AOh8ysLFDe"}],"identifier":"mean-center-of-spherical-polygon","label":"Mean center of spherical polygon","html_id":"mean-center-of-spherical-polygon","implicit":true,"key":"QQkklPBNeW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A spherical polygon can have a fairly regular shape, especially as more points are added. But it is fairly simple using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fm1XSgVQyv"},{"type":"inlineCode","value":"shapley","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lTeIWeEovE"},{"type":"text","value":" Python package to determine the mean center.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SjkrVPuet2"}],"key":"thcKiuKzRS"}],"key":"vxXuK80XGE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_centroid(polygon_pts=None):\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts]\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    return (polygon.centroid.y, polygon.centroid.x)","key":"TfotRh9qoY"},{"type":"output","id":"5hA-7ZfkkedkV6Cxmm8LV","data":[],"key":"rt7YmdbCby"}],"key":"ARCgR9glEh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_centroid([\"boulder\", \"boston\", \"houston\"])","key":"p8PRsfc0ZH"},{"type":"output","id":"CeT9X2xNYe33Pi922wcTZ","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"(37.30896666666666, -90.47586666666665)","content_type":"text/plain"}}}],"key":"bJ3DzgzJ56"}],"key":"Cjj1szeMtw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Centroid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kMMNC552sG"}],"identifier":"plot-centroid","label":"Plot Centroid","html_id":"plot-centroid","implicit":true,"key":"amY1WVnuTN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The center of a polygon can be fairly apparently on a map, let’s give it a look!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Z5gIAGBVNV"}],"key":"mDOxnq1j9y"}],"key":"OPF1cs866C"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_centroid(polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check point\n    centeroid = polygon_centroid(polygon_pts)\n    plt.scatter(centeroid[1], centeroid[0], s=100, c=\"red\")\n    plt.title(f\"Centroid = {centeroid}\")\n    plt.show()","key":"o3Yfv4crTZ"},{"type":"output","id":"7kFYlnw1IrkjDg9DDvPq-","data":[],"key":"fFNogHEuFy"}],"key":"u2G0wugnzn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"boulder\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"TXxGAmasH8"},{"type":"output","id":"bwgOcIhYM1cVDczY6t7hO","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"935cf15c3c97406f7c5dd930c29493f1","path":"/great-circle-cookbook/_preview/7/build/935cf15c3c97406f7c5dd930c29493f1.png"}}}],"key":"d2syB6r3Z1"}],"key":"ZDr8FCLY8k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"redwoods\", \"boulder\", \"cape canaveral\", \"houston\"],\n               -130, -60, 20, 60)","key":"ULhqn5iOEl"},{"type":"output","id":"lHRqF_4vxccmIX2aMDIA_","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"07478d9325f9eaa7428f2101633cd164","path":"/great-circle-cookbook/_preview/7/build/07478d9325f9eaa7428f2101633cd164.png"}}}],"key":"JMBdLF65Fv"}],"key":"KwOfCKlTJt"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"C0TZdutD6K"}],"key":"a7mdt5KkAU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BuXbasKaoE"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"ZXQIF0WLod"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook covers working with spherical polygons to determine the ordering of coordinates, center of polygons, and whether or not a point lies within a spherical polygon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"x2MZjD56rs"}],"key":"mjoVuX0a0y"}],"key":"BChz9StF7k"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wKrajbLj4Y"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"Ap6jnQrdvA"}],"key":"V0ttdc3Qms"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H8KNpnQiwI"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"eOsSpDguC6"}],"key":"U47gzxpJUU"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gE8h6yu7zK"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"usmOoXvjK4"}],"key":"JUwpiZ3s88"}],"key":"HxAkT8pNbO"}],"key":"LvrFjbW5KQ"}],"key":"IhtS4NDvmO"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}