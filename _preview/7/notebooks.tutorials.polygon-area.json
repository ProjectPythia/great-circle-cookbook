{"version":2,"kind":"Notebook","sha256":"a24f6f8fbf11a0c9c0630c754a16f347c5226e122ef46afeb9195b5e70d45810","slug":"notebooks.tutorials.polygon-area","location":"/notebooks/tutorials/6_polygon_area.ipynb","dependencies":[],"frontmatter":{"title":"Spherical Polygons and Areas","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Cora Schneck","given":"Cora","family":"Schneck"},"name":"Cora Schneck","orcid":"0009-0009-1415-5170","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-1"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2025","affiliations":[{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/HEAD/notebooks/tutorials/6_polygon_area.ipynb","thumbnail":"/great-circle-cookbook/_preview/7/build/701107a0e2ee97885d350edb1770afee.gif","exports":[{"format":"ipynb","filename":"6_polygon_area.ipynb","url":"/great-circle-cookbook/_preview/7/build/6_polygon_area-24d36c3306fcd999b0b23018ddedbbb4.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/_preview/7/build/701107a0e2ee97885d350edb1770afee.gif","alt":"Tiling of the sphere by spherical triangles","key":"W0UyD7YkcS","urlSource":"https://upload.wikimedia.org/wikipedia/commons/f/f2/Sphere5tesselation.gif"}],"key":"VSs3Zzbikc"}],"key":"oLL6sm6Ojm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spherical Polygons and Areas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h7f93SA7Mr"}],"identifier":"spherical-polygons-and-areas","label":"Spherical Polygons and Areas","html_id":"spherical-polygons-and-areas","implicit":true,"key":"iOglfB5rtS"}],"key":"PKiJlIkfIx"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V0GA16pHan"}],"key":"VSUgKWHPDt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DY1v6APfHR"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"eqYH6vHxej"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook, we will calculate how to use spherical polygons on a unit sphere to determine areas and perimeters.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Fxv6JlpRka"}],"key":"m32zO2raeK"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Calculate area and permieter of quadrilateral patch on a unit sphere","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Bjt2WuossG"}],"key":"wS0fP63eLk"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tSs8xdFNpZ"}],"key":"QdFPTzWUaI"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"qpFTWHBwKD"}],"key":"Vh05ga0M9f"}],"key":"DZduCOgraP"}],"key":"BqZQD5e2ER"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZXSvnmt4xB"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"DqK4iye6qJ"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oKfK3MrMzb"}],"key":"KaG9CtzWwh"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QA4PerJbbb"}],"key":"PGyL8lo3fO"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XDjWHc2uJ3"}],"key":"KtZlUvCxwM"}],"key":"xgB8MuBgr8"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KGTm7xNrnX"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"PUxCAZLIDJ"}],"key":"ZwHmsrPgvp"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"h9P2ri1doq"}],"key":"dwZDIbFR2M"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xB31erVotw"}],"key":"oM5NlbDftH"}],"key":"HqS7NBnRdQ"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"kI8G25wTOD"}],"urlSource":"https://foundations.projectpythia.org/core/pandas","key":"yxJvfiWG13"}],"key":"Z2dCJeV5ip"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"GDUYQTuL2n"}],"key":"nJOS50W2YA"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KiXeDKHGQn"}],"key":"Mk3TcBEha7"}],"key":"BLKJpdPH6G"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"C18tNmKcEB"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"z03vFHVGNV"}],"key":"cR7qoFqSck"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ayrMR2dlB0"}],"key":"K6RCPgk8ch"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"YfLRlVYBzX"}],"key":"mXBKinRyTC"}],"key":"LPm3OFGLpj"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"WFEcnnlNMe"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/","key":"KglSEHuSXF"}],"key":"F79gC2G1CW"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Lqj5NAsgP7"}],"key":"zAMWTEqjFX"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vJHUEWlo7B"}],"key":"xkjiD8PBM5"}],"key":"m6FquNCkRW"}],"key":"j727g82fmx"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LItuwo0pW4"}],"key":"mIC8HulJUl"},{"type":"text","value":": 20 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"KEOk5wwo7x"}],"key":"NFp4VM7tB0"}],"key":"TtinYgE8Ky"}],"key":"YyCOrIPt3D"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mXMXv4kZZ9"}],"key":"uotb1gPuhG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gOIsOMBypX"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"hXhfswL89y"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PY2m1Qlopr"}],"key":"T2kyqN7y4M"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Kb2Ap3Bb9f"}],"key":"aGbDkfFxdz"}],"key":"uX69OeStSH"}],"key":"K8Msiu81Ub"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nfrom shapely.geometry import Point\nfrom shapely.geometry.polygon import Polygon\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"TJILVxh6C5"},{"type":"output","id":"Br3sXd-thOjvE3dgnqOKF","data":[],"key":"j21YoHW3Q9"}],"key":"eshRByR6gS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"II5JcLv6JB"},{"type":"output","id":"DasfbLOo4a3pHcn8L_mBc","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude    cart_x    cart_y    cart_z  rho     theta  \\\n0   arecibo   18.3441   -66.7527  0.374643 -0.872119  0.314723  1.0 -1.165054   \n1   boulder   40.0150  -105.2705 -0.201714 -0.738835  0.642988  1.0  1.304276   \n2    boston   42.3601   -71.0589  0.239852 -0.698914  0.673788  1.0 -1.240212   \n3  redwoods   41.4017  -124.0417 -0.419898 -0.621549  0.661334  1.0  0.976657   \n4   houston   29.5518   -95.0982 -0.077303 -0.866469  0.493210  1.0  1.481816   \n\n        phi       polar_x       polar_y       polar_z  \n0  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>0.374643</td>\n      <td>-0.872119</td>\n      <td>0.314723</td>\n      <td>1.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-0.201714</td>\n      <td>-0.738835</td>\n      <td>0.642988</td>\n      <td>1.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>0.239852</td>\n      <td>-0.698914</td>\n      <td>0.673788</td>\n      <td>1.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-0.419898</td>\n      <td>-0.621549</td>\n      <td>0.661334</td>\n      <td>1.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-0.077303</td>\n      <td>-0.866469</td>\n      <td>0.493210</td>\n      <td>1.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"jyFE87D0sK"}],"key":"Vug5NzUBhc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"rkUb2vSwDz"},{"type":"output","id":"qRDr7NaZX-rBi-zpdTqC7","data":[],"key":"rh4AmTVWuB"}],"key":"CaFL5VVO0p"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area and Perimeter of quadrilateral patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OivDc5fMMt"}],"identifier":"area-and-perimeter-of-quadrilateral-patch","label":"Area and Perimeter of quadrilateral patch","html_id":"area-and-perimeter-of-quadrilateral-patch","implicit":true,"key":"Fy6UhRVaPe"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can make use of the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AqI9vDvhhu"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zMqLRxp7fE"},{"type":"text","value":" Python package to calculate the area and perimeter of a patch formed by a list of latitude and longitude coordinates for an ellipsoid or a unit sphere.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JWQTtcW3Xo"}],"key":"xs5IM5ywo3"}],"key":"YFOA090OYl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def area_of_polygon_ellps(poly_pts=None):\n    geod = Geod(ellps=\"WGS84\")\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km\n\ndef area_of_polygon_unit_sphere(poly_pts=None):\n    geod = Geod(ellps=\"sphere\") # 'sphere': {'a': 6370997.0, 'b': 6370997.0, 'description': 'Normal Sphere (r=6370997)'\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in poly_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in poly_pts]\n    poly_area_m, poly_perimeter_m = geod.polygon_area_perimeter(longitudes, latitudes)\n    return abs(poly_area_m) * 1e-6, poly_perimeter_m/1000 # km^2 and km","key":"w41wVhJhZA"},{"type":"output","id":"QD3tmxza5ROnYvtmJ0K_M","data":[],"key":"m6DohgH2Xq"}],"key":"yGQo2MdL6E"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s compare how area and perimeter vary based on whether you use an ellpsoid like  WGS-84 and a unit sphere. The changes will become more pronounced as you move further towards the poles.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BxAI03cBMy"}],"key":"gQAGsILpzd"}],"key":"LwHRviog21"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"area_ellps, perimeter_ellps = area_of_polygon_ellps([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\narea_us, perimeter_us = area_of_polygon_unit_sphere([\"boulder\", \"boston\",\n                                             \"arecibo\", \"houston\"])\nprint(f\"Area Ellipsoid   = {area_ellps} km^2\")\nprint(f\"Area Unit Sphere = {area_us} km^2\")\nprint(f\"Perimeter Ellipsoid = {perimeter_ellps} km\")\nprint(f\"Perimeter Unit SPhere = {perimeter_us} km\")\nprint(f\"Roughly {(area_ellps/509600000)*100:.2f}% of the Earth's Surface\")\nprint(f\"Roughly {(area_us/509600000)*100:.2f}% of the Earth's Surface\")","key":"GVA8dozZyC"},{"type":"output","id":"oKv750QTJEOjfbaKVWfR1","data":[{"output_type":"stream","name":"stdout","text":"Area Ellipsoid   = 5342585.6476998255 km^2\nArea Unit Sphere = 5344606.94796931 km^2\nPerimeter Ellipsoid = 10171.738963248145 km\nPerimeter Unit SPhere = 10170.504728302833 km\nRoughly 1.05% of the Earth's Surface\nRoughly 1.05% of the Earth's Surface\n"}],"key":"RGyhDNSqQa"}],"key":"iGNgoDfRTj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Area of Quadrilateral Patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lLnXP4oFrC"}],"identifier":"plot-area-of-quadrilateral-patch","label":"Plot Area of Quadrilateral Patch","html_id":"plot-area-of-quadrilateral-patch","implicit":true,"key":"zmD6tivxxP"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s see what spherical polygons looks like on a world map!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FkRLY2fET7"}],"key":"di8kaGOmxK"}],"key":"J3cAdLE94H"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_area(pt_lst=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # determine the area and perimeter\n    area_ellps, perimeter_ellps = area_of_polygon_ellps(pt_lst)\n    area_us, perimeter_us = area_of_polygon_unit_sphere(pt_lst)\n    print(f\"Ellipsoid Area   = {area_ellps} km^2\")\n    print(f\"Unit Sphere Area = {area_us} km^2\")\n    plt.title(f\"Roughly {(area_ellps/509600000)*100:.2f}% ({(area_us/509600000)*100:.2f}%) of the Earth's Surface\")\n    plt.show()","key":"uSkmaZgBbw"},{"type":"output","id":"LZd1lt6_-T7304zfcSuvU","data":[],"key":"Rv32Hu2c5N"}],"key":"FKerHavM4c"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"boulder\", \"boston\", \"greenwich\", \"cairo\", \"arecibo\", \"houston\"])","key":"ADO9LF2Gmq"},{"type":"output","id":"aTJ121I7YOaqGsbJ5BrKs","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 21872449.378265787 km^2\nUnit Sphere Area = 21896220.663299154 km^2\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f304f4e2a7111c60976d736dc489a7b0","path":"/great-circle-cookbook/_preview/7/build/f304f4e2a7111c60976d736dc489a7b0.png"}}}],"key":"wBlrDcoelz"}],"key":"xgYyoK39Pw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"rockford\", \"boston\", \"houston\",], -130, -60, 20, 60)","key":"AauEgs5cF5"},{"type":"output","id":"Us2-xlTGeIRXTyzIAMGi-","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3150946.426714995 km^2\nUnit Sphere Area = 3149017.3086414044 km^2\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2210978e367d95945cb6baeca9c4c761","path":"/great-circle-cookbook/_preview/7/build/2210978e367d95945cb6baeca9c4c761.png"}}}],"key":"eIBk5WbtZL"}],"key":"LzIk5jruHp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_area([\"redwoods\", \"boston\", \"houston\"], -130, -60, 20, 60)","key":"DK8nladxyH"},{"type":"output","id":"EyldtBIwurYdgvr_3fpZT","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 3788155.432965353 km^2\nUnit Sphere Area = 3782548.632737316 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"43b62416925a37ec4abce176e5e07eed","path":"/great-circle-cookbook/_preview/7/build/43b62416925a37ec4abce176e5e07eed.png"}}}],"key":"jF1blbhzKA"}],"key":"VuRzNWdCaD"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","key":"rlhMhXHNUh"}],"key":"x6qL9iJ33j"},{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Make sure that the points that form the polygon are in a clockwise or counterclockwise order. Otherwise, the polygon formed will have overlapping portions and the area will not be valid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qkwh1CUqYo"}],"key":"WbvXcUi8va"}],"kind":"important","class":"simple","key":"eM1xAv26p5"}],"key":"Eu0rbmDmrc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# For example: here is a list of unordered points\nplot_area([\"boulder\", \"boston\", \"houston\", \"boston\", \"cairo\", \"arecibo\", \"greenwich\"])","key":"hH3NO0N0Gl"},{"type":"output","id":"JvBOgd43y5WuFj8pp0Ss1","data":[{"output_type":"stream","name":"stdout","text":"Ellipsoid Area   = 914381.1786067598 km^2\nUnit Sphere Area = 954445.989927043 km^2\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"560039c1bb6f14d09f145e60a15430e9","path":"/great-circle-cookbook/_preview/7/build/560039c1bb6f14d09f145e60a15430e9.png"}}}],"key":"eHBcnATXJo"}],"key":"e5Oegzxkvj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine if a given point is within a spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"apwPZeGLXV"}],"identifier":"determine-if-a-given-point-is-within-a-spherical-polygon","label":"Determine if a given point is within a spherical polygon","html_id":"determine-if-a-given-point-is-within-a-spherical-polygon","implicit":true,"key":"Dd22hpBnFo"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now that we have a spherical polygon, how can be determine if a new point lies within the area of the polygon? The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W96od39e3U"},{"type":"inlineCode","value":"shapely","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JRatIFILfX"},{"type":"text","value":" Python package makes this quite easy, let’s give it a shot!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uGDkiXpGBk"}],"key":"ZNhJ272vme"}],"key":"SV9irjGrUq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_contains_points(pt_lst=None, polygon_pts=None):\n    longitudes = [location_df.loc[pt, \"longitude\"] for pt in polygon_pts]\n    latitudes = [location_df.loc[pt, \"latitude\"] for pt in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    # setup polygon\n    polygon = Polygon(lat_lon_coords)\n    # check if new point lies within the polygon\n    contains = np.vectorize(lambda pt: polygon.contains(Point((location_df.loc[pt, \"longitude\"],\n                                                               location_df.loc[pt, \"latitude\"]))))\n    contained_by_polygon = contains(np.array(pt_lst))\n    return contained_by_polygon","key":"K86nDGQrpw"},{"type":"output","id":"vZ2VtRDE_lMnhLxEg6dFn","data":[],"key":"pxdJQSRk76"}],"key":"kOOsmJLTmT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"])","key":"v0HV9GSpPK"},{"type":"output","id":"sroDVMJm3IAdwljC_o3i6","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"CiidRxJyxY"}],"key":"IwfMZrx4VH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot and See if New Point within Polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v6crhoo4XW"}],"identifier":"plot-and-see-if-new-point-within-polygon","label":"Plot and See if New Point within Polygon","html_id":"plot-and-see-if-new-point-within-polygon","implicit":true,"key":"luiGDLRcad"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"On a map, it can be fairly intuitive to see if a point lies within a polygon or not. Let’s give it a shot!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fSof0D6ii9"}],"key":"UBGeLcOEo7"}],"key":"bWKFKV16RV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_polygon_pts(pt_lst=None, polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n    # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check points\n    pt_lst = np.array(pt_lst)\n    contains_pts = polygon_contains_points(pt_lst, polygon_pts)\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"green\", label=\"Within Polygon\")\n    longitudes = [location_df.loc[x, \"longitude\"] for x in pt_lst[~contains_pts]] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in pt_lst[~contains_pts]] # latitude\n    plt.scatter(longitudes, latitudes, s=100, c=\"red\", label=\"Not within Polygon\")\n\n    plt.legend(loc=\"lower left\")\n    plt.title(f\"Points contained within polygon = {pt_lst[contains_pts]}, not contained = {pt_lst[~contains_pts]}\")\n    plt.show()","key":"XONM05pgyf"},{"type":"output","id":"mCCxTq6sx_SKIYurLEz7S","data":[],"key":"yJ73rhABcX"}],"key":"GtL5Ox8eUj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"])","key":"L1fS4iuNoE"},{"type":"output","id":"SMXjsPrXq7jbHQ8-2ukjS","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"array([ True])","content_type":"text/plain"}}}],"key":"c2v7ysmDlV"}],"key":"zyxlyk67cd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"H5mhS1eD8t"},{"type":"output","id":"7nlhGdw9qafyS0jQKQmsF","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b9d7a5125d58b954817c740beaab7e29","path":"/great-circle-cookbook/_preview/7/build/b9d7a5125d58b954817c740beaab7e29.png"}}}],"key":"aEdllI3Q6a"}],"key":"g2HDGs1z3b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_contains_points([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"])","key":"x8dKoW4JQP"},{"type":"output","id":"-Dm26XrVMr2XgtP6DcMTM","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"array([False])","content_type":"text/plain"}}}],"key":"vJWxlvGmvg"}],"key":"TH2bDbqQCW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"hhvj7Pru2S"},{"type":"output","id":"eWWRxISYaFahxr0jLF-xN","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2f54e3dc69a9259dc843fd38b77436a2","path":"/great-circle-cookbook/_preview/7/build/2f54e3dc69a9259dc843fd38b77436a2.png"}}}],"key":"S3g2iKt5fX"}],"key":"ZnC1j8Mzye"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"cape canaveral\"], [\"redwoods\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"ha7yECD8Jc"},{"type":"output","id":"r7SJytKlaFC_HDYhB7-Ty","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"87453227cb9d385d9126fc597c52210b","path":"/great-circle-cookbook/_preview/7/build/87453227cb9d385d9126fc597c52210b.png"}}}],"key":"gmU2QYTeFE"}],"key":"bip6pCurR6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_polygon_pts([\"boulder\", \"redwoods\"], [\"rockford\", \"boston\", \"cape canaveral\"],\n               -130, -60, 20, 60)","key":"ZS1EaOVE5P"},{"type":"output","id":"oNJNLbnWy-k6rddJwY6MK","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"28f72c3531815fe056ad2c6385d87066","path":"/great-circle-cookbook/_preview/7/build/28f72c3531815fe056ad2c6385d87066.png"}}}],"key":"f4mYI9Uz7Y"}],"key":"lqeKMUwtYZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mean center of spherical polygon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MbgH6a6LgQ"}],"identifier":"mean-center-of-spherical-polygon","label":"Mean center of spherical polygon","html_id":"mean-center-of-spherical-polygon","implicit":true,"key":"O3XveXWbdD"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A spherical polygon can have a fairly regular shape, especially as more points are added. But it is fairly simple using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GCqVwhAzND"},{"type":"inlineCode","value":"shapley","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"faBZbHVExc"},{"type":"text","value":" Python package to determine the mean center.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AXjv3p0rue"}],"key":"wjNS4AItGL"}],"key":"vvWXYASBpK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def polygon_centroid(polygon_pts=None):\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts]\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts]\n    lat_lon_coords = tuple(zip(longitudes, latitudes))\n    polygon = Polygon(lat_lon_coords)\n    return (polygon.centroid.y, polygon.centroid.x)","key":"vJQ2sfVVrR"},{"type":"output","id":"p5QyCzAoJvTEvCEKOauIA","data":[],"key":"T7qdTwCl3j"}],"key":"nunTIRGNd9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"polygon_centroid([\"boulder\", \"boston\", \"houston\"])","key":"YCKS33OWzA"},{"type":"output","id":"dIjjdBp4e3E1Hycl2z_hN","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"(37.30896666666666, -90.47586666666665)","content_type":"text/plain"}}}],"key":"V4zWOqlJHX"}],"key":"FABaasJzSU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Centroid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pgG7bbbYQ7"}],"identifier":"plot-centroid","label":"Plot Centroid","html_id":"plot-centroid","implicit":true,"key":"AySN83CvpV"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The center of a polygon can be fairly apparently on a map, let’s give it a look!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iWe6URzXBB"}],"key":"ztu8TnfHMS"}],"key":"vGLLiSyNru"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_centroid(polygon_pts=None,\n                   lon_west=-180, lon_east=180,\n                   lat_south=-90, lat_north=90):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n\n   # plot polygon points\n    longitudes = [location_df.loc[x, \"longitude\"] for x in polygon_pts] # longitude\n    latitudes = [location_df.loc[y, \"latitude\"] for y in polygon_pts] # latitude\n    plt.scatter(longitudes, latitudes, s=50, c=\"blue\")\n    plt.fill(longitudes, latitudes, alpha=0.5)\n\n    # plot check point\n    centeroid = polygon_centroid(polygon_pts)\n    plt.scatter(centeroid[1], centeroid[0], s=100, c=\"red\")\n    plt.title(f\"Centroid = {centeroid}\")\n    plt.show()","key":"SYewMevm79"},{"type":"output","id":"Oe4Z1eGooGJYxcPJN47gF","data":[],"key":"T6PSQRR3Fi"}],"key":"bKiC5T7w8l"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"boulder\", \"boston\", \"houston\"],\n               -130, -60, 20, 60)","key":"SpR9Hmzvlz"},{"type":"output","id":"AJKSnaVLqXSj_du44JWom","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"a9816185a2d44193a5cdae7c2d9b4c44","path":"/great-circle-cookbook/_preview/7/build/a9816185a2d44193a5cdae7c2d9b4c44.png"}}}],"key":"cH9gmUY70c"}],"key":"GKk3xYVG0k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_centroid([\"redwoods\", \"boulder\", \"cape canaveral\", \"houston\"],\n               -130, -60, 20, 60)","key":"sE56wHL80i"},{"type":"output","id":"TC1BuupmMz9X3hhu3nuIG","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"5977e9d7a07e9ce09f3941af9552703c","path":"/great-circle-cookbook/_preview/7/build/5977e9d7a07e9ce09f3941af9552703c.png"}}}],"key":"ztyeKztU17"}],"key":"R9dVSLgKv3"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q3APypRujd"}],"key":"BAoQDVflcn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rSAD378SNQ"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"NgufOo3i4r"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook covers working with spherical polygons to determine the ordering of coordinates, center of polygons, and whether or not a point lies within a spherical polygon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"V4vCayKucK"}],"key":"lIbTiYp6od"}],"key":"u7XnyfCIZu"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vZv2U6ducw"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"NKhi1AQuoF"}],"key":"EVeRzXUM6b"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K6UJ1Df4wm"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"o1V9xWLgnc"}],"key":"MIyLuC9Cra"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"c8DTzuvwMe"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"WCliTAZg6h"}],"key":"OldNRgI8LH"}],"key":"FmCDJZYFHp"}],"key":"BXtnDmVUwP"}],"key":"i1m1SnIr6V"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Angles and Great Circles","url":"/notebooks/tutorials/angles","group":"Tutorials"}}},"domain":"http://localhost:3000"}