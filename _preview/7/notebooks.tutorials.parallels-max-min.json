{"version":2,"kind":"Notebook","sha256":"b4e5aa3a72df3db60fedad529e92af2905e5b250493af6bc020772fa9ee62b06","slug":"notebooks.tutorials.parallels-max-min","location":"/notebooks/tutorials/3_parallels_max_min.ipynb","dependencies":[],"frontmatter":{"title":"Great Circles and Parallels","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Cora Schneck","given":"Cora","family":"Schneck"},"name":"Cora Schneck","orcid":"0009-0009-1415-5170","affiliations":["NSF National Center for Atmospheric Research"],"id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/great-circle-cookbook","copyright":"2025","affiliations":[{"id":"NSF National Center for Atmospheric Research","name":"NSF National Center for Atmospheric Research"},{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/great-circle-cookbook/blob/HEAD/notebooks/tutorials/3_parallels_max_min.ipynb","thumbnail":"/great-circle-cookbook/_preview/7/build/0425273bd8f62ee885fd0d5f673b76df.gif","exports":[{"format":"ipynb","filename":"3_parallels_max_min.ipynb","url":"/great-circle-cookbook/_preview/7/build/3_parallels_max_min-8835420ab5304d85ad584a98d0ca9712.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/great-circle-cookbook/_preview/7/build/0425273bd8f62ee885fd0d5f673b76df.gif","alt":"Ship on waves gif","key":"UeXhDLlgNt","urlSource":"https://cdn1.byjus.com/wp-content/uploads/blog/2021/01/21071038/giphy-1.gif"}],"key":"cuGgKppqNH"}],"key":"Hko1k7n4YG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great Circles and Parallels","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hIjKIPFwxg"}],"identifier":"great-circles-and-parallels","label":"Great Circles and Parallels","html_id":"great-circles-and-parallels","implicit":true,"key":"fFH2nuWa9V"}],"key":"BQKPLl6Ehl"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nsHn2m6uKw"}],"key":"Jlyxmn4gfL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UpZyBy3Rhz"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"vvBVWjo1Cd"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As a great circle path traverses around the globe, it will eventually hit a maximum or minimum latitude (unless it is a great circlea around the equator which will never vary in latitude). For this notebook, we will learn how to determine the position for the maximum and minimum positions along the globe as well as how to determine where (and if) a point crosses a specific parallel.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YOwY18hobZ"}],"key":"xVk6XmslRE"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Determine the maximum latitude on a Great Circle Path","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Le90efXKzf"}],"key":"bFKedkOfI2"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Determine the minimum latitude on a Great Great path","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jbVwaBHyfI"}],"key":"KMkS1Y4URk"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Determine when a great circle path crosses parallels (TODO)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kMVj6grE2g"}],"key":"YJd04IfBjX"}],"key":"glX9bvXCCY"}],"key":"TMx5gXcpxy"}],"key":"t0dcn3XhFa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vm6DTDqixx"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"sZ47jUcNAm"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bMzGbxOJ1w"}],"key":"DqVb4pACkh"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RJiepwkLkS"}],"key":"HemHeOnbhX"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xezFAy5Oe8"}],"key":"ulxKYbDmVM"}],"key":"oC2fE8UD8s"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Numpy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ExphswvEMx"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"VhqnWqKmfZ"}],"key":"CrrLeI1nxG"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"LY30htDLYq"}],"key":"ZeTgV8QRs8"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Used to work with large arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eDxrpxfsEn"}],"key":"QIXpWCsH8E"}],"key":"QZfWDDT0pp"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"hwkDHlEh90"}],"urlSource":"https://foundations.projectpythia.org/core/pandas","key":"RXh84VTaLz"}],"key":"Jjvmt80KMc"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"oHJrhRqbBL"}],"key":"l3pDerPoHk"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Used to read in and organize data (in particular dataframes)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"xhdu1YOydb"}],"key":"vfmvQwgt7y"}],"key":"uHD9OXwbuB"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NcjdZwoC8H"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"Lnom0LgUle"}],"key":"jzSHWniOPV"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ANwT40yIAH"}],"key":"kW4MHvq7qf"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Will be used for adding maps to plotting","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rtnQh0hksI"}],"key":"iEHEGfPvzL"}],"key":"K3grUNFNXE"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"a8VUbAOWWx"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/","key":"K3Sn8MzXYh"}],"key":"WeQDxNP0ul"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"HkmrDU0bdo"}],"key":"GMLcyLIgDC"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Will be used for plotting","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"kHQwJTLYsh"}],"key":"DEttBr1mos"}],"key":"xc9tOZlGqb"}],"key":"A5tJaIUhyi"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"quEY5hWLE7"}],"key":"Q3czOtUIyW"},{"type":"text","value":": 40 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lmwl2vCCpk"}],"key":"U7prQ7WlAQ"}],"key":"YEs4xtwrL7"}],"key":"Qi5JaPIwkd"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HGIoN7mkPm"}],"key":"YuCQOsPN2s"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wa8kBbmAhb"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"q7IGyOKj5v"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Import Packages","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Jl7yO0UHwf"}],"key":"wRSgT8QOyq"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Setup location dataframe with coordinates","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"uiiB2sX6OK"}],"key":"oiONoBHsEn"}],"key":"jag816rVnV"}],"key":"zE7rgAeVUz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd       # reading in data for location information from text file\nimport numpy as np        # working with arrays, vectors, cross/dot products, and radians\n\nfrom pyproj import Geod   # working with the Earth as an ellipsod (WGS-84)\n\nimport matplotlib.pyplot as plt                        # plotting a graph\nfrom cartopy import crs as ccrs, feature as cfeature   # plotting a world map","key":"SDE236WvI3"},{"type":"output","id":"joZen1_XF9gIv1jUNkVLI","data":[],"key":"EoLNAy89QK"}],"key":"nXh1swRBLZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get all Coordinates for Locations\nlocation_df = pd.read_csv(\"../location_full_coords.txt\")\nlocation_df = location_df.rename(columns=lambda x: x.strip()) # strip excess white space from column names and values\nlocation_df.head()","key":"dorvSUM3yL"},{"type":"output","id":"9hWVvqLArovY0vWbjI-Zr","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"       name  latitude  longitude    cart_x    cart_y    cart_z  rho     theta  \\\n0   arecibo   18.3441   -66.7527  0.374643 -0.872119  0.314723  1.0 -1.165054   \n1   boulder   40.0150  -105.2705 -0.201714 -0.738835  0.642988  1.0  1.304276   \n2    boston   42.3601   -71.0589  0.239852 -0.698914  0.673788  1.0 -1.240212   \n3  redwoods   41.4017  -124.0417 -0.419898 -0.621549  0.661334  1.0  0.976657   \n4   houston   29.5518   -95.0982 -0.077303 -0.866469  0.493210  1.0  1.481816   \n\n        phi       polar_x       polar_y       polar_z  \n0  1.250631 -5.562495e+06  2.389526e+06  2.007347e+06  \n1  0.872403 -4.712394e+06 -1.286558e+06  4.101066e+06  \n2  0.831473 -4.457769e+06  1.529809e+06  4.297512e+06  \n3  0.848200 -3.964322e+06 -2.678169e+06  4.218080e+06  \n4  1.055020 -5.526456e+06 -4.930480e+05  3.145762e+06  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>cart_x</th>\n      <th>cart_y</th>\n      <th>cart_z</th>\n      <th>rho</th>\n      <th>theta</th>\n      <th>phi</th>\n      <th>polar_x</th>\n      <th>polar_y</th>\n      <th>polar_z</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arecibo</td>\n      <td>18.3441</td>\n      <td>-66.7527</td>\n      <td>0.374643</td>\n      <td>-0.872119</td>\n      <td>0.314723</td>\n      <td>1.0</td>\n      <td>-1.165054</td>\n      <td>1.250631</td>\n      <td>-5.562495e+06</td>\n      <td>2.389526e+06</td>\n      <td>2.007347e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>boulder</td>\n      <td>40.0150</td>\n      <td>-105.2705</td>\n      <td>-0.201714</td>\n      <td>-0.738835</td>\n      <td>0.642988</td>\n      <td>1.0</td>\n      <td>1.304276</td>\n      <td>0.872403</td>\n      <td>-4.712394e+06</td>\n      <td>-1.286558e+06</td>\n      <td>4.101066e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>boston</td>\n      <td>42.3601</td>\n      <td>-71.0589</td>\n      <td>0.239852</td>\n      <td>-0.698914</td>\n      <td>0.673788</td>\n      <td>1.0</td>\n      <td>-1.240212</td>\n      <td>0.831473</td>\n      <td>-4.457769e+06</td>\n      <td>1.529809e+06</td>\n      <td>4.297512e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>redwoods</td>\n      <td>41.4017</td>\n      <td>-124.0417</td>\n      <td>-0.419898</td>\n      <td>-0.621549</td>\n      <td>0.661334</td>\n      <td>1.0</td>\n      <td>0.976657</td>\n      <td>0.848200</td>\n      <td>-3.964322e+06</td>\n      <td>-2.678169e+06</td>\n      <td>4.218080e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>houston</td>\n      <td>29.5518</td>\n      <td>-95.0982</td>\n      <td>-0.077303</td>\n      <td>-0.866469</td>\n      <td>0.493210</td>\n      <td>1.0</td>\n      <td>1.481816</td>\n      <td>1.055020</td>\n      <td>-5.526456e+06</td>\n      <td>-4.930480e+05</td>\n      <td>3.145762e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"Eg6GDq9aWO"}],"key":"PLlR23KzWU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"location_df.index = location_df[\"name\"]","key":"MrXHezkoAS"},{"type":"output","id":"QgrsxVfSixkgKrsjSTrC7","data":[],"key":"DTCKFYjqmU"}],"key":"mbO3e5T9gZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CEs5Tt6oWL"}],"identifier":"maximum-latitude-on-a-great-circle-path","label":"Maximum Latitude on a Great Circle Path","html_id":"maximum-latitude-on-a-great-circle-path","implicit":true,"key":"BqAkvuBdya"}],"key":"nx2sod9PhW"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We have previously determined an equation to derive a great circle path from intermediate points from two points on a great circle arc. Without additional calculations, we can use a list of points along the great circle path to find the maximum location of the maximum and minimum. It will simply be when the latitude is either at its maximum and minimum.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zHAMv4d1ui"}],"key":"WtEdT5yBlG"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"By default, the equation below will determine 360 points along longitude, so the output will only have a resolution of 1 degree. However, by defining the longitude with more points, the resolution increases.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"n7SdEMWEXC"}],"key":"GY3aFZmEb4"}],"key":"OTYWMBqRxC"},{"type":"block","kind":"notebook-code","data":{"jupyter":{"source_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"# See Previous Notebook to see how we generate a list of latitude/longtiude points for a great circle path\n\ndef generate_latitude_along_gc(start_point=None, end_point=None, number_of_lon_pts=360):\n    lon1 = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    lat1 = np.deg2rad(location_df.loc[start_point, \"latitude\"])\n    lon2 = np.deg2rad(location_df.loc[end_point, \"longitude\"])\n    lat2 = np.deg2rad(location_df.loc[end_point, \"latitude\"])\n\n    # Verify not meridian (longitude passes through the poles)\n    if np.sin(lon1 - lon2) == 0:\n        print(\"Invalid inputs: start/end points are meridians\")\n        # plotting meridians at 0 longitude through all latitudes\n        meridian_lat = np.arange(-90, 90, 180/len(longitude_lst)) # split in n number\n        meridians = []\n        for lat in meridian_lat:\n            meridians.append((lat, 0))\n        return meridians\n\n    # verify not anitpodal (diametrically opposite, points)\n    if lat1 + lat2 == 0 and abs(lon1-lon2) == np.pi:\n        print(\"Invalid inputs: start/end points are antipodal\")\n        return []\n\n    # generate n total number of longitude points along the great circle\n    # https://github.com/rspatial/geosphere/blob/master/R/greatCircle.R#L18C3-L18C7\n    gc_lon_lst = []\n    for lon in range(1, number_of_lon_pts+1):\n        new_lon = (lon  * (360/number_of_lon_pts) - 180)\n        gc_lon_lst.append(np.deg2rad(new_lon))\n\n    # Intermediate points on a great circle: https://edwilliams.org/avform147.htm\"\n    gc_lat_lon = []\n    for gc_lon in gc_lon_lst:\n        num = np.sin(lat1)*np.cos(lat2)*np.sin(gc_lon-lon2)-np.sin(lat2)*np.cos(lat1)*np.sin(gc_lon-lon1)\n        den = np.cos(lat1)*np.cos(lat2)*np.sin(lon1-lon2)\n        new_lat = np.arctan(num/den)\n        gc_lat_lon.append((float(np.rad2deg(new_lat)), float(np.rad2deg(gc_lon))))\n    return gc_lat_lon","key":"wSpGM893Jq"},{"type":"output","id":"N82Ha6_WwdwTZeH9Xbvq5","data":[],"key":"mxkMtfN5Oc"}],"key":"NGnSC3kZtH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Max Latitude Position (within 1 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"f7uJYws7Cw"},{"type":"output","id":"KFFrepjnvMQwq1CVlNPKn","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude Position (within 1 degree): (42.750406941471915, -81.0)\n"}],"key":"kvOe8yvrXG"}],"key":"KPeeaWJUJn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Max Latitude Position (within 0.5 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"A3tGAgi5Jr"},{"type":"output","id":"HmtHwr4RwkBPGB2irQW5A","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude Position (within 0.5 degree): (42.751388471834524, -80.5)\n"}],"key":"PBl2Tke3yE"}],"key":"nsbQG2WjNY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Max Latitude Position (within 0.3 degree): {max(lat_lon, key=lambda x:x[0])}\")","key":"PEFvGivyiA"},{"type":"output","id":"Wvx5FrUHhnICIZyXT1Qdk","data":[{"output_type":"stream","name":"stdout","text":"Max Latitude Position (within 0.3 degree): (42.751302958796096, -80.66666666666667)\n"}],"key":"EiEMnZJjdu"}],"key":"UQn1UgbhX8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Maximum","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YnLfFa8eIt"}],"identifier":"plot-maximum","label":"Plot Maximum","html_id":"plot-maximum","implicit":true,"key":"VRW5LyslZY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s see this on a map. Let’s plot the maximum point along a great circle path:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qjculpraql"}],"key":"xT3VMD840h"}],"key":"YVueByv1ix"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_coordinate_max_min(great_circle_pts=None,\n                            max_coord=None, min_coord=None,\n                            title=None):\n    # Set up world map plot\n    fig = plt.subplots(figsize=(15, 10))\n    projection_map = ccrs.PlateCarree()\n    ax = plt.axes(projection=projection_map)\n    lon_west, lon_east, lat_south, lat_north = -180, 180, -90, 90\n    ax.set_extent([lon_west, lon_east, lat_south, lat_north], crs=projection_map)\n    ax.coastlines(color=\"black\")\n    ax.add_feature(cfeature.STATES, edgecolor=\"black\")\n    \n    # Plot Great Circle Latitude/Longitude Location\n    longitudes = [x[1] for x in great_circle_pts] # longitude\n    latitudes = [x[0] for x in great_circle_pts] # latitude\n    plt.plot(longitudes, latitudes)\n\n    # Overly Max/Min Coordinates\n    if max_coord is not None:\n        plt.scatter([max_coord[1]], [max_coord[0]], s=100, c=\"red\")\n    if min_coord is not None:\n        plt.scatter([min_coord[1]], [min_coord[0]], s=100, c=\"green\")\n    \n    # Setup Axis Limits and Title/Labels\n    plt.title(title)\n    plt.show()","key":"v4Xu1VKeIJ"},{"type":"output","id":"lJqxnPpPWkpMxYig8fpaF","data":[],"key":"jdiDpcoQvB"}],"key":"ucYB0gMoCs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"WE20p1taiN"},{"type":"output","id":"ystHqFLaatigstJvDjwNT","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-gc/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"7e5fa038a92e864dcba2073d8dc5e972","path":"/great-circle-cookbook/_preview/7/build/7e5fa038a92e864dcba2073d8dc5e972.png"}}}],"key":"EW8cO6sojD"}],"key":"sTMYwjSjdh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            max_coord=max_lat_lon,\n                            title=f\"Max Latitude located at {max_lat_lon}\")","key":"rSZOmCvKoK"},{"type":"output","id":"tIwszER9n87bXKzhi7uL4","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e7f27d1b674dcc0f2aa77c5a30f26b8c","path":"/great-circle-cookbook/_preview/7/build/e7f27d1b674dcc0f2aa77c5a30f26b8c.png"}}}],"key":"Sld81BGGTH"}],"key":"w1kqwizp6i"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p6NHmiX1s1"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula","implicit":true,"key":"sMekHar8Oi"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VNjoPN0wfl"}],"urlSource":"https://en.wikipedia.org/wiki/Clairaut%27s_relation_(differential_geometry)","data":{"page":"Clairaut%27s_relation_(differential_geometry)","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"LUtRqrSapw"},{"type":"text","value":" (Clairaut’s equation or Clairaut’s relation) is a differential equation which defines the relationship between the latitude, φ, and the true course (bearing, θ) where:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PUhUUSs2Eu"}],"key":"y2cJpmilnu"},{"type":"math","value":"sin(θ) * cos(φ) = \\text{constant}","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>constant</mtext></mrow><annotation encoding=\"application/x-tex\">sin(θ) * cos(φ) = \\text{constant}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord text\"><span class=\"mord\">constant</span></span></span></span></span></span>","enumerator":"1","key":"SwWMtnaODH"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"So, for any two points (A and B) along the great circle:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yrmvEwnpNe"}],"key":"kEdhJacsMb"},{"type":"math","value":"sin(θA) * cos(φA) = sin(θB) * cos(φB)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sin(θA) * cos(φA) = sin(θB) * cos(φB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">θB</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">φB</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"2","key":"TAWsDlnuJe"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"So, to solve for the maximum latitude the true course should be when 90 and 270 degrees on the unit sphere where for ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"UFw7ATkbom"},{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"cyjnPGphKi"}],"key":"kzNMhpnuBG"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"rEynKNmFRW"}],"key":"vypT54vdgf"},{"type":"math","value":"\\text{max latitude} = acos(|sin(θ) * cos(φ)|)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>max latitude</mtext><mo>=</mo><mi>a</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{max latitude} = acos(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">max latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"3","key":"xjM58y1R1v"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"For the purpose of this example, we will use ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"SJGlSBuho7"},{"type":"inlineCode","value":"pyproj","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"QWtaGsz83I"},{"type":"text","value":" geodesic to determine the bearing based on a great circle arc, but consult previous sections if you want to determine bearing mathetically based on the unit sphere instead of the ellipsoid.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"XnLED8MSTj"}],"key":"ELPqgzaNx1"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Important Note","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"kJtYfrjLRt"}],"key":"hdHjjvS0Uk"}],"key":"Jw3fSwNURJ"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Clairaut’s Formula works from unit sphere, and as a result, is subject to errors (about 3%, about +/- 11 degrees).","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"VMUTxoJ9tS"}],"key":"gz7GVfzqJh"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm#Clairaut","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Ed Williams: Clairaut’s Formula","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"SjlNH1CNcS"}],"urlSource":"https://edwilliams.org/avform147.htm#Clairaut","key":"lmekEq9SMV"}],"key":"ydAc582NHW"}],"key":"ZobPDPM0rk"}],"key":"PtBtSHywoJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_max(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    max_lat = np.arccos(np.abs(np.sin(fwd_bearing) * np.cos(start_lat)))\n    return np.rad2deg(max_lat)","key":"jqY6tHFlgf"},{"type":"output","id":"oJ9QgxJikRSDIMDRmB7vC","data":[],"key":"STb7v8RqoA"}],"key":"Ku7TVw0MUk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"max_lat = clairaut_formula_max(\"boulder\", \"boston\")\nprint(f\"Max latitude from Boulder to Boston: {max_lat}\")","key":"cE9QJsaOcz"},{"type":"output","id":"J5DSKqim9pv4whvfNN_EA","data":[{"output_type":"stream","name":"stdout","text":"Max latitude from Boulder to Boston: 75.50718325253314\n"}],"key":"lAO60gtW5s"}],"key":"hP7fpaPGO3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude on a Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ra1NGa2qHb"}],"identifier":"minimum-latitude-on-a-great-circle-path","label":"Minimum Latitude on a Great Circle Path","html_id":"minimum-latitude-on-a-great-circle-path","implicit":true,"key":"A8CZh7h9ef"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Like finding maximum from a list of great circle path, the smallest latitude can be found by analysing the list for the smallest latitude point. The minimum also represnts the antipodal position on the globe from the maximum:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fbtJJSThnf"}],"key":"MnGtVSHM6d"}],"key":"Mf7UCoFRmG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Antipodal Point of Max is the Minimum","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MamIvIRpW7"}],"identifier":"antipodal-point-of-max-is-the-minimum","label":"Antipodal Point of Max is the Minimum","html_id":"antipodal-point-of-max-is-the-minimum","implicit":true,"key":"X7JHZ91v6k"}],"key":"GGBFmoQC0p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def antipodal(latitude=None, longitude=None):\n    anti_lat = -1 * latitude\n    if longitude > 0:\n        anti_lon = longitude - 180\n    else:\n        anti_lon = longitude + 180\n    return (anti_lat, anti_lon)","key":"cRc7dxCO9O"},{"type":"output","id":"LdDEh2hJaN4ZY686wGRP8","data":[],"key":"XkGBK5xBBy"}],"key":"JxRYa7lLZb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"houston\", number_of_lon_pts=360)\nmax_lat_lon = max(gc_lat_lon, key=lambda x:x[0])\nprint(f\"Maximum Position: {max_lat_lon}\")\nprint(f\"Minimum (Antipodal) Position : {antipodal(max_lat_lon[0], max_lat_lon[1])}\")","key":"XExWhGISUe"},{"type":"output","id":"_-Lu7x7_T4EHSzWFrHg7E","data":[{"output_type":"stream","name":"stdout","text":"Maximum Position: (59.410929434369436, -166.0)\nMinimum (Antipodal) Position : (-59.410929434369436, 14.0)\n"}],"key":"p6O4ZDTAg6"}],"key":"g7uwO2sVwe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Minimum Latitude along Great Circle Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xfpyU8k2mZ"}],"identifier":"minimum-latitude-along-great-circle-path","label":"Minimum Latitude along Great Circle Path","html_id":"minimum-latitude-along-great-circle-path","implicit":true,"key":"zbZx3l1Vz4"}],"key":"q5LoM6925b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nprint(f\"Min Latitude (within 1 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"FLp5Ix10v8"},{"type":"output","id":"XSf--wXfjCTN-PEe5vr6q","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 1 degree): (-42.75040694147194, 99.0)\n"}],"key":"KnSVTjxniJ"}],"key":"DhPwCYCzl7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=720)\nprint(f\"Min Latitude (within 0.5 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"i0aVgRRVW0"},{"type":"output","id":"RK8sSUmtVX7P91uiEKWZM","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.5 degree): (-42.75138847183453, 99.5)\n"}],"key":"ihdPEHQBFy"}],"key":"i9RT5b5RvJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=1080)\nprint(f\"Min Latitude (within 0.3 degree): {min(lat_lon, key=lambda x:x[0])}\")","key":"LpwDcmZCmx"},{"type":"output","id":"A_2kJjImU4zV47_o-8wfW","data":[{"output_type":"stream","name":"stdout","text":"Min Latitude (within 0.3 degree): (-42.7513029587961, 99.33333333333331)\n"}],"key":"zhrVPYhhXA"}],"key":"e8vZwPjYQ1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s give it a look:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PogWiNY9Tv"}],"key":"bC0xdiblL4"}],"key":"grPCqdrjDP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"gc_lat_lon = generate_latitude_along_gc(\"boulder\", \"boston\", number_of_lon_pts=360)\nmin_lat_lon = min(gc_lat_lon, key=lambda x:x[0])\nplot_coordinate_max_min(great_circle_pts=gc_lat_lon,\n                            min_coord=min_lat_lon,\n                            title=f\"Min Latitude located at {min_lat_lon}\")","key":"m9nyN5bAs9"},{"type":"output","id":"AyvcnAbiPsU3D2BcsC5gK","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e1ec43fac48500d93058564dabf057e8","path":"/great-circle-cookbook/_preview/7/build/e1ec43fac48500d93058564dabf057e8.png"}}}],"key":"uGDcMhQdVW"}],"key":"O233opiCDW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Maximumn Latitude from Clairaut’s Formula","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hwjjTBTXA2"}],"identifier":"maximumn-latitude-from-clairauts-formula","label":"Maximumn Latitude from Clairaut’s Formula","html_id":"maximumn-latitude-from-clairauts-formula-1","implicit":true,"key":"den5mbIBDW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To solve for the minimum, the true course should be when 0 and 180 degrees on the unit sphere where for ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qdwj0mYLBj"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"any","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VJfSJpbtt9"}],"key":"Ejg7KtxwUr"},{"type":"text","value":" bearing/latitude along the great circle:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TkD2PZyOeg"}],"key":"ntH8lM5JWt"},{"type":"math","value":"\\text{min latitude} = asin(|sin(θ) * cos(φ)|)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>min latitude</mtext><mo>=</mo><mi>a</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{min latitude} = asin(|sin(θ) * cos(φ)|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">min latitude</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></span>","enumerator":"4","key":"jZ13uUKexZ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The southernmost point is the antipode to the northernmost (max) latitude.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qJ1YZqTIwI"}],"key":"TThLqjBpZY"}],"key":"zKxtyYxPyq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clairaut_formula_min(start_point=None, end_point=None):\n    geodesic = Geod(ellps=\"WGS84\")\n    fwd_bearing, _, _ =  geodesic.inv(location_df.loc[start_point, \"longitude\"],\n                                      location_df.loc[start_point, \"latitude\"],\n                                      location_df.loc[end_point, \"longitude\"],\n                                      location_df.loc[end_point, \"latitude\"])\n    # Clairaut Formula\n    start_lat = np.deg2rad(location_df.loc[start_point, \"longitude\"])\n    min_lat = np.arcsin(np.abs(np.cos(fwd_bearing) * np.sin(start_lat)))\n    return np.rad2deg(min_lat)","key":"UYXJUv7ADo"},{"type":"output","id":"URb_yq3vib6h_jzCk70E7","data":[],"key":"GDr7MkLkxm"}],"key":"vF6Ur4AKH0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"min_lat = clairaut_formula_min(\"boulder\", \"boston\")\nprint(f\"Min latitude along great circle path from Boulder to Boston: {min_lat}\")","key":"qT3XlwcEwy"},{"type":"output","id":"yH5LR7O19SbhKif26y-N3","data":[{"output_type":"stream","name":"stdout","text":"Min latitude along great circle path from Boulder to Boston: 17.49699780715814\n"}],"key":"Q0osSQxOnk"}],"key":"htshRJ8vFS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Determine when great circle path cross parallels (TODO)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dOf3JGDlBf"}],"identifier":"determine-when-great-circle-path-cross-parallels-todo","label":"Determine when great circle path cross parallels (TODO)","html_id":"determine-when-great-circle-path-cross-parallels-todo","implicit":true,"key":"vo5CAXa4cx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Determine the longitude when a great circle crosses a given latitude parrellel.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QfrLVWby9Z"}],"key":"M1mbTozaQl"}],"key":"ZebSQ5IRMs"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kJePu6S3yp"}],"key":"S5tlkeqtEL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wDpPKXor1v"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"H9YRMm6Of3"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"iIn this notebook, we determined the position and coordinates for the maximum and minimum positions along the great circle arc as well as the position where a great circle crosses a specific parallel.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"jEytMVCkMh"}],"key":"bCg1xdjRjg"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YIRbvJto61"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"nOAI0y52dz"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Next, we will work with multiple great circle paths to determine how and where they interest","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"UasyWvGAEh"}],"key":"DCDRUi0sDO"}],"key":"sKQ1Saa6kl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mjE2hlGXEm"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"enj2qfZh0A"}],"key":"bJn6aBGuSO"},{"type":"block","kind":"notebook-content","children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"link","url":"https://edwilliams.org/avform147.htm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aviation Formulary V1.47","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LiV4pdh5iu"}],"urlSource":"https://edwilliams.org/avform147.htm","key":"ckiN7X2J0Y"}],"key":"UuasW7MYt4"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://www.movable-type.co.uk/scripts/latlong.html","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Moveable Type Script","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"l8cIPHPNbn"}],"urlSource":"https://www.movable-type.co.uk/scripts/latlong.html","key":"dRlmozuIdq"}],"key":"uPRbGYrGpA"}],"key":"rtFDqEnjIL"}],"key":"spdHwybzlB"}],"key":"PXRqQClRRW"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Great Circles and a Point","url":"/notebooks/tutorials/arc-to-point","group":"Tutorials"},"next":{"title":"Intersections of Great Circles","url":"/notebooks/tutorials/path-intersection","group":"Tutorials"}}},"domain":"http://localhost:3000"}